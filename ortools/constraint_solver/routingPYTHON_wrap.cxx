/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGPYTHON
#define SWIGPYTHON
#endif

#define SWIG_DIRECTORS
#define SWIG_PYTHON_DIRECTOR_NO_VTABLE


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


#if defined(_DEBUG) && defined(SWIG_PYTHON_INTERPRETER_NO_DEBUG)
/* Use debug wrappers with the Python release dll */
# undef _DEBUG
# include <Python.h>
# define _DEBUG
#else
# include <Python.h>
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13



/* Compatibility macros for Python 3 */
#if PY_VERSION_HEX >= 0x03000000

#define PyClass_Check(obj) PyObject_IsInstance(obj, (PyObject *)&PyType_Type)
#define PyInt_Check(x) PyLong_Check(x)
#define PyInt_AsLong(x) PyLong_AsLong(x)
#define PyInt_FromLong(x) PyLong_FromLong(x)
#define PyInt_FromSize_t(x) PyLong_FromSize_t(x)
#define PyString_Check(name) PyBytes_Check(name)
#define PyString_FromString(x) PyUnicode_FromString(x)
#define PyString_Format(fmt, args)  PyUnicode_Format(fmt, args)
#define PyString_AsString(str) PyBytes_AsString(str)
#define PyString_Size(str) PyBytes_Size(str)	
#define PyString_InternFromString(key) PyUnicode_InternFromString(key)
#define Py_TPFLAGS_HAVE_CLASS Py_TPFLAGS_BASETYPE
#define PyString_AS_STRING(x) PyUnicode_AS_STRING(x)
#define _PyLong_FromSsize_t(x) PyLong_FromSsize_t(x)

#endif

#ifndef Py_TYPE
#  define Py_TYPE(op) ((op)->ob_type)
#endif

/* SWIG APIs for compatibility of both Python 2 & 3 */

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_FromFormat PyUnicode_FromFormat
#else
#  define SWIG_Python_str_FromFormat PyString_FromFormat
#endif


/* Warning: This function will allocate a new string in Python 3,
 * so please call SWIG_Python_str_DelForPy3(x) to free the space.
 */
SWIGINTERN char*
SWIG_Python_str_AsChar(PyObject *str)
{
#if PY_VERSION_HEX >= 0x03000000
  char *cstr;
  char *newstr;
  Py_ssize_t len;
  str = PyUnicode_AsUTF8String(str);
  PyBytes_AsStringAndSize(str, &cstr, &len);
  newstr = (char *) malloc(len+1);
  memcpy(newstr, cstr, len+1);
  Py_XDECREF(str);
  return newstr;
#else
  return PyString_AsString(str);
#endif
}

#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_Python_str_DelForPy3(x) free( (void*) (x) )
#else
#  define SWIG_Python_str_DelForPy3(x) 
#endif


SWIGINTERN PyObject*
SWIG_Python_str_FromChar(const char *c)
{
#if PY_VERSION_HEX >= 0x03000000
  return PyUnicode_FromString(c); 
#else
  return PyString_FromString(c);
#endif
}

/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# if defined(_MSC_VER) || defined(__BORLANDC__) || defined(_WATCOM)
#  define PyOS_snprintf _snprintf
# else
#  define PyOS_snprintf snprintf
# endif
#endif

/* A crude PyString_FromFormat implementation for old Pythons */
#if PY_VERSION_HEX < 0x02020000

#ifndef SWIG_PYBUFFER_SIZE
# define SWIG_PYBUFFER_SIZE 1024
#endif

static PyObject *
PyString_FromFormat(const char *fmt, ...) {
  va_list ap;
  char buf[SWIG_PYBUFFER_SIZE * 2];
  int res;
  va_start(ap, fmt);
  res = vsnprintf(buf, sizeof(buf), fmt, ap);
  va_end(ap);
  return (res < 0 || res >= (int)sizeof(buf)) ? 0 : PyString_FromString(buf);
}
#endif

#ifndef PyObject_DEL
# define PyObject_DEL PyObject_Del
#endif

/* A crude PyExc_StopIteration exception for old Pythons */
#if PY_VERSION_HEX < 0x02020000
# ifndef PyExc_StopIteration
#  define PyExc_StopIteration PyExc_RuntimeError
# endif
# ifndef PyObject_GenericGetAttr
#  define PyObject_GenericGetAttr 0
# endif
#endif

/* Py_NotImplemented is defined in 2.1 and up. */
#if PY_VERSION_HEX < 0x02010000
# ifndef Py_NotImplemented
#  define Py_NotImplemented PyExc_RuntimeError
# endif
#endif

/* A crude PyString_AsStringAndSize implementation for old Pythons */
#if PY_VERSION_HEX < 0x02010000
# ifndef PyString_AsStringAndSize
#  define PyString_AsStringAndSize(obj, s, len) {*s = PyString_AsString(obj); *len = *s ? strlen(*s) : 0;}
# endif
#endif

/* PySequence_Size for old Pythons */
#if PY_VERSION_HEX < 0x02000000
# ifndef PySequence_Size
#  define PySequence_Size PySequence_Length
# endif
#endif

/* PyBool_FromLong for old Pythons */
#if PY_VERSION_HEX < 0x02030000
static
PyObject *PyBool_FromLong(long ok)
{
  PyObject *result = ok ? Py_True : Py_False;
  Py_INCREF(result);
  return result;
}
#endif

/* Py_ssize_t for old Pythons */
/* This code is as recommended by: */
/* http://www.python.org/dev/peps/pep-0353/#conversion-guidelines */
#if PY_VERSION_HEX < 0x02050000 && !defined(PY_SSIZE_T_MIN)
typedef int Py_ssize_t;
# define PY_SSIZE_T_MAX INT_MAX
# define PY_SSIZE_T_MIN INT_MIN
typedef inquiry lenfunc;
typedef intargfunc ssizeargfunc;
typedef intintargfunc ssizessizeargfunc;
typedef intobjargproc ssizeobjargproc;
typedef intintobjargproc ssizessizeobjargproc;
typedef getreadbufferproc readbufferproc;
typedef getwritebufferproc writebufferproc;
typedef getsegcountproc segcountproc;
typedef getcharbufferproc charbufferproc;
static long PyNumber_AsSsize_t (PyObject *x, void *SWIGUNUSEDPARM(exc))
{
  long result = 0;
  PyObject *i = PyNumber_Int(x);
  if (i) {
    result = PyInt_AsLong(i);
    Py_DECREF(i);
  }
  return result;
}
#endif

#if PY_VERSION_HEX < 0x02050000
#define PyInt_FromSize_t(x) PyInt_FromLong((long)x)
#endif

#if PY_VERSION_HEX < 0x02040000
#define Py_VISIT(op)				\
  do { 						\
    if (op) {					\
      int vret = visit((op), arg);		\
      if (vret)					\
        return vret;				\
    }						\
  } while (0)
#endif

#if PY_VERSION_HEX < 0x02030000
typedef struct {
  PyTypeObject type;
  PyNumberMethods as_number;
  PyMappingMethods as_mapping;
  PySequenceMethods as_sequence;
  PyBufferProcs as_buffer;
  PyObject *name, *slots;
} PyHeapTypeObject;
#endif

#if PY_VERSION_HEX < 0x02030000
typedef destructor freefunc;
#endif

#if ((PY_MAJOR_VERSION == 2 && PY_MINOR_VERSION > 6) || \
     (PY_MAJOR_VERSION == 3 && PY_MINOR_VERSION > 0) || \
     (PY_MAJOR_VERSION > 3))
# define SWIGPY_USE_CAPSULE
# define SWIGPY_CAPSULE_NAME ((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION ".type_pointer_capsule" SWIG_TYPE_TABLE_NAME)
#endif

#if PY_VERSION_HEX < 0x03020000
#define PyDescr_TYPE(x) (((PyDescrObject *)(x))->d_type)
#define PyDescr_NAME(x) (((PyDescrObject *)(x))->d_name)
#define Py_hash_t long
#endif

/* -----------------------------------------------------------------------------
 * error manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME PyObject*
SWIG_Python_ErrorType(int code) {
  PyObject* type = 0;
  switch(code) {
  case SWIG_MemoryError:
    type = PyExc_MemoryError;
    break;
  case SWIG_IOError:
    type = PyExc_IOError;
    break;
  case SWIG_RuntimeError:
    type = PyExc_RuntimeError;
    break;
  case SWIG_IndexError:
    type = PyExc_IndexError;
    break;
  case SWIG_TypeError:
    type = PyExc_TypeError;
    break;
  case SWIG_DivisionByZero:
    type = PyExc_ZeroDivisionError;
    break;
  case SWIG_OverflowError:
    type = PyExc_OverflowError;
    break;
  case SWIG_SyntaxError:
    type = PyExc_SyntaxError;
    break;
  case SWIG_ValueError:
    type = PyExc_ValueError;
    break;
  case SWIG_SystemError:
    type = PyExc_SystemError;
    break;
  case SWIG_AttributeError:
    type = PyExc_AttributeError;
    break;
  default:
    type = PyExc_RuntimeError;
  }
  return type;
}


SWIGRUNTIME void
SWIG_Python_AddErrorMsg(const char* mesg)
{
  PyObject *type = 0;
  PyObject *value = 0;
  PyObject *traceback = 0;

  if (PyErr_Occurred()) PyErr_Fetch(&type, &value, &traceback);
  if (value) {
    char *tmp;
    PyObject *old_str = PyObject_Str(value);
    PyErr_Clear();
    Py_XINCREF(type);

    PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(old_str);
    Py_DECREF(value);
  } else {
    PyErr_SetString(PyExc_RuntimeError, mesg);
  }
}

#if defined(SWIG_PYTHON_NO_THREADS)
#  if defined(SWIG_PYTHON_THREADS)
#    undef SWIG_PYTHON_THREADS
#  endif
#endif
#if defined(SWIG_PYTHON_THREADS) /* Threading support is enabled */
#  if !defined(SWIG_PYTHON_USE_GIL) && !defined(SWIG_PYTHON_NO_USE_GIL)
#    if (PY_VERSION_HEX >= 0x02030000) /* For 2.3 or later, use the PyGILState calls */
#      define SWIG_PYTHON_USE_GIL
#    endif
#  endif
#  if defined(SWIG_PYTHON_USE_GIL) /* Use PyGILState threads calls */
#    ifndef SWIG_PYTHON_INITIALIZE_THREADS
#     define SWIG_PYTHON_INITIALIZE_THREADS  PyEval_InitThreads() 
#    endif
#    ifdef __cplusplus /* C++ code */
       class SWIG_Python_Thread_Block {
         bool status;
         PyGILState_STATE state;
       public:
         void end() { if (status) { PyGILState_Release(state); status = false;} }
         SWIG_Python_Thread_Block() : status(true), state(PyGILState_Ensure()) {}
         ~SWIG_Python_Thread_Block() { end(); }
       };
       class SWIG_Python_Thread_Allow {
         bool status;
         PyThreadState *save;
       public:
         void end() { if (status) { PyEval_RestoreThread(save); status = false; }}
         SWIG_Python_Thread_Allow() : status(true), save(PyEval_SaveThread()) {}
         ~SWIG_Python_Thread_Allow() { end(); }
       };
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   SWIG_Python_Thread_Block _swig_thread_block
#      define SWIG_PYTHON_THREAD_END_BLOCK     _swig_thread_block.end()
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   SWIG_Python_Thread_Allow _swig_thread_allow
#      define SWIG_PYTHON_THREAD_END_ALLOW     _swig_thread_allow.end()
#    else /* C code */
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK   PyGILState_STATE _swig_thread_block = PyGILState_Ensure()
#      define SWIG_PYTHON_THREAD_END_BLOCK     PyGILState_Release(_swig_thread_block)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW   PyThreadState *_swig_thread_allow = PyEval_SaveThread()
#      define SWIG_PYTHON_THREAD_END_ALLOW     PyEval_RestoreThread(_swig_thread_allow)
#    endif
#  else /* Old thread way, not implemented, user must provide it */
#    if !defined(SWIG_PYTHON_INITIALIZE_THREADS)
#      define SWIG_PYTHON_INITIALIZE_THREADS
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_BLOCK)
#      define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_BLOCK)
#      define SWIG_PYTHON_THREAD_END_BLOCK
#    endif
#    if !defined(SWIG_PYTHON_THREAD_BEGIN_ALLOW)
#      define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#    endif
#    if !defined(SWIG_PYTHON_THREAD_END_ALLOW)
#      define SWIG_PYTHON_THREAD_END_ALLOW
#    endif
#  endif
#else /* No thread support */
#  define SWIG_PYTHON_INITIALIZE_THREADS
#  define SWIG_PYTHON_THREAD_BEGIN_BLOCK
#  define SWIG_PYTHON_THREAD_END_BLOCK
#  define SWIG_PYTHON_THREAD_BEGIN_ALLOW
#  define SWIG_PYTHON_THREAD_END_ALLOW
#endif

/* -----------------------------------------------------------------------------
 * Python API portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
  int type;
  char *name;
  long lvalue;
  double dvalue;
  void   *pvalue;
  swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Wrapper of PyInstanceMethod_New() used in Python 3
 * It is exported to the generated module, used for -fastproxy
 * ----------------------------------------------------------------------------- */
#if PY_VERSION_HEX >= 0x03000000
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *func)
{
  return PyInstanceMethod_New(func);
}
#else
SWIGRUNTIME PyObject* SWIG_PyInstanceMethod_New(PyObject *SWIGUNUSEDPARM(self), PyObject *SWIGUNUSEDPARM(func))
{
  return NULL;
}
#endif

#ifdef __cplusplus
}
#endif


/* -----------------------------------------------------------------------------
 * pyrun.swg
 *
 * This file contains the runtime support for Python modules
 * and includes code for managing global variables and pointer
 * type checking.
 *
 * ----------------------------------------------------------------------------- */

/* Common SWIG API */

/* for raw pointers */
#define SWIG_Python_ConvertPtr(obj, pptr, type, flags)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, 0)
#define SWIG_ConvertPtr(obj, pptr, type, flags)         SWIG_Python_ConvertPtr(obj, pptr, type, flags)
#define SWIG_ConvertPtrAndOwn(obj,pptr,type,flags,own)  SWIG_Python_ConvertPtrAndOwn(obj, pptr, type, flags, own)

#ifdef SWIGPYTHON_BUILTIN
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(self, ptr, type, flags)
#else
#define SWIG_NewPointerObj(ptr, type, flags)            SWIG_Python_NewPointerObj(NULL, ptr, type, flags)
#endif

#define SWIG_InternalNewPointerObj(ptr, type, flags)	SWIG_Python_NewPointerObj(NULL, ptr, type, flags)

#define SWIG_CheckImplicit(ty)                          SWIG_Python_CheckImplicit(ty) 
#define SWIG_AcquirePtr(ptr, src)                       SWIG_Python_AcquirePtr(ptr, src)
#define swig_owntype                                    int

/* for raw packed data */
#define SWIG_ConvertPacked(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewPackedObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)

/* for class or struct pointers */
#define SWIG_ConvertInstance(obj, pptr, type, flags)    SWIG_ConvertPtr(obj, pptr, type, flags)
#define SWIG_NewInstanceObj(ptr, type, flags)           SWIG_NewPointerObj(ptr, type, flags)

/* for C or C++ function pointers */
#define SWIG_ConvertFunctionPtr(obj, pptr, type)        SWIG_Python_ConvertFunctionPtr(obj, pptr, type)
#define SWIG_NewFunctionPtrObj(ptr, type)               SWIG_Python_NewPointerObj(NULL, ptr, type, 0)

/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(obj, ptr, sz, ty)            SWIG_Python_ConvertPacked(obj, ptr, sz, ty)
#define SWIG_NewMemberObj(ptr, sz, type)                SWIG_Python_NewPackedObj(ptr, sz, type)


/* Runtime API */

#define SWIG_GetModule(clientdata)                      SWIG_Python_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer)             SWIG_Python_SetModule(pointer)
#define SWIG_NewClientData(obj)                         SwigPyClientData_New(obj)

#define SWIG_SetErrorObj                                SWIG_Python_SetErrorObj                            
#define SWIG_SetErrorMsg                        	SWIG_Python_SetErrorMsg				   
#define SWIG_ErrorType(code)                    	SWIG_Python_ErrorType(code)                        
#define SWIG_Error(code, msg)            		SWIG_Python_SetErrorMsg(SWIG_ErrorType(code), msg) 
#define SWIG_fail                        		goto fail					   


/* Runtime API implementation */

/* Error manipulation */

SWIGINTERN void 
SWIG_Python_SetErrorObj(PyObject *errtype, PyObject *obj) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK; 
  PyErr_SetObject(errtype, obj);
  Py_DECREF(obj);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

SWIGINTERN void 
SWIG_Python_SetErrorMsg(PyObject *errtype, const char *msg) {
  SWIG_PYTHON_THREAD_BEGIN_BLOCK;
  PyErr_SetString(errtype, msg);
  SWIG_PYTHON_THREAD_END_BLOCK;
}

#define SWIG_Python_Raise(obj, type, desc)  SWIG_Python_SetErrorObj(SWIG_Python_ExceptionType(desc), obj)

/* Set a constant value */

#if defined(SWIGPYTHON_BUILTIN)

SWIGINTERN void
SwigPyBuiltin_AddPublicSymbol(PyObject *seq, const char *key) {
  PyObject *s = PyString_InternFromString(key);
  PyList_Append(seq, s);
  Py_DECREF(s);
}

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, PyObject *public_interface, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);
  if (public_interface)
    SwigPyBuiltin_AddPublicSymbol(public_interface, name);
}

#else

SWIGINTERN void
SWIG_Python_SetConstant(PyObject *d, const char *name, PyObject *obj) {   
#if PY_VERSION_HEX < 0x02030000
  PyDict_SetItemString(d, (char *)name, obj);
#else
  PyDict_SetItemString(d, name, obj);
#endif
  Py_DECREF(obj);                            
}

#endif

/* Append a value to the result obj */

SWIGINTERN PyObject*
SWIG_Python_AppendOutput(PyObject* result, PyObject* obj) {
#if !defined(SWIG_PYTHON_OUTPUT_TUPLE)
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyList_Check(result)) {
      PyObject *o2 = result;
      result = PyList_New(1);
      PyList_SetItem(result, 0, o2);
    }
    PyList_Append(result,obj);
    Py_DECREF(obj);
  }
  return result;
#else
  PyObject*   o2;
  PyObject*   o3;
  if (!result) {
    result = obj;
  } else if (result == Py_None) {
    Py_DECREF(result);
    result = obj;
  } else {
    if (!PyTuple_Check(result)) {
      o2 = result;
      result = PyTuple_New(1);
      PyTuple_SET_ITEM(result, 0, o2);
    }
    o3 = PyTuple_New(1);
    PyTuple_SET_ITEM(o3, 0, obj);
    o2 = result;
    result = PySequence_Concat(o2, o3);
    Py_DECREF(o2);
    Py_DECREF(o3);
  }
  return result;
#endif
}

/* Unpack the argument tuple */

SWIGINTERN Py_ssize_t
SWIG_Python_UnpackTuple(PyObject *args, const char *name, Py_ssize_t min, Py_ssize_t max, PyObject **objs)
{
  if (!args) {
    if (!min && !max) {
      return 1;
    } else {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got none", 
		   name, (min == max ? "" : "at least "), (int)min);
      return 0;
    }
  }  
  if (!PyTuple_Check(args)) {
    if (min <= 1 && max >= 1) {
      Py_ssize_t i;
      objs[0] = args;
      for (i = 1; i < max; ++i) {
	objs[i] = 0;
      }
      return 2;
    }
    PyErr_SetString(PyExc_SystemError, "UnpackTuple() argument list is not a tuple");
    return 0;
  } else {
    Py_ssize_t l = PyTuple_GET_SIZE(args);
    if (l < min) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at least "), (int)min, (int)l);
      return 0;
    } else if (l > max) {
      PyErr_Format(PyExc_TypeError, "%s expected %s%d arguments, got %d", 
		   name, (min == max ? "" : "at most "), (int)max, (int)l);
      return 0;
    } else {
      Py_ssize_t i;
      for (i = 0; i < l; ++i) {
	objs[i] = PyTuple_GET_ITEM(args, i);
      }
      for (; l < max; ++l) {
	objs[l] = 0;
      }
      return i + 1;
    }    
  }
}

/* A functor is a function object with one single object argument */
#if PY_VERSION_HEX >= 0x02020000
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunctionObjArgs(functor, obj, NULL);
#else
#define SWIG_Python_CallFunctor(functor, obj)	        PyObject_CallFunction(functor, "O", obj);
#endif

/*
  Helper for static pointer initialization for both C and C++ code, for example
  static PyObject *SWIG_STATIC_POINTER(MyVar) = NewSomething(...);
*/
#ifdef __cplusplus
#define SWIG_STATIC_POINTER(var)  var
#else
#define SWIG_STATIC_POINTER(var)  var = 0; if (!var) var
#endif

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */

/* Flags for new pointer objects */
#define SWIG_POINTER_NOSHADOW       (SWIG_POINTER_OWN      << 1)
#define SWIG_POINTER_NEW            (SWIG_POINTER_NOSHADOW | SWIG_POINTER_OWN)

#define SWIG_POINTER_IMPLICIT_CONV  (SWIG_POINTER_DISOWN   << 1)

#define SWIG_BUILTIN_TP_INIT	    (SWIG_POINTER_OWN << 2)
#define SWIG_BUILTIN_INIT	    (SWIG_BUILTIN_TP_INIT | SWIG_POINTER_OWN)

#ifdef __cplusplus
extern "C" {
#endif

/*  How to access Py_None */
#if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#  ifndef SWIG_PYTHON_NO_BUILD_NONE
#    ifndef SWIG_PYTHON_BUILD_NONE
#      define SWIG_PYTHON_BUILD_NONE
#    endif
#  endif
#endif

#ifdef SWIG_PYTHON_BUILD_NONE
#  ifdef Py_None
#   undef Py_None
#   define Py_None SWIG_Py_None()
#  endif
SWIGRUNTIMEINLINE PyObject * 
_SWIG_Py_None(void)
{
  PyObject *none = Py_BuildValue((char*)"");
  Py_DECREF(none);
  return none;
}
SWIGRUNTIME PyObject * 
SWIG_Py_None(void)
{
  static PyObject *SWIG_STATIC_POINTER(none) = _SWIG_Py_None();
  return none;
}
#endif

/* The python void return value */

SWIGRUNTIMEINLINE PyObject * 
SWIG_Py_Void(void)
{
  PyObject *none = Py_None;
  Py_INCREF(none);
  return none;
}

/* SwigPyClientData */

typedef struct {
  PyObject *klass;
  PyObject *newraw;
  PyObject *newargs;
  PyObject *destroy;
  int delargs;
  int implicitconv;
  PyTypeObject *pytype;
} SwigPyClientData;

SWIGRUNTIMEINLINE int 
SWIG_Python_CheckImplicit(swig_type_info *ty)
{
  SwigPyClientData *data = (SwigPyClientData *)ty->clientdata;
  return data ? data->implicitconv : 0;
}

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_ExceptionType(swig_type_info *desc) {
  SwigPyClientData *data = desc ? (SwigPyClientData *) desc->clientdata : 0;
  PyObject *klass = data ? data->klass : 0;
  return (klass ? klass : PyExc_RuntimeError);
}


SWIGRUNTIME SwigPyClientData * 
SwigPyClientData_New(PyObject* obj)
{
  if (!obj) {
    return 0;
  } else {
    SwigPyClientData *data = (SwigPyClientData *)malloc(sizeof(SwigPyClientData));
    /* the klass element */
    data->klass = obj;
    Py_INCREF(data->klass);
    /* the newraw method and newargs arguments used to create a new raw instance */
    if (PyClass_Check(obj)) {
      data->newraw = 0;
      data->newargs = obj;
      Py_INCREF(obj);
    } else {
#if (PY_VERSION_HEX < 0x02020000)
      data->newraw = 0;
#else
      data->newraw = PyObject_GetAttrString(data->klass, (char *)"__new__");
#endif
      if (data->newraw) {
	Py_INCREF(data->newraw);
	data->newargs = PyTuple_New(1);
	PyTuple_SetItem(data->newargs, 0, obj);
      } else {
	data->newargs = obj;
      }
      Py_INCREF(data->newargs);
    }
    /* the destroy method, aka as the C++ delete method */
    data->destroy = PyObject_GetAttrString(data->klass, (char *)"__swig_destroy__");
    if (PyErr_Occurred()) {
      PyErr_Clear();
      data->destroy = 0;
    }
    if (data->destroy) {
      int flags;
      Py_INCREF(data->destroy);
      flags = PyCFunction_GET_FLAGS(data->destroy);
#ifdef METH_O
      data->delargs = !(flags & (METH_O));
#else
      data->delargs = 0;
#endif
    } else {
      data->delargs = 0;
    }
    data->implicitconv = 0;
    data->pytype = 0;
    return data;
  }
}

SWIGRUNTIME void 
SwigPyClientData_Del(SwigPyClientData *data) {
  Py_XDECREF(data->newraw);
  Py_XDECREF(data->newargs);
  Py_XDECREF(data->destroy);
}

/* =============== SwigPyObject =====================*/

typedef struct {
  PyObject_HEAD
  void *ptr;
  swig_type_info *ty;
  int own;
  PyObject *next;
#ifdef SWIGPYTHON_BUILTIN
  PyObject *dict;
#endif
} SwigPyObject;


#ifdef SWIGPYTHON_BUILTIN

SWIGRUNTIME PyObject *
SwigPyObject_get___dict__(PyObject *v, PyObject *SWIGUNUSEDPARM(args))
{
  SwigPyObject *sobj = (SwigPyObject *)v;

  if (!sobj->dict)
    sobj->dict = PyDict_New();

  Py_INCREF(sobj->dict);
  return sobj->dict;
}

#endif

SWIGRUNTIME PyObject *
SwigPyObject_long(SwigPyObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
SwigPyObject_format(const char* fmt, SwigPyObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args) {
    if (PyTuple_SetItem(args, 0, SwigPyObject_long(v)) == 0) {
      PyObject *ofmt = SWIG_Python_str_FromChar(fmt);
      if (ofmt) {
#if PY_VERSION_HEX >= 0x03000000
	res = PyUnicode_Format(ofmt,args);
#else
	res = PyString_Format(ofmt,args);
#endif
	Py_DECREF(ofmt);
      }
      Py_DECREF(args);
    }
  }
  return res;
}

SWIGRUNTIME PyObject *
SwigPyObject_oct(SwigPyObject *v)
{
  return SwigPyObject_format("%o",v);
}

SWIGRUNTIME PyObject *
SwigPyObject_hex(SwigPyObject *v)
{
  return SwigPyObject_format("%x",v);
}

SWIGRUNTIME PyObject *
#ifdef METH_NOARGS
SwigPyObject_repr(SwigPyObject *v)
#else
SwigPyObject_repr(SwigPyObject *v, PyObject *args)
#endif
{
  const char *name = SWIG_TypePrettyName(v->ty);
  PyObject *repr = SWIG_Python_str_FromFormat("<Swig Object of type '%s' at %p>", (name ? name : "unknown"), (void *)v);
  if (v->next) {
# ifdef METH_NOARGS
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next);
# else
    PyObject *nrep = SwigPyObject_repr((SwigPyObject *)v->next, args);
# endif
# if PY_VERSION_HEX >= 0x03000000
    PyObject *joined = PyUnicode_Concat(repr, nrep);
    Py_DecRef(repr);
    Py_DecRef(nrep);
    repr = joined;
# else
    PyString_ConcatAndDel(&repr,nrep);
# endif
  }
  return repr;  
}

SWIGRUNTIME int
SwigPyObject_compare(SwigPyObject *v, SwigPyObject *w)
{
  void *i = v->ptr;
  void *j = w->ptr;
  return (i < j) ? -1 : ((i > j) ? 1 : 0);
}

/* Added for Python 3.x, would it also be useful for Python 2.x? */
SWIGRUNTIME PyObject*
SwigPyObject_richcompare(SwigPyObject *v, SwigPyObject *w, int op)
{
  PyObject* res;
  if( op != Py_EQ && op != Py_NE ) {
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
  }
  res = PyBool_FromLong( (SwigPyObject_compare(v, w)==0) == (op == Py_EQ) ? 1 : 0);
  return res;  
}


SWIGRUNTIME PyTypeObject* SwigPyObject_TypeOnce(void);

#ifdef SWIGPYTHON_BUILTIN
static swig_type_info *SwigPyObject_stype = 0;
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
    SwigPyClientData *cd;
    assert(SwigPyObject_stype);
    cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
    assert(cd);
    assert(cd->pytype);
    return cd->pytype;
}
#else
SWIGRUNTIME PyTypeObject*
SwigPyObject_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyObject_TypeOnce();
  return type;
}
#endif

SWIGRUNTIMEINLINE int
SwigPyObject_Check(PyObject *op) {
#ifdef SWIGPYTHON_BUILTIN
  PyTypeObject *target_tp = SwigPyObject_type();
  if (PyType_IsSubtype(op->ob_type, target_tp))
    return 1;
  return (strcmp(op->ob_type->tp_name, "SwigPyObject") == 0);
#else
  return (Py_TYPE(op) == SwigPyObject_type())
    || (strcmp(Py_TYPE(op)->tp_name,"SwigPyObject") == 0);
#endif
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own);

SWIGRUNTIME void
SwigPyObject_dealloc(PyObject *v)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  PyObject *next = sobj->next;
  if (sobj->own == SWIG_POINTER_OWN) {
    swig_type_info *ty = sobj->ty;
    SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
    PyObject *destroy = data ? data->destroy : 0;
    if (destroy) {
      /* destroy is always a VARARGS method */
      PyObject *res;

      /* PyObject_CallFunction() has the potential to silently drop
         the active active exception.  In cases of unnamed temporary
         variable or where we just finished iterating over a generator
         StopIteration will be active right now, and this needs to
         remain true upon return from SwigPyObject_dealloc.  So save
         and restore. */
      
      PyObject *val = NULL, *type = NULL, *tb = NULL;
      PyErr_Fetch(&val, &type, &tb);

      if (data->delargs) {
        /* we need to create a temporary object to carry the destroy operation */
        PyObject *tmp = SwigPyObject_New(sobj->ptr, ty, 0);
        res = SWIG_Python_CallFunctor(destroy, tmp);
        Py_DECREF(tmp);
      } else {
        PyCFunction meth = PyCFunction_GET_FUNCTION(destroy);
        PyObject *mself = PyCFunction_GET_SELF(destroy);
        res = ((*meth)(mself, v));
      }
      if (!res)
        PyErr_WriteUnraisable(destroy);

      PyErr_Restore(val, type, tb);

      Py_XDECREF(res);
    } 
#if !defined(SWIG_PYTHON_SILENT_MEMLEAK)
    else {
      const char *name = SWIG_TypePrettyName(ty);
      printf("swig/python detected a memory leak of type '%s', no destructor found.\n", (name ? name : "unknown"));
    }
#endif
  } 
  Py_XDECREF(next);
  PyObject_DEL(v);
}

SWIGRUNTIME PyObject* 
SwigPyObject_append(PyObject* v, PyObject* next)
{
  SwigPyObject *sobj = (SwigPyObject *) v;
#ifndef METH_O
  PyObject *tmp = 0;
  if (!PyArg_ParseTuple(next,(char *)"O:append", &tmp)) return NULL;
  next = tmp;
#endif
  if (!SwigPyObject_Check(next)) {
    PyErr_SetString(PyExc_TypeError, "Attempt to append a non SwigPyObject");
    return NULL;
  }
  sobj->next = next;
  Py_INCREF(next);
  return SWIG_Py_Void();
}

SWIGRUNTIME PyObject* 
#ifdef METH_NOARGS
SwigPyObject_next(PyObject* v)
#else
SwigPyObject_next(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *) v;
  if (sobj->next) {    
    Py_INCREF(sobj->next);
    return sobj->next;
  } else {
    return SWIG_Py_Void();
  }
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_disown(PyObject *v)
#else
SwigPyObject_disown(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = 0;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
#ifdef METH_NOARGS
SwigPyObject_acquire(PyObject *v)
#else
SwigPyObject_acquire(PyObject* v, PyObject *SWIGUNUSEDPARM(args))
#endif
{
  SwigPyObject *sobj = (SwigPyObject *)v;
  sobj->own = SWIG_POINTER_OWN;
  return SWIG_Py_Void();
}

SWIGINTERN PyObject*
SwigPyObject_own(PyObject *v, PyObject *args)
{
  PyObject *val = 0;
#if (PY_VERSION_HEX < 0x02020000)
  if (!PyArg_ParseTuple(args,(char *)"|O:own",&val))
#elif (PY_VERSION_HEX < 0x02050000)
  if (!PyArg_UnpackTuple(args, (char *)"own", 0, 1, &val)) 
#else
  if (!PyArg_UnpackTuple(args, "own", 0, 1, &val)) 
#endif
    {
      return NULL;
    } 
  else
    {
      SwigPyObject *sobj = (SwigPyObject *)v;
      PyObject *obj = PyBool_FromLong(sobj->own);
      if (val) {
#ifdef METH_NOARGS
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v);
	} else {
	  SwigPyObject_disown(v);
	}
#else
	if (PyObject_IsTrue(val)) {
	  SwigPyObject_acquire(v,args);
	} else {
	  SwigPyObject_disown(v,args);
	}
#endif
      } 
      return obj;
    }
}

#ifdef METH_O
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_NOARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_NOARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS, (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_O,       (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_NOARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,    METH_NOARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#else
static PyMethodDef
swigobject_methods[] = {
  {(char *)"disown",  (PyCFunction)SwigPyObject_disown,  METH_VARARGS,  (char *)"releases ownership of the pointer"},
  {(char *)"acquire", (PyCFunction)SwigPyObject_acquire, METH_VARARGS,  (char *)"acquires ownership of the pointer"},
  {(char *)"own",     (PyCFunction)SwigPyObject_own,     METH_VARARGS,  (char *)"returns/sets ownership of the pointer"},
  {(char *)"append",  (PyCFunction)SwigPyObject_append,  METH_VARARGS,  (char *)"appends another 'this' object"},
  {(char *)"next",    (PyCFunction)SwigPyObject_next,    METH_VARARGS,  (char *)"returns the next 'this' object"},
  {(char *)"__repr__",(PyCFunction)SwigPyObject_repr,   METH_VARARGS,  (char *)"returns object representation"},
  {0, 0, 0, 0}  
};
#endif

#if PY_VERSION_HEX < 0x02020000
SWIGINTERN PyObject *
SwigPyObject_getattr(SwigPyObject *sobj,char *name)
{
  return Py_FindMethod(swigobject_methods, (PyObject *)sobj, name);
}
#endif

SWIGRUNTIME PyTypeObject*
SwigPyObject_TypeOnce(void) {
  static char swigobject_doc[] = "Swig object carries a C/C++ instance pointer";

  static PyNumberMethods SwigPyObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    /* nb_divide removed in Python 3 */
#if PY_VERSION_HEX < 0x03000000
    (binaryfunc)0, /*nb_divide*/
#endif
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
#if PY_VERSION_HEX < 0x03000000
    0,   /*nb_coerce*/
#endif
    (unaryfunc)SwigPyObject_long, /*nb_int*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_long, /*nb_long*/
#else
    0, /*nb_reserved*/
#endif
    (unaryfunc)0,                 /*nb_float*/
#if PY_VERSION_HEX < 0x03000000
    (unaryfunc)SwigPyObject_oct,  /*nb_oct*/
    (unaryfunc)SwigPyObject_hex,  /*nb_hex*/
#endif
#if PY_VERSION_HEX >= 0x03050000 /* 3.5 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_matrix_multiply */
#elif PY_VERSION_HEX >= 0x03000000 /* 3.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index, nb_inplace_divide removed */
#elif PY_VERSION_HEX >= 0x02050000 /* 2.5.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_index */
#elif PY_VERSION_HEX >= 0x02020000 /* 2.2.0 */
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */
#elif PY_VERSION_HEX >= 0x02000000 /* 2.0.0 */
    0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_or */
#endif
  };

  static PyTypeObject swigpyobject_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyObject",               /* tp_name */
      sizeof(SwigPyObject),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyObject_dealloc,     /* tp_dealloc */
      0,                                    /* tp_print */
#if PY_VERSION_HEX < 0x02020000
      (getattrfunc)SwigPyObject_getattr,    /* tp_getattr */
#else
      (getattrfunc)0,                       /* tp_getattr */
#endif
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX >= 0x03000000
      0, /* tp_reserved in 3.0.1, tp_compare in 3.0.0 but not used */
#else
      (cmpfunc)SwigPyObject_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyObject_repr,          /* tp_repr */
      &SwigPyObject_as_number,              /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      0,                                    /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigobject_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      (richcmpfunc)SwigPyObject_richcompare,/* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      swigobject_methods,                   /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpyobject_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpyobject_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpyobject_type) < 0)
      return NULL;
#endif
  }
  return &swigpyobject_type;
}

SWIGRUNTIME PyObject *
SwigPyObject_New(void *ptr, swig_type_info *ty, int own)
{
  SwigPyObject *sobj = PyObject_NEW(SwigPyObject, SwigPyObject_type());
  if (sobj) {
    sobj->ptr  = ptr;
    sobj->ty   = ty;
    sobj->own  = own;
    sobj->next = 0;
  }
  return (PyObject *)sobj;
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  swig_type_info *ty;
  size_t size;
} SwigPyPacked;

SWIGRUNTIME int
SwigPyPacked_print(SwigPyPacked *v, FILE *fp, int SWIGUNUSEDPARM(flags))
{
  char result[SWIG_BUFFER_SIZE];
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->ty->name,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
SwigPyPacked_repr(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return SWIG_Python_str_FromFormat("<Swig Packed at %s%s>", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromFormat("<Swig Packed %s>", v->ty->name);
  }  
}

SWIGRUNTIME PyObject *
SwigPyPacked_str(SwigPyPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return SWIG_Python_str_FromFormat("%s%s", result, v->ty->name);
  } else {
    return SWIG_Python_str_FromChar(v->ty->name);
  }  
}

SWIGRUNTIME int
SwigPyPacked_compare(SwigPyPacked *v, SwigPyPacked *w)
{
  size_t i = v->size;
  size_t j = w->size;
  int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
  return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
}

SWIGRUNTIME PyTypeObject* SwigPyPacked_TypeOnce(void);

SWIGRUNTIME PyTypeObject*
SwigPyPacked_type(void) {
  static PyTypeObject *SWIG_STATIC_POINTER(type) = SwigPyPacked_TypeOnce();
  return type;
}

SWIGRUNTIMEINLINE int
SwigPyPacked_Check(PyObject *op) {
  return ((op)->ob_type == SwigPyPacked_TypeOnce()) 
    || (strcmp((op)->ob_type->tp_name,"SwigPyPacked") == 0);
}

SWIGRUNTIME void
SwigPyPacked_dealloc(PyObject *v)
{
  if (SwigPyPacked_Check(v)) {
    SwigPyPacked *sobj = (SwigPyPacked *) v;
    free(sobj->pack);
  }
  PyObject_DEL(v);
}

SWIGRUNTIME PyTypeObject*
SwigPyPacked_TypeOnce(void) {
  static char swigpacked_doc[] = "Swig object carries a C/C++ instance pointer";
  static PyTypeObject swigpypacked_type;
  static int type_init = 0;
  if (!type_init) {
    const PyTypeObject tmp = {
#if PY_VERSION_HEX>=0x03000000
      PyVarObject_HEAD_INIT(NULL, 0)
#else
      PyObject_HEAD_INIT(NULL)
      0,                                    /* ob_size */
#endif
      (char *)"SwigPyPacked",               /* tp_name */
      sizeof(SwigPyPacked),                 /* tp_basicsize */
      0,                                    /* tp_itemsize */
      (destructor)SwigPyPacked_dealloc,     /* tp_dealloc */
      (printfunc)SwigPyPacked_print,        /* tp_print */
      (getattrfunc)0,                       /* tp_getattr */
      (setattrfunc)0,                       /* tp_setattr */
#if PY_VERSION_HEX>=0x03000000
      0, /* tp_reserved in 3.0.1 */
#else
      (cmpfunc)SwigPyPacked_compare,        /* tp_compare */
#endif
      (reprfunc)SwigPyPacked_repr,          /* tp_repr */
      0,                                    /* tp_as_number */
      0,                                    /* tp_as_sequence */
      0,                                    /* tp_as_mapping */
      (hashfunc)0,                          /* tp_hash */
      (ternaryfunc)0,                       /* tp_call */
      (reprfunc)SwigPyPacked_str,           /* tp_str */
      PyObject_GenericGetAttr,              /* tp_getattro */
      0,                                    /* tp_setattro */
      0,                                    /* tp_as_buffer */
      Py_TPFLAGS_DEFAULT,                   /* tp_flags */
      swigpacked_doc,                       /* tp_doc */
      0,                                    /* tp_traverse */
      0,                                    /* tp_clear */
      0,                                    /* tp_richcompare */
      0,                                    /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
      0,                                    /* tp_iter */
      0,                                    /* tp_iternext */
      0,                                    /* tp_methods */
      0,                                    /* tp_members */
      0,                                    /* tp_getset */
      0,                                    /* tp_base */
      0,                                    /* tp_dict */
      0,                                    /* tp_descr_get */
      0,                                    /* tp_descr_set */
      0,                                    /* tp_dictoffset */
      0,                                    /* tp_init */
      0,                                    /* tp_alloc */
      0,                                    /* tp_new */
      0,                                    /* tp_free */
      0,                                    /* tp_is_gc */
      0,                                    /* tp_bases */
      0,                                    /* tp_mro */
      0,                                    /* tp_cache */
      0,                                    /* tp_subclasses */
      0,                                    /* tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
      0,                                    /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
      0,                                    /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
      0,                                    /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
      0,                                    /* tp_allocs */
      0,                                    /* tp_frees */
      0,                                    /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
      0,                                    /* tp_prev */
#endif
      0                                     /* tp_next */
#endif
    };
    swigpypacked_type = tmp;
    type_init = 1;
#if PY_VERSION_HEX < 0x02020000
    swigpypacked_type.ob_type = &PyType_Type;
#else
    if (PyType_Ready(&swigpypacked_type) < 0)
      return NULL;
#endif
  }
  return &swigpypacked_type;
}

SWIGRUNTIME PyObject *
SwigPyPacked_New(void *ptr, size_t size, swig_type_info *ty)
{
  SwigPyPacked *sobj = PyObject_NEW(SwigPyPacked, SwigPyPacked_type());
  if (sobj) {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      sobj->pack = pack;
      sobj->ty   = ty;
      sobj->size = size;
    } else {
      PyObject_DEL((PyObject *) sobj);
      sobj = 0;
    }
  }
  return (PyObject *) sobj;
}

SWIGRUNTIME swig_type_info *
SwigPyPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  if (SwigPyPacked_Check(obj)) {
    SwigPyPacked *sobj = (SwigPyPacked *)obj;
    if (sobj->size != size) return 0;
    memcpy(ptr, sobj->pack, size);
    return sobj->ty;
  } else {
    return 0;
  }
}

/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIMEINLINE PyObject *
_SWIG_This(void)
{
    return SWIG_Python_str_FromChar("this");
}

static PyObject *swig_this = NULL;

SWIGRUNTIME PyObject *
SWIG_This(void)
{
  if (swig_this == NULL)
    swig_this = _SWIG_This();
  return swig_this;
}

/* #define SWIG_PYTHON_SLOW_GETSET_THIS */

/* TODO: I don't know how to implement the fast getset in Python 3 right now */
#if PY_VERSION_HEX>=0x03000000
#define SWIG_PYTHON_SLOW_GETSET_THIS 
#endif

SWIGRUNTIME SwigPyObject *
SWIG_Python_GetSwigThis(PyObject *pyobj) 
{
  PyObject *obj;

  if (SwigPyObject_Check(pyobj))
    return (SwigPyObject *) pyobj;

#ifdef SWIGPYTHON_BUILTIN
  (void)obj;
# ifdef PyWeakref_CheckProxy
  if (PyWeakref_CheckProxy(pyobj)) {
    pyobj = PyWeakref_GET_OBJECT(pyobj);
    if (pyobj && SwigPyObject_Check(pyobj))
      return (SwigPyObject*) pyobj;
  }
# endif
  return NULL;
#else

  obj = 0;

#if (!defined(SWIG_PYTHON_SLOW_GETSET_THIS) && (PY_VERSION_HEX >= 0x02030000))
  if (PyInstance_Check(pyobj)) {
    obj = _PyInstance_Lookup(pyobj, SWIG_This());      
  } else {
    PyObject **dictptr = _PyObject_GetDictPtr(pyobj);
    if (dictptr != NULL) {
      PyObject *dict = *dictptr;
      obj = dict ? PyDict_GetItem(dict, SWIG_This()) : 0;
    } else {
#ifdef PyWeakref_CheckProxy
      if (PyWeakref_CheckProxy(pyobj)) {
	PyObject *wobj = PyWeakref_GET_OBJECT(pyobj);
	return wobj ? SWIG_Python_GetSwigThis(wobj) : 0;
      }
#endif
      obj = PyObject_GetAttr(pyobj,SWIG_This());
      if (obj) {
	Py_DECREF(obj);
      } else {
	if (PyErr_Occurred()) PyErr_Clear();
	return 0;
      }
    }
  }
#else
  obj = PyObject_GetAttr(pyobj,SWIG_This());
  if (obj) {
    Py_DECREF(obj);
  } else {
    if (PyErr_Occurred()) PyErr_Clear();
    return 0;
  }
#endif
  if (obj && !SwigPyObject_Check(obj)) {
    /* a PyObject is called 'this', try to get the 'real this'
       SwigPyObject from it */ 
    return SWIG_Python_GetSwigThis(obj);
  }
  return (SwigPyObject *)obj;
#endif
}

/* Acquire a pointer value */

SWIGRUNTIME int
SWIG_Python_AcquirePtr(PyObject *obj, int own) {
  if (own == SWIG_POINTER_OWN) {
    SwigPyObject *sobj = SWIG_Python_GetSwigThis(obj);
    if (sobj) {
      int oldown = sobj->own;
      sobj->own = own;
      return oldown;
    }
  }
  return 0;
}

/* Convert a pointer value */

SWIGRUNTIME int
SWIG_Python_ConvertPtrAndOwn(PyObject *obj, void **ptr, swig_type_info *ty, int flags, int *own) {
  int res;
  SwigPyObject *sobj;
  int implicit_conv = (flags & SWIG_POINTER_IMPLICIT_CONV) != 0;

  if (!obj)
    return SWIG_ERROR;
  if (obj == Py_None && !implicit_conv) {
    if (ptr)
      *ptr = 0;
    return SWIG_OK;
  }

  res = SWIG_ERROR;

  sobj = SWIG_Python_GetSwigThis(obj);
  if (own)
    *own = 0;
  while (sobj) {
    void *vptr = sobj->ptr;
    if (ty) {
      swig_type_info *to = sobj->ty;
      if (to == ty) {
        /* no type cast needed */
        if (ptr) *ptr = vptr;
        break;
      } else {
        swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
        if (!tc) {
          sobj = (SwigPyObject *)sobj->next;
        } else {
          if (ptr) {
            int newmemory = 0;
            *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
            if (newmemory == SWIG_CAST_NEW_MEMORY) {
              assert(own); /* badly formed typemap which will lead to a memory leak - it must set and use own to delete *ptr */
              if (own)
                *own = *own | SWIG_CAST_NEW_MEMORY;
            }
          }
          break;
        }
      }
    } else {
      if (ptr) *ptr = vptr;
      break;
    }
  }
  if (sobj) {
    if (own)
      *own = *own | sobj->own;
    if (flags & SWIG_POINTER_DISOWN) {
      sobj->own = 0;
    }
    res = SWIG_OK;
  } else {
    if (implicit_conv) {
      SwigPyClientData *data = ty ? (SwigPyClientData *) ty->clientdata : 0;
      if (data && !data->implicitconv) {
        PyObject *klass = data->klass;
        if (klass) {
          PyObject *impconv;
          data->implicitconv = 1; /* avoid recursion and call 'explicit' constructors*/
          impconv = SWIG_Python_CallFunctor(klass, obj);
          data->implicitconv = 0;
          if (PyErr_Occurred()) {
            PyErr_Clear();
            impconv = 0;
          }
          if (impconv) {
            SwigPyObject *iobj = SWIG_Python_GetSwigThis(impconv);
            if (iobj) {
              void *vptr;
              res = SWIG_Python_ConvertPtrAndOwn((PyObject*)iobj, &vptr, ty, 0, 0);
              if (SWIG_IsOK(res)) {
                if (ptr) {
                  *ptr = vptr;
                  /* transfer the ownership to 'ptr' */
                  iobj->own = 0;
                  res = SWIG_AddCast(res);
                  res = SWIG_AddNewMask(res);
                } else {
                  res = SWIG_AddCast(res);		    
                }
              }
            }
            Py_DECREF(impconv);
          }
        }
      }
    }
    if (!SWIG_IsOK(res) && obj == Py_None) {
      if (ptr)
        *ptr = 0;
      if (PyErr_Occurred())
        PyErr_Clear();
      res = SWIG_OK;
    }
  }
  return res;
}

/* Convert a function ptr value */

SWIGRUNTIME int
SWIG_Python_ConvertFunctionPtr(PyObject *obj, void **ptr, swig_type_info *ty) {
  if (!PyCFunction_Check(obj)) {
    return SWIG_ConvertPtr(obj, ptr, ty, 0);
  } else {
    void *vptr = 0;
    
    /* here we get the method pointer for callbacks */
    const char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
    const char *desc = doc ? strstr(doc, "swig_ptr: ") : 0;
    if (desc)
      desc = ty ? SWIG_UnpackVoidPtr(desc + 10, &vptr, ty->name) : 0;
    if (!desc) 
      return SWIG_ERROR;
    if (ty) {
      swig_cast_info *tc = SWIG_TypeCheck(desc,ty);
      if (tc) {
        int newmemory = 0;
        *ptr = SWIG_TypeCast(tc,vptr,&newmemory);
        assert(!newmemory); /* newmemory handling not yet implemented */
      } else {
        return SWIG_ERROR;
      }
    } else {
      *ptr = vptr;
    }
    return SWIG_OK;
  }
}

/* Convert a packed value value */

SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty) {
  swig_type_info *to = SwigPyPacked_UnpackData(obj, ptr, sz);
  if (!to) return SWIG_ERROR;
  if (ty) {
    if (to != ty) {
      /* check type cast? */
      swig_cast_info *tc = SWIG_TypeCheck(to->name,ty);
      if (!tc) return SWIG_ERROR;
    }
  }
  return SWIG_OK;
}  

/* -----------------------------------------------------------------------------
 * Create a new pointer object
 * ----------------------------------------------------------------------------- */

/*
  Create a new instance object, without calling __init__, and set the
  'this' attribute.
*/

SWIGRUNTIME PyObject* 
SWIG_Python_NewShadowInstance(SwigPyClientData *data, PyObject *swig_this)
{
#if (PY_VERSION_HEX >= 0x02020000)
  PyObject *inst = 0;
  PyObject *newraw = data->newraw;
  if (newraw) {
    inst = PyObject_Call(newraw, data->newargs, NULL);
    if (inst) {
#if !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
      PyObject **dictptr = _PyObject_GetDictPtr(inst);
      if (dictptr != NULL) {
	PyObject *dict = *dictptr;
	if (dict == NULL) {
	  dict = PyDict_New();
	  *dictptr = dict;
	  PyDict_SetItem(dict, SWIG_This(), swig_this);
	}
      }
#else
      PyObject *key = SWIG_This();
      PyObject_SetAttr(inst, key, swig_this);
#endif
    }
  } else {
#if PY_VERSION_HEX >= 0x03000000
    inst = ((PyTypeObject*) data->newargs)->tp_new((PyTypeObject*) data->newargs, Py_None, Py_None);
    if (inst) {
      PyObject_SetAttr(inst, SWIG_This(), swig_this);
      Py_TYPE(inst)->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;
    }
#else
    PyObject *dict = PyDict_New();
    if (dict) {
      PyDict_SetItem(dict, SWIG_This(), swig_this);
      inst = PyInstance_NewRaw(data->newargs, dict);
      Py_DECREF(dict);
    }
#endif
  }
  return inst;
#else
#if (PY_VERSION_HEX >= 0x02010000)
  PyObject *inst = 0;
  PyObject *dict = PyDict_New();
  if (dict) {
    PyDict_SetItem(dict, SWIG_This(), swig_this);
    inst = PyInstance_NewRaw(data->newargs, dict);
    Py_DECREF(dict);
  }
  return (PyObject *) inst;
#else
  PyInstanceObject *inst = PyObject_NEW(PyInstanceObject, &PyInstance_Type);
  if (inst == NULL) {
    return NULL;
  }
  inst->in_class = (PyClassObject *)data->newargs;
  Py_INCREF(inst->in_class);
  inst->in_dict = PyDict_New();
  if (inst->in_dict == NULL) {
    Py_DECREF(inst);
    return NULL;
  }
#ifdef Py_TPFLAGS_HAVE_WEAKREFS
  inst->in_weakreflist = NULL;
#endif
#ifdef Py_TPFLAGS_GC
  PyObject_GC_Init(inst);
#endif
  PyDict_SetItem(inst->in_dict, SWIG_This(), swig_this);
  return (PyObject *) inst;
#endif
#endif
}

SWIGRUNTIME void
SWIG_Python_SetSwigThis(PyObject *inst, PyObject *swig_this)
{
 PyObject *dict;
#if (PY_VERSION_HEX >= 0x02020000) && !defined(SWIG_PYTHON_SLOW_GETSET_THIS)
 PyObject **dictptr = _PyObject_GetDictPtr(inst);
 if (dictptr != NULL) {
   dict = *dictptr;
   if (dict == NULL) {
     dict = PyDict_New();
     *dictptr = dict;
   }
   PyDict_SetItem(dict, SWIG_This(), swig_this);
   return;
 }
#endif
 dict = PyObject_GetAttrString(inst, (char*)"__dict__");
 PyDict_SetItem(dict, SWIG_This(), swig_this);
 Py_DECREF(dict);
} 


SWIGINTERN PyObject *
SWIG_Python_InitShadowInstance(PyObject *args) {
  PyObject *obj[2];
  if (!SWIG_Python_UnpackTuple(args, "swiginit", 2, 2, obj)) {
    return NULL;
  } else {
    SwigPyObject *sthis = SWIG_Python_GetSwigThis(obj[0]);
    if (sthis) {
      SwigPyObject_append((PyObject*) sthis, obj[1]);
    } else {
      SWIG_Python_SetSwigThis(obj[0], obj[1]);
    }
    return SWIG_Py_Void();
  }
}

/* Create a new pointer object */

SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(PyObject *self, void *ptr, swig_type_info *type, int flags) {
  SwigPyClientData *clientdata;
  PyObject * robj;
  int own;

  if (!ptr)
    return SWIG_Py_Void();

  clientdata = type ? (SwigPyClientData *)(type->clientdata) : 0;
  own = (flags & SWIG_POINTER_OWN) ? SWIG_POINTER_OWN : 0;
  if (clientdata && clientdata->pytype) {
    SwigPyObject *newobj;
    if (flags & SWIG_BUILTIN_TP_INIT) {
      newobj = (SwigPyObject*) self;
      if (newobj->ptr) {
        PyObject *next_self = clientdata->pytype->tp_alloc(clientdata->pytype, 0);
        while (newobj->next)
	  newobj = (SwigPyObject *) newobj->next;
        newobj->next = next_self;
        newobj = (SwigPyObject *)next_self;
#ifdef SWIGPYTHON_BUILTIN
        newobj->dict = 0;
#endif
      }
    } else {
      newobj = PyObject_New(SwigPyObject, clientdata->pytype);
#ifdef SWIGPYTHON_BUILTIN
      newobj->dict = 0;
#endif
    }
    if (newobj) {
      newobj->ptr = ptr;
      newobj->ty = type;
      newobj->own = own;
      newobj->next = 0;
      return (PyObject*) newobj;
    }
    return SWIG_Py_Void();
  }

  assert(!(flags & SWIG_BUILTIN_TP_INIT));

  robj = SwigPyObject_New(ptr, type, own);
  if (robj && clientdata && !(flags & SWIG_POINTER_NOSHADOW)) {
    PyObject *inst = SWIG_Python_NewShadowInstance(clientdata, robj);
    Py_DECREF(robj);
    robj = inst;
  }
  return robj;
}

/* Create a new packed object */

SWIGRUNTIMEINLINE PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  return ptr ? SwigPyPacked_New((void *) ptr, sz, type) : SWIG_Py_Void();
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
# ifdef SWIGPY_USE_CAPSULE
    type_pointer = PyCapsule_Import(SWIGPY_CAPSULE_NAME, 0);
# else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
# endif
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
#endif
  }
  return (swig_module_info *) type_pointer;
}

#if PY_MAJOR_VERSION < 2
/* PyModule_AddObject function was introduced in Python 2.0.  The following function
   is copied out of Python/modsupport.c in python version 2.3.4 */
SWIGINTERN int
PyModule_AddObject(PyObject *m, char *name, PyObject *o)
{
  PyObject *dict;
  if (!PyModule_Check(m)) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs module as first arg");
    return SWIG_ERROR;
  }
  if (!o) {
    PyErr_SetString(PyExc_TypeError, "PyModule_AddObject() needs non-NULL value");
    return SWIG_ERROR;
  }
  
  dict = PyModule_GetDict(m);
  if (dict == NULL) {
    /* Internal error -- modules must have a dict! */
    PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
		 PyModule_GetName(m));
    return SWIG_ERROR;
  }
  if (PyDict_SetItemString(dict, name, o))
    return SWIG_ERROR;
  Py_DECREF(o);
  return SWIG_OK;
}
#endif

SWIGRUNTIME void
#ifdef SWIGPY_USE_CAPSULE
SWIG_Python_DestroyModule(PyObject *obj)
#else
SWIG_Python_DestroyModule(void *vptr)
#endif
{
#ifdef SWIGPY_USE_CAPSULE
  swig_module_info *swig_module = (swig_module_info *) PyCapsule_GetPointer(obj, SWIGPY_CAPSULE_NAME);
#else
  swig_module_info *swig_module = (swig_module_info *) vptr;
#endif
  swig_type_info **types = swig_module->types;
  size_t i;
  for (i =0; i < swig_module->size; ++i) {
    swig_type_info *ty = types[i];
    if (ty->owndata) {
      SwigPyClientData *data = (SwigPyClientData *) ty->clientdata;
      if (data) SwigPyClientData_Del(data);
    }
  }
  Py_DECREF(SWIG_This());
  swig_this = NULL;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
#if PY_VERSION_HEX >= 0x03000000
 /* Add a dummy module object into sys.modules */
  PyObject *module = PyImport_AddModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION);
#else
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} }; /* Sentinel */
  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION, swig_empty_runtime_method_table);
#endif
#ifdef SWIGPY_USE_CAPSULE
  PyObject *pointer = PyCapsule_New((void *) swig_module, SWIGPY_CAPSULE_NAME, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer_capsule" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#else
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, SWIG_Python_DestroyModule);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  } else {
    Py_XDECREF(pointer);
  }
#endif
}

/* The python cached type query */
SWIGRUNTIME PyObject *
SWIG_Python_TypeCache(void) {
  static PyObject *SWIG_STATIC_POINTER(cache) = PyDict_New();
  return cache;
}

SWIGRUNTIME swig_type_info *
SWIG_Python_TypeQuery(const char *type)
{
  PyObject *cache = SWIG_Python_TypeCache();
  PyObject *key = SWIG_Python_str_FromChar(type); 
  PyObject *obj = PyDict_GetItem(cache, key);
  swig_type_info *descriptor;
  if (obj) {
#ifdef SWIGPY_USE_CAPSULE
    descriptor = (swig_type_info *) PyCapsule_GetPointer(obj, NULL);
#else
    descriptor = (swig_type_info *) PyCObject_AsVoidPtr(obj);
#endif
  } else {
    swig_module_info *swig_module = SWIG_GetModule(0);
    descriptor = SWIG_TypeQueryModule(swig_module, swig_module, type);
    if (descriptor) {
#ifdef SWIGPY_USE_CAPSULE
      obj = PyCapsule_New((void*) descriptor, NULL, NULL);
#else
      obj = PyCObject_FromVoidPtr(descriptor, NULL);
#endif
      PyDict_SetItem(cache, key, obj);
      Py_DECREF(obj);
    }
  }
  Py_DECREF(key);
  return descriptor;
}

/* 
   For backward compatibility only
*/
#define SWIG_POINTER_EXCEPTION  0
#define SWIG_arg_fail(arg)      SWIG_Python_ArgFail(arg)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{  
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      char *tmp;
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, tmp = SWIG_Python_str_AsChar(old_str));
      } else {
	PyErr_Format(type, "%s %s", tmp = SWIG_Python_str_AsChar(old_str), mesg);
      }
      SWIG_Python_str_DelForPy3(tmp);
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}
  
SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}

SWIGRUNTIMEINLINE const char *
SwigPyObject_GetDesc(PyObject *self)
{
  SwigPyObject *v = (SwigPyObject *)self;
  swig_type_info *ty = v ? v->ty : 0;
  return ty ? ty->str : "";
}

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && SwigPyObject_Check(obj)) {
      const char *otype = (const char *) SwigPyObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'SwigPyObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? SWIG_Python_str_AsChar(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
          SWIG_Python_str_DelForPy3(cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}


/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int SWIGUNUSEDPARM(argnum), int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
#if SWIG_POINTER_EXCEPTION
    if (flags) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
#endif
  }
  return result;
}

#ifdef SWIGPYTHON_BUILTIN
SWIGRUNTIME int
SWIG_Python_NonDynamicSetAttr(PyObject *obj, PyObject *name, PyObject *value) {
  PyTypeObject *tp = obj->ob_type;
  PyObject *descr;
  PyObject *encoded_name;
  descrsetfunc f;
  int res = -1;

# ifdef Py_USING_UNICODE
  if (PyString_Check(name)) {
    name = PyUnicode_Decode(PyString_AsString(name), PyString_Size(name), NULL, NULL);
    if (!name)
      return -1;
  } else if (!PyUnicode_Check(name))
# else
  if (!PyString_Check(name))
# endif
  {
    PyErr_Format(PyExc_TypeError, "attribute name must be string, not '%.200s'", name->ob_type->tp_name);
    return -1;
  } else {
    Py_INCREF(name);
  }

  if (!tp->tp_dict) {
    if (PyType_Ready(tp) < 0)
      goto done;
  }

  descr = _PyType_Lookup(tp, name);
  f = NULL;
  if (descr != NULL)
    f = descr->ob_type->tp_descr_set;
  if (!f) {
    if (PyString_Check(name)) {
      encoded_name = name;
      Py_INCREF(name);
    } else {
      encoded_name = PyUnicode_AsUTF8String(name);
    }
    PyErr_Format(PyExc_AttributeError, "'%.100s' object has no attribute '%.200s'", tp->tp_name, PyString_AsString(encoded_name));
    Py_DECREF(encoded_name);
  } else {
    res = f(descr, obj, value);
  }
  
  done:
  Py_DECREF(name);
  return res;
}
#endif


#ifdef __cplusplus
}
#endif



#define SWIG_exception_fail(code, msg) do { SWIG_Error(code, msg); SWIG_fail; } while(0) 

#define SWIG_contract_assert(expr, msg) if (!(expr)) { SWIG_Error(SWIG_RuntimeError, msg); SWIG_fail; } else 



  #define SWIG_exception(code, msg) do { SWIG_Error(code, msg); SWIG_fail;; } while(0) 

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Python proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DIRECTOR_PYTHON_HEADER_
#define SWIG_DIRECTOR_PYTHON_HEADER_

#include <string>
#include <iostream>
#include <exception>
#include <vector>
#include <map>


/*
  Use -DSWIG_PYTHON_DIRECTOR_NO_VTABLE if you don't want to generate a 'virtual
  table', and avoid multiple GetAttr calls to retrieve the python
  methods.
*/

#ifndef SWIG_PYTHON_DIRECTOR_NO_VTABLE
#ifndef SWIG_PYTHON_DIRECTOR_VTABLE
#define SWIG_PYTHON_DIRECTOR_VTABLE
#endif
#endif



/*
  Use -DSWIG_DIRECTOR_NO_UEH if you prefer to avoid the use of the
  Undefined Exception Handler provided by swig.
*/
#ifndef SWIG_DIRECTOR_NO_UEH
#ifndef SWIG_DIRECTOR_UEH
#define SWIG_DIRECTOR_UEH
#endif
#endif


/*
  Use -DSWIG_DIRECTOR_NORTTI if you prefer to avoid the use of the
  native C++ RTTI and dynamic_cast<>. But be aware that directors
  could stop working when using this option.
*/
#ifdef SWIG_DIRECTOR_NORTTI
/*
   When we don't use the native C++ RTTI, we implement a minimal one
   only for Directors.
*/
# ifndef SWIG_DIRECTOR_RTDIR
# define SWIG_DIRECTOR_RTDIR

namespace Swig {
  class Director;
  SWIGINTERN std::map<void *, Director *>& get_rtdir_map() {
    static std::map<void *, Director *> rtdir_map;
    return rtdir_map;
  }

  SWIGINTERNINLINE void set_rtdir(void *vptr, Director *rtdir) {
    get_rtdir_map()[vptr] = rtdir;
  }

  SWIGINTERNINLINE Director *get_rtdir(void *vptr) {
    std::map<void *, Director *>::const_iterator pos = get_rtdir_map().find(vptr);
    Director *rtdir = (pos != get_rtdir_map().end()) ? pos->second : 0;
    return rtdir;
  }
}
# endif /* SWIG_DIRECTOR_RTDIR */

# define SWIG_DIRECTOR_CAST(ARG) Swig::get_rtdir(static_cast<void *>(ARG))
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2) Swig::set_rtdir(static_cast<void *>(ARG1), ARG2)

#else

# define SWIG_DIRECTOR_CAST(ARG) dynamic_cast<Swig::Director *>(ARG)
# define SWIG_DIRECTOR_RGTR(ARG1, ARG2)

#endif /* SWIG_DIRECTOR_NORTTI */

extern "C" {
  struct swig_type_info;
}

namespace Swig {

  /* memory handler */
  struct GCItem {
    virtual ~GCItem() {}

    virtual int get_own() const {
      return 0;
    }
  };

  struct GCItem_var {
    GCItem_var(GCItem *item = 0) : _item(item) {
    }

    GCItem_var& operator=(GCItem *item) {
      GCItem *tmp = _item;
      _item = item;
      delete tmp;
      return *this;
    }

    ~GCItem_var() {
      delete _item;
    }

    GCItem * operator->() const {
      return _item;
    }

  private:
    GCItem *_item;
  };

  struct GCItem_Object : GCItem {
    GCItem_Object(int own) : _own(own) {
    }

    virtual ~GCItem_Object() {
    }

    int get_own() const {
      return _own;
    }

  private:
    int _own;
  };

  template <typename Type>
  struct GCItem_T : GCItem {
    GCItem_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCItem_T() {
      delete _ptr;
    }

  private:
    Type *_ptr;
  };

  template <typename Type>
  struct GCArray_T : GCItem {
    GCArray_T(Type *ptr) : _ptr(ptr) {
    }

    virtual ~GCArray_T() {
      delete[] _ptr;
    }

  private:
    Type *_ptr;
  };

  /* base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;
  public:
    DirectorException(PyObject *error, const char *hdr ="", const char *msg ="") : swig_msg(hdr) {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      if (msg[0]) {
        swig_msg += " ";
        swig_msg += msg;
      }
      if (!PyErr_Occurred()) {
        PyErr_SetString(error, what());
      }
      SWIG_PYTHON_THREAD_END_BLOCK;
    }

    virtual ~DirectorException() throw() {
    }

    /* Deprecated, use what() instead */
    const char *getMessage() const {
      return what();
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorException(error, msg);
    }

    static void raise(const char *msg) {
      raise(PyExc_RuntimeError, msg);
    }
  };

  /* unknown exception handler  */
  class UnknownExceptionHandler {
#ifdef SWIG_DIRECTOR_UEH
    static void handler() {
      try {
        throw;
      } catch (DirectorException& e) {
        std::cerr << "SWIG Director exception caught:" << std::endl
                  << e.what() << std::endl;
      } catch (std::exception& e) {
        std::cerr << "std::exception caught: "<< e.what() << std::endl;
      } catch (...) {
        std::cerr << "Unknown exception caught." << std::endl;
      }

      std::cerr << std::endl
                << "Python interpreter traceback:" << std::endl;
      PyErr_Print();
      std::cerr << std::endl;

      std::cerr << "This exception was caught by the SWIG unexpected exception handler." << std::endl
                << "Try using %feature(\"director:except\") to avoid reaching this point." << std::endl
                << std::endl
                << "Exception is being re-thrown, program will likely abort/terminate." << std::endl;
      throw;
    }

  public:

    std::unexpected_handler old;
    UnknownExceptionHandler(std::unexpected_handler nh = handler) {
      old = std::set_unexpected(nh);
    }

    ~UnknownExceptionHandler() {
      std::set_unexpected(old);
    }
#endif
  };

  /* type mismatch in the return value from a python method call */
  class DirectorTypeMismatchException : public DirectorException {
  public:
    DirectorTypeMismatchException(PyObject *error, const char *msg="")
      : DirectorException(error, "SWIG director type mismatch", msg) {
    }

    DirectorTypeMismatchException(const char *msg="")
      : DirectorException(PyExc_TypeError, "SWIG director type mismatch", msg) {
    }

    static void raise(PyObject *error, const char *msg) {
      throw DirectorTypeMismatchException(error, msg);
    }

    static void raise(const char *msg) {
      throw DirectorTypeMismatchException(msg);
    }
  };

  /* any python exception that occurs during a director method call */
  class DirectorMethodException : public DirectorException {
  public:
    DirectorMethodException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director method error.", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorMethodException(msg);
    }
  };

  /* attempt to call a pure virtual method via a director method */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg = "")
      : DirectorException(PyExc_RuntimeError, "SWIG director pure virtual method called", msg) {
    }

    static void raise(const char *msg) {
      throw DirectorPureVirtualException(msg);
    }
  };


#if defined(SWIG_PYTHON_THREADS)
/*  __THREAD__ is the old macro to activate some thread support */
# if !defined(__THREAD__)
#   define __THREAD__ 1
# endif
#endif

#ifdef __THREAD__
# include "pythread.h"
  class Guard {
    PyThread_type_lock &mutex_;

  public:
    Guard(PyThread_type_lock & mutex) : mutex_(mutex) {
      PyThread_acquire_lock(mutex_, WAIT_LOCK);
    }

    ~Guard() {
      PyThread_release_lock(mutex_);
    }
  };
# define SWIG_GUARD(mutex) Guard _guard(mutex)
#else
# define SWIG_GUARD(mutex)
#endif

  /* director base class */
  class Director {
  private:
    /* pointer to the wrapped python object */
    PyObject *swig_self;
    /* flag indicating whether the object is owned by python or c++ */
    mutable bool swig_disown_flag;

    /* decrement the reference count of the wrapped python object */
    void swig_decref() const {
      if (swig_disown_flag) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_DECREF(swig_self);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }

  public:
    /* wrap a python object. */
    Director(PyObject *self) : swig_self(self), swig_disown_flag(false) {
    }

    /* discard our reference at destruction */
    virtual ~Director() {
      swig_decref();
    }

    /* return a pointer to the wrapped python object */
    PyObject *swig_get_self() const {
      return swig_self;
    }

    /* acquire ownership of the wrapped python object (the sense of "disown" is from python) */
    void swig_disown() const {
      if (!swig_disown_flag) {
        swig_disown_flag=true;
        swig_incref();
      }
    }

    /* increase the reference count of the wrapped python object */
    void swig_incref() const {
      if (swig_disown_flag) {
        Py_INCREF(swig_self);
      }
    }

    /* methods to implement pseudo protected director members */
    virtual bool swig_get_inner(const char * /* swig_protected_method_name */) const {
      return true;
    }

    virtual void swig_set_inner(const char * /* swig_protected_method_name */, bool /* swig_val */) const {
    }

  /* ownership management */
  private:
    typedef std::map<void *, GCItem_var> swig_ownership_map;
    mutable swig_ownership_map swig_owner;
#ifdef __THREAD__
    static PyThread_type_lock swig_mutex_own;
#endif

  public:
    template <typename Type>
    void swig_acquire_ownership_array(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCArray_T<Type>(vptr);
      }
    }

    template <typename Type>
    void swig_acquire_ownership(Type *vptr) const {
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_T<Type>(vptr);
      }
    }

    void swig_acquire_ownership_obj(void *vptr, int own) const {
      if (vptr && own) {
        SWIG_GUARD(swig_mutex_own);
        swig_owner[vptr] = new GCItem_Object(own);
      }
    }

    int swig_release_ownership(void *vptr) const {
      int own = 0;
      if (vptr) {
        SWIG_GUARD(swig_mutex_own);
        swig_ownership_map::iterator iter = swig_owner.find(vptr);
        if (iter != swig_owner.end()) {
          own = iter->second->get_own();
          swig_owner.erase(iter);
        }
      }
      return own;
    }

    template <typename Type>
    static PyObject *swig_pyobj_disown(PyObject *pyobj, PyObject *SWIGUNUSEDPARM(args)) {
      SwigPyObject *sobj = (SwigPyObject *)pyobj;
      sobj->own = 0;
      Director *d = SWIG_DIRECTOR_CAST(reinterpret_cast<Type *>(sobj->ptr));
      if (d)
        d->swig_disown();
      return PyWeakref_NewProxy(pyobj, NULL);
    }
  };

#ifdef __THREAD__
  PyThread_type_lock Director::swig_mutex_own = PyThread_allocate_lock();
#endif
}

#endif

/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_CostClassIndex swig_types[0]
#define SWIGTYPE_p_DimensionIndex swig_types[1]
#define SWIGTYPE_p_DisjunctionIndex swig_types[2]
#define SWIGTYPE_p_PickupToDeliveryLimitFunction swig_types[3]
#define SWIGTYPE_p_RoutingDimensionIndex swig_types[4]
#define SWIGTYPE_p_RoutingDisjunctionIndex swig_types[5]
#define SWIGTYPE_p_TransitCallback1 swig_types[6]
#define SWIGTYPE_p_TransitCallback2 swig_types[7]
#define SWIGTYPE_p_VehicleClassIndex swig_types[8]
#define SWIGTYPE_p_absl__Duration swig_types[9]
#define SWIGTYPE_p_absl__SpanT_int64_t_const_t swig_types[10]
#define SWIGTYPE_p_absl__SpanT_int_const_t swig_types[11]
#define SWIGTYPE_p_absl__flat_hash_setT_int_t swig_types[12]
#define SWIGTYPE_p_bool swig_types[13]
#define SWIGTYPE_p_char swig_types[14]
#define SWIGTYPE_p_double swig_types[15]
#define SWIGTYPE_p_int swig_types[16]
#define SWIGTYPE_p_long swig_types[17]
#define SWIGTYPE_p_operations_research__Assignment swig_types[18]
#define SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__IntVar_operations_research__IntVarElement_t swig_types[19]
#define SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__IntervalVar_operations_research__IntervalVarElement_t swig_types[20]
#define SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__SequenceVar_operations_research__SequenceVarElement_t swig_types[21]
#define SWIGTYPE_p_operations_research__AssignmentElement swig_types[22]
#define SWIGTYPE_p_operations_research__BaseIntExpr swig_types[23]
#define SWIGTYPE_p_operations_research__BaseLns swig_types[24]
#define SWIGTYPE_p_operations_research__BaseObject swig_types[25]
#define SWIGTYPE_p_operations_research__BooleanVar swig_types[26]
#define SWIGTYPE_p_operations_research__BoundCost swig_types[27]
#define SWIGTYPE_p_operations_research__CastConstraint swig_types[28]
#define SWIGTYPE_p_operations_research__ChangeValue swig_types[29]
#define SWIGTYPE_p_operations_research__Constraint swig_types[30]
#define SWIGTYPE_p_operations_research__Decision swig_types[31]
#define SWIGTYPE_p_operations_research__DecisionBuilder swig_types[32]
#define SWIGTYPE_p_operations_research__DecisionVisitor swig_types[33]
#define SWIGTYPE_p_operations_research__DefaultPhaseParameters swig_types[34]
#define SWIGTYPE_p_operations_research__Demon swig_types[35]
#define SWIGTYPE_p_operations_research__DisjunctiveConstraint swig_types[36]
#define SWIGTYPE_p_operations_research__FirstSolutionStrategy swig_types[37]
#define SWIGTYPE_p_operations_research__GlobalDimensionCumulOptimizer swig_types[38]
#define SWIGTYPE_p_operations_research__GlobalVehicleBreaksConstraint swig_types[39]
#define SWIGTYPE_p_operations_research__ImprovementSearchLimit swig_types[40]
#define SWIGTYPE_p_operations_research__IntExpr swig_types[41]
#define SWIGTYPE_p_operations_research__IntTupleSet swig_types[42]
#define SWIGTYPE_p_operations_research__IntVar swig_types[43]
#define SWIGTYPE_p_operations_research__IntVarElement swig_types[44]
#define SWIGTYPE_p_operations_research__IntVarIterator swig_types[45]
#define SWIGTYPE_p_operations_research__IntVarLocalSearchFilter swig_types[46]
#define SWIGTYPE_p_operations_research__IntVarLocalSearchOperator swig_types[47]
#define SWIGTYPE_p_operations_research__IntervalVar swig_types[48]
#define SWIGTYPE_p_operations_research__IntervalVarElement swig_types[49]
#define SWIGTYPE_p_operations_research__LocalDimensionCumulOptimizer swig_types[50]
#define SWIGTYPE_p_operations_research__LocalSearchFilter swig_types[51]
#define SWIGTYPE_p_operations_research__LocalSearchFilterManager swig_types[52]
#define SWIGTYPE_p_operations_research__LocalSearchMetaheuristic swig_types[53]
#define SWIGTYPE_p_operations_research__LocalSearchMonitor swig_types[54]
#define SWIGTYPE_p_operations_research__LocalSearchOperator swig_types[55]
#define SWIGTYPE_p_operations_research__LocalSearchPhaseParameters swig_types[56]
#define SWIGTYPE_p_operations_research__ModelVisitor swig_types[57]
#define SWIGTYPE_p_operations_research__NumericalRevT_long_t swig_types[58]
#define SWIGTYPE_p_operations_research__ObjectiveMonitor swig_types[59]
#define SWIGTYPE_p_operations_research__OptimizeVar swig_types[60]
#define SWIGTYPE_p_operations_research__Pack swig_types[61]
#define SWIGTYPE_p_operations_research__PathOperator swig_types[62]
#define SWIGTYPE_p_operations_research__PathsMetadata swig_types[63]
#define SWIGTYPE_p_operations_research__PropagationBaseObject swig_types[64]
#define SWIGTYPE_p_operations_research__PropagationMonitor swig_types[65]
#define SWIGTYPE_p_operations_research__RegularLimit swig_types[66]
#define SWIGTYPE_p_operations_research__RevT_bool_t swig_types[67]
#define SWIGTYPE_p_operations_research__RevT_long_t swig_types[68]
#define SWIGTYPE_p_operations_research__RoutingDimension swig_types[69]
#define SWIGTYPE_p_operations_research__RoutingIndexManager swig_types[70]
#define SWIGTYPE_p_operations_research__RoutingModel swig_types[71]
#define SWIGTYPE_p_operations_research__RoutingModelVisitor swig_types[72]
#define SWIGTYPE_p_operations_research__RoutingModel__NodeNeighborsByCostClass swig_types[73]
#define SWIGTYPE_p_operations_research__RoutingModel__ResourceGroup swig_types[74]
#define SWIGTYPE_p_operations_research__RoutingModel__VehicleTypeContainer swig_types[75]
#define SWIGTYPE_p_operations_research__SearchLimit swig_types[76]
#define SWIGTYPE_p_operations_research__SearchLog swig_types[77]
#define SWIGTYPE_p_operations_research__SearchMonitor swig_types[78]
#define SWIGTYPE_p_operations_research__SequenceVar swig_types[79]
#define SWIGTYPE_p_operations_research__SequenceVarElement swig_types[80]
#define SWIGTYPE_p_operations_research__SimpleBoundCosts swig_types[81]
#define SWIGTYPE_p_operations_research__SolutionCollector swig_types[82]
#define SWIGTYPE_p_operations_research__SolutionPool swig_types[83]
#define SWIGTYPE_p_operations_research__Solver swig_types[84]
#define SWIGTYPE_p_operations_research__Solver__SearchLogParameters swig_types[85]
#define SWIGTYPE_p_operations_research__SymmetryBreaker swig_types[86]
#define SWIGTYPE_p_operations_research__TypeIncompatibilityChecker swig_types[87]
#define SWIGTYPE_p_operations_research__TypeRegulationsChecker swig_types[88]
#define SWIGTYPE_p_operations_research__TypeRegulationsConstraint swig_types[89]
#define SWIGTYPE_p_operations_research__TypeRequirementChecker swig_types[90]
#define SWIGTYPE_p_short swig_types[91]
#define SWIGTYPE_p_signed_char swig_types[92]
#define SWIGTYPE_p_std__atomicT_bool_t swig_types[93]
#define SWIGTYPE_p_std__functionT_long_flongF_t swig_types[94]
#define SWIGTYPE_p_std__functionT_long_flong_longF_t swig_types[95]
#define SWIGTYPE_p_std__functionT_std__vectorT_int_t_const_Rfint_intF_t swig_types[96]
#define SWIGTYPE_p_std__ostream swig_types[97]
#define SWIGTYPE_p_std__vectorT_absl__flat_hash_setT_int_t_t swig_types[98]
#define SWIGTYPE_p_std__vectorT_operations_research__Assignment_const_p_t swig_types[99]
#define SWIGTYPE_p_std__vectorT_operations_research__LocalSearchFilterManager__FilterEvent_t swig_types[100]
#define SWIGTYPE_p_std__vectorT_operations_research__RoutingDimension_const_p_t swig_types[101]
#define SWIGTYPE_p_std__vectorT_operations_research__RoutingDimension_p_t swig_types[102]
#define SWIGTYPE_p_std__vectorT_operations_research__RoutingModel__PickupDeliveryPosition_t swig_types[103]
#define SWIGTYPE_p_std__vectorT_std__pairT_long_long_t_t swig_types[104]
#define SWIGTYPE_p_std__vectorT_std__unique_ptrT_operations_research__RoutingModel__ResourceGroup_t_t swig_types[105]
#define SWIGTYPE_p_std__vectorT_std__vectorT_long_t_t swig_types[106]
#define SWIGTYPE_p_unsigned_char swig_types[107]
#define SWIGTYPE_p_unsigned_int swig_types[108]
#define SWIGTYPE_p_unsigned_long swig_types[109]
#define SWIGTYPE_p_unsigned_short swig_types[110]
static swig_type_info *swig_types[112];
static swig_module_info swig_module = {swig_types, 111, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#if (PY_VERSION_HEX <= 0x02000000)
# if !defined(SWIG_PYTHON_CLASSIC)
#  error "This python version requires swig to be run with the '-classic' option"
# endif
#endif

/*-----------------------------------------------
              @(target):= _pywrapcp.so
  ------------------------------------------------*/
#if PY_VERSION_HEX >= 0x03000000
#  define SWIG_init    PyInit__pywrapcp

#else
#  define SWIG_init    init_pywrapcp

#endif
#define SWIG_name    "_pywrapcp"

#define SWIGVERSION 0x030012 
#define SWIG_VERSION SWIGVERSION


#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a)) 
#define SWIG_as_voidptrptr(a) ((void)SWIG_as_voidptr(*a),reinterpret_cast< void** >(a)) 


#include <stdexcept>


namespace swig {
  class SwigPtr_PyObject {
  protected:
    PyObject *_obj;

  public:
    SwigPtr_PyObject() :_obj(0)
    {
    }

    SwigPtr_PyObject(const SwigPtr_PyObject& item) : _obj(item._obj)
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(_obj);      
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    SwigPtr_PyObject(PyObject *obj, bool initial_ref = true) :_obj(obj)
    {
      if (initial_ref) {
        SWIG_PYTHON_THREAD_BEGIN_BLOCK;
        Py_XINCREF(_obj);
        SWIG_PYTHON_THREAD_END_BLOCK;
      }
    }
    
    SwigPtr_PyObject & operator=(const SwigPtr_PyObject& item) 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XINCREF(item._obj);
      Py_XDECREF(_obj);
      _obj = item._obj;
      SWIG_PYTHON_THREAD_END_BLOCK;
      return *this;      
    }
    
    ~SwigPtr_PyObject() 
    {
      SWIG_PYTHON_THREAD_BEGIN_BLOCK;
      Py_XDECREF(_obj);
      SWIG_PYTHON_THREAD_END_BLOCK;
    }
    
    operator PyObject *() const
    {
      return _obj;
    }

    PyObject *operator->() const
    {
      return _obj;
    }
  };
}


namespace swig {
  struct SwigVar_PyObject : SwigPtr_PyObject {
    SwigVar_PyObject(PyObject* obj = 0) : SwigPtr_PyObject(obj, false) { }
    
    SwigVar_PyObject & operator = (PyObject* obj)
    {
      Py_XDECREF(_obj);
      _obj = obj;
      return *this;      
    }
  };
}


#include <cstdint>
#include <string>
#include <vector>


#include <stdint.h>		// Use the C99 official header


#define SWIGWORDSIZE64
#ifndef LONG_MAX
#include <limits.h>
#endif
#if (__WORDSIZE == 32) || (LONG_MAX == INT_MAX)
# error "SWIG wrapped code invalid in 32 bit architecture, regenerate code using -DSWIGWORDSIZE32"
#endif


#include <string>


#include "ortools/base/python-swig.h"


template<>
PyObject* PyObjFrom<int64_t>(const int64_t& c) {
  return PyLong_FromLongLong(c);
}


#include <functional>

// A copyable, ref-counted python pointer.
// TODO(user): Make it movable-only when we support generalized lambda
// capture.
class SharedPyPtr {
 public:
  explicit SharedPyPtr(PyObject* obj) : obj_(obj) { Py_INCREF(obj_); }
  SharedPyPtr(const SharedPyPtr& other) : obj_(other.obj_) { Py_INCREF(obj_); }

  ~SharedPyPtr() { Py_DECREF(obj_); }

  PyObject* get() const { return obj_; }

 private:
  // We do not follow the rule of three as we only want to copy construct.
  SharedPyPtr& operator=(const SharedPyPtr&);

  PyObject* const obj_;
};

template <typename ReturnT>
static ReturnT HandleResult(PyObject* pyresult) {
  // This zero-initializes builtin types.
  ReturnT result = ReturnT();
  if (!pyresult) {
    if (!PyErr_Occurred()) {
      PyErr_SetString(PyExc_RuntimeError,
                      "SWIG std::function invocation failed.");
    }
    return result;
  } else {
    if (!PyObjAs<ReturnT>(pyresult, &result)) {
      if (!PyErr_Occurred()) {
        PyErr_SetString(PyExc_RuntimeError,
                        "SWIG std::function invocation failed.");
      }
    }
    Py_DECREF(pyresult);
  }
  return result;
}

template <>
void HandleResult<void>(PyObject * pyresult) {
  if (!pyresult) {
    if (!PyErr_Occurred()) {
      PyErr_SetString(PyExc_RuntimeError,
                      "SWIG std::function invocation failed.");
    }
  } else {
    Py_DECREF(pyresult);
  }
}

template <typename ReturnT, typename... Args>
static ReturnT InvokePythonCallableReturning(PyObject* pyfunc,
                                             const char* format, Args... args) {
  // The const_cast is safe (it's here only because the python API is not
  // const-correct).
  return HandleResult<ReturnT>(
      PyObject_CallFunction(pyfunc, const_cast<char*>(format), args...));
}

template <typename ReturnT>
static ReturnT InvokePythonCallableReturning(PyObject* pyfunc) {
  return HandleResult<ReturnT>(PyObject_CallFunctionObjArgs(pyfunc, nullptr));
}



#include <string>
#include "ortools/constraint_solver/constraint_solver.h"
#include "ortools/constraint_solver/constraint_solveri.h"
using std::string;



#include <setjmp.h>  // For FailureProtect. See below.

// Used in the PROTECT_FROM_FAILURE macro. See below.
struct FailureProtect {
  jmp_buf exception_buffer;
  void JumpBack() { longjmp(exception_buffer, 1); }
};

// This #includes constraint_solver.h, and inlines some C++ helpers.
#include "ortools/constraint_solver/assignment.pb.h"
#include "ortools/constraint_solver/search_limit.pb.h"
#include "ortools/constraint_solver/solver_parameters.pb.h"


template<>
bool PyObjAs(PyObject *py_obj, operations_research::Constraint** b) {
  return SWIG_ConvertPtr(py_obj, reinterpret_cast<void**>(b),
                         SWIGTYPE_p_operations_research__Constraint,
                         SWIG_POINTER_EXCEPTION) >= 0;
}


template<>
bool PyObjAs(PyObject *py_obj, operations_research::Decision** b) {
  return SWIG_ConvertPtr(py_obj, reinterpret_cast<void**>(b),
                         SWIGTYPE_p_operations_research__Decision,
                         SWIG_POINTER_EXCEPTION) >= 0;
}


template<>
bool PyObjAs(PyObject *py_obj, operations_research::DecisionBuilder** b) {
  return SWIG_ConvertPtr(py_obj, reinterpret_cast<void**>(b),
                         SWIGTYPE_p_operations_research__DecisionBuilder,
                         SWIG_POINTER_EXCEPTION) >= 0;
}


template<>
bool PyObjAs(PyObject *py_obj, operations_research::Demon** b) {
  return SWIG_ConvertPtr(py_obj, reinterpret_cast<void**>(b),
                         SWIGTYPE_p_operations_research__Demon,
                         SWIG_POINTER_EXCEPTION) >= 0;
}


template<>
bool PyObjAs(PyObject *py_obj, operations_research::SearchMonitor** b) {
  return SWIG_ConvertPtr(py_obj, reinterpret_cast<void**>(b),
                         SWIGTYPE_p_operations_research__SearchMonitor,
                         SWIG_POINTER_EXCEPTION) >= 0;
}


template<>
bool PyObjAs(PyObject *py_obj, operations_research::IntervalVar** b) {
  return SWIG_ConvertPtr(py_obj, reinterpret_cast<void**>(b),
                         SWIGTYPE_p_operations_research__IntervalVar,
                         SWIG_POINTER_EXCEPTION) >= 0;
}


template<>
bool PyObjAs(PyObject *py_obj, operations_research::SequenceVar** b) {
  return SWIG_ConvertPtr(py_obj, reinterpret_cast<void**>(b),
                         SWIGTYPE_p_operations_research__SequenceVar,
                         SWIG_POINTER_EXCEPTION) >= 0;
}


template<>
bool PyObjAs(PyObject *py_obj, operations_research::LocalSearchOperator** b) {
  return SWIG_ConvertPtr(py_obj, reinterpret_cast<void**>(b),
                         SWIGTYPE_p_operations_research__LocalSearchOperator,
                         SWIG_POINTER_EXCEPTION) >= 0;
}


template<>
bool PyObjAs(PyObject *py_obj, operations_research::LocalSearchFilter** b) {
  return SWIG_ConvertPtr(py_obj, reinterpret_cast<void**>(b),
                         SWIGTYPE_p_operations_research__LocalSearchFilter,
                         SWIG_POINTER_EXCEPTION) >= 0;
}


template<>
bool PyObjAs(PyObject *py_obj, operations_research::LocalSearchFilterManager** b) {
  return SWIG_ConvertPtr(py_obj, reinterpret_cast<void**>(b),
                         SWIGTYPE_p_operations_research__LocalSearchFilterManager,
                         SWIG_POINTER_EXCEPTION) >= 0;
}


template<>
bool PyObjAs(PyObject *py_obj, operations_research::IntExpr** var) {
  // First, try to interpret the python object as an IntExpr.
  operations_research::IntExpr* t;
  if (SWIG_ConvertPtr(py_obj, reinterpret_cast<void**>(&t),
                      SWIGTYPE_p_operations_research__IntExpr,
                      SWIG_POINTER_EXCEPTION) >= 0) {
    if (t == nullptr) return false;
    *var = t;
    return true;
  }
  // Then, try to interpret it as a Constraint.
  operations_research::Constraint* c;
  if (SWIG_ConvertPtr(py_obj, reinterpret_cast<void**>(&c),
                      SWIGTYPE_p_operations_research__Constraint,
                      SWIG_POINTER_EXCEPTION) >= 0) {
    if (c == nullptr || c->Var() == nullptr) return false;
    *var = c->Var();
    return true;
  }
  // Give up.
  return false;
}
template<>
bool PyObjAs(PyObject *py_obj, operations_research::IntVar** var) {
  operations_research::IntExpr* tmp_expr;
  if (!PyObjAs(py_obj, &tmp_expr)) return false;
  *var = tmp_expr->Var();
  return true;
}


PyObject* FromObjectIntVar(operations_research::IntVar* obj) {
  return SWIG_NewPointerObj(SWIG_as_voidptr(obj),
                            SWIGTYPE_p_operations_research__IntVar,
                            0 | 0);
}

bool CanConvertToIntVar(PyObject *py_obj) {
  operations_research::IntVar* tmp;
  return PyObjAs(py_obj, &tmp);
}


PyObject* FromObjectIntExpr(operations_research::IntExpr* obj) {
  return SWIG_NewPointerObj(SWIG_as_voidptr(obj),
                            SWIGTYPE_p_operations_research__IntExpr,
                            0 | 0);
}

bool CanConvertToIntExpr(PyObject *py_obj) {
  operations_research::IntExpr* tmp;
  return PyObjAs(py_obj, &tmp);
}


PyObject* FromObjectConstraint(operations_research::Constraint* obj) {
  return SWIG_NewPointerObj(SWIG_as_voidptr(obj),
                            SWIGTYPE_p_operations_research__Constraint,
                            0 | 0);
}

bool CanConvertToConstraint(PyObject *py_obj) {
  operations_research::Constraint* tmp;
  return PyObjAs(py_obj, &tmp);
}


PyObject* FromObjectDecision(operations_research::Decision* obj) {
  return SWIG_NewPointerObj(SWIG_as_voidptr(obj),
                            SWIGTYPE_p_operations_research__Decision,
                            0 | 0);
}

bool CanConvertToDecision(PyObject *py_obj) {
  operations_research::Decision* tmp;
  return PyObjAs(py_obj, &tmp);
}


PyObject* FromObjectDecisionBuilder(operations_research::DecisionBuilder* obj) {
  return SWIG_NewPointerObj(SWIG_as_voidptr(obj),
                            SWIGTYPE_p_operations_research__DecisionBuilder,
                            0 | 0);
}

bool CanConvertToDecisionBuilder(PyObject *py_obj) {
  operations_research::DecisionBuilder* tmp;
  return PyObjAs(py_obj, &tmp);
}


PyObject* FromObjectDemon(operations_research::Demon* obj) {
  return SWIG_NewPointerObj(SWIG_as_voidptr(obj),
                            SWIGTYPE_p_operations_research__Demon,
                            0 | 0);
}

bool CanConvertToDemon(PyObject *py_obj) {
  operations_research::Demon* tmp;
  return PyObjAs(py_obj, &tmp);
}


PyObject* FromObjectSearchMonitor(operations_research::SearchMonitor* obj) {
  return SWIG_NewPointerObj(SWIG_as_voidptr(obj),
                            SWIGTYPE_p_operations_research__SearchMonitor,
                            0 | 0);
}

bool CanConvertToSearchMonitor(PyObject *py_obj) {
  operations_research::SearchMonitor* tmp;
  return PyObjAs(py_obj, &tmp);
}


PyObject* FromObjectIntervalVar(operations_research::IntervalVar* obj) {
  return SWIG_NewPointerObj(SWIG_as_voidptr(obj),
                            SWIGTYPE_p_operations_research__IntervalVar,
                            0 | 0);
}

bool CanConvertToIntervalVar(PyObject *py_obj) {
  operations_research::IntervalVar* tmp;
  return PyObjAs(py_obj, &tmp);
}


PyObject* FromObjectSequenceVar(operations_research::SequenceVar* obj) {
  return SWIG_NewPointerObj(SWIG_as_voidptr(obj),
                            SWIGTYPE_p_operations_research__SequenceVar,
                            0 | 0);
}

bool CanConvertToSequenceVar(PyObject *py_obj) {
  operations_research::SequenceVar* tmp;
  return PyObjAs(py_obj, &tmp);
}


PyObject* FromObjectLocalSearchOperator(operations_research::LocalSearchOperator* obj) {
  return SWIG_NewPointerObj(SWIG_as_voidptr(obj),
                            SWIGTYPE_p_operations_research__LocalSearchOperator,
                            0 | 0);
}

bool CanConvertToLocalSearchOperator(PyObject *py_obj) {
  operations_research::LocalSearchOperator* tmp;
  return PyObjAs(py_obj, &tmp);
}


PyObject* FromObjectLocalSearchFilter(operations_research::LocalSearchFilter* obj) {
  return SWIG_NewPointerObj(SWIG_as_voidptr(obj),
                            SWIGTYPE_p_operations_research__LocalSearchFilter,
                            0 | 0);
}

bool CanConvertToLocalSearchFilter(PyObject *py_obj) {
  operations_research::LocalSearchFilter* tmp;
  return PyObjAs(py_obj, &tmp);
}


PyObject* FromObjectLocalSearchFilterManager(operations_research::LocalSearchFilterManager* obj) {
  return SWIG_NewPointerObj(SWIG_as_voidptr(obj),
                            SWIGTYPE_p_operations_research__LocalSearchFilterManager,
                            0 | 0);
}

bool CanConvertToLocalSearchFilterManager(PyObject *py_obj) {
  operations_research::LocalSearchFilterManager* tmp;
  return PyObjAs(py_obj, &tmp);
}


static void PyFunctionSolverToVoid(PyObject* pyfunc,
                                   operations_research::Solver* s) {
  // () needed to force creation of one-element tuple
  PyObject* const pysolver =
      SWIG_NewPointerObj(s, SWIGTYPE_p_operations_research__Solver,
                         SWIG_POINTER_EXCEPTION);
  PyObject* const pyresult = PyEval_CallFunction(pyfunc, "(O)", pysolver);
  if (!pyresult) {
    PyErr_SetString(PyExc_RuntimeError,
                    "std::function<void(Solver*)> invocation failed.");
  } else {
    Py_DECREF(pyresult);
  }
}


SWIGINTERNINLINE PyObject*
  SWIG_From_int  (int value)
{
  return PyInt_FromLong((long) value);
}


#include <limits.h>
#if !defined(SWIG_NO_LLONG_MAX)
# if !defined(LLONG_MAX) && defined(__GNUC__) && defined (__LONG_LONG_MAX__)
#   define LLONG_MAX __LONG_LONG_MAX__
#   define LLONG_MIN (-LLONG_MAX - 1LL)
#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)
# endif
#endif


SWIGINTERN int
SWIG_AsVal_double (PyObject *obj, double *val)
{
  int res = SWIG_TypeError;
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AsDouble(obj);
    return SWIG_OK;
#if PY_VERSION_HEX < 0x03000000
  } else if (PyInt_Check(obj)) {
    if (val) *val = (double) PyInt_AsLong(obj);
    return SWIG_OK;
#endif
  } else if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    double d = PyFloat_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = d;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      long v = PyLong_AsLong(obj);
      if (!PyErr_Occurred()) {
	if (val) *val = v;
	return SWIG_AddCast(SWIG_AddCast(SWIG_OK));
      } else {
	PyErr_Clear();
      }
    }
  }
#endif
  return res;
}


#include <float.h>


#include <math.h>


SWIGINTERNINLINE int
SWIG_CanCastAsInteger(double *d, double min, double max) {
  double x = *d;
  if ((min <= x && x <= max)) {
   double fx = floor(x);
   double cx = ceil(x);
   double rd =  ((x - fx) < 0.5) ? fx : cx; /* simple rint */
   if ((errno == EDOM) || (errno == ERANGE)) {
     errno = 0;
   } else {
     double summ, reps, diff;
     if (rd < x) {
       diff = x - rd;
     } else if (rd > x) {
       diff = rd - x;
     } else {
       return 1;
     }
     summ = rd + x;
     reps = diff/summ;
     if (reps < 8*DBL_EPSILON) {
       *d = rd;
       return 1;
     }
   }
  }
  return 0;
}


SWIGINTERN int
SWIG_AsVal_long (PyObject *obj, long* val)
{
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AsLong(obj);
    return SWIG_OK;
  } else
#endif
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_OK;
    } else {
      PyErr_Clear();
      return SWIG_OverflowError;
    }
  }
#ifdef SWIG_PYTHON_CAST_MODE
  {
    int dispatch = 0;
    long v = PyInt_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return SWIG_AddCast(SWIG_OK);
    } else {
      PyErr_Clear();
    }
    if (!dispatch) {
      double d;
      int res = SWIG_AddCast(SWIG_AsVal_double (obj,&d));
      if (SWIG_IsOK(res) && SWIG_CanCastAsInteger(&d, LONG_MIN, LONG_MAX)) {
	if (val) *val = (long)(d);
	return res;
      }
    }
  }
#endif
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsVal_int (PyObject * obj, int *val)
{
  long v;
  int res = SWIG_AsVal_long (obj, &v);
  if (SWIG_IsOK(res)) {
    if ((v < INT_MIN || v > INT_MAX)) {
      return SWIG_OverflowError;
    } else {
      if (val) *val = static_cast< int >(v);
    }
  }  
  return res;
}


SWIGINTERN int
SWIG_AsVal_bool (PyObject *obj, bool *val)
{
  int r;
  if (!PyBool_Check(obj))
    return SWIG_ERROR;
  r = PyObject_IsTrue(obj);
  if (r == -1)
    return SWIG_ERROR;
  if (val) *val = r ? true : false;
  return SWIG_OK;
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool  (bool value)
{
  return PyBool_FromLong(value ? 1 : 0);
}


SWIGINTERN swig_type_info*
SWIG_pchar_descriptor(void)
{
  static int init = 0;
  static swig_type_info* info = 0;
  if (!init) {
    info = SWIG_TypeQuery("_p_char");
    init = 1;
  }
  return info;
}


SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize, int *alloc)
{
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
  if (PyBytes_Check(obj))
#else
  if (PyUnicode_Check(obj))
#endif
#else  
  if (PyString_Check(obj))
#endif
  {
    char *cstr; Py_ssize_t len;
#if PY_VERSION_HEX>=0x03000000
#if !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    if (!alloc && cptr) {
        /* We can't allow converting without allocation, since the internal
           representation of string in Python 3 is UCS-2/UCS-4 but we require
           a UTF-8 representation.
           TODO(bhy) More detailed explanation */
        return SWIG_RuntimeError;
    }
    obj = PyUnicode_AsUTF8String(obj);
    if(alloc) *alloc = SWIG_NEWOBJ;
#endif
    PyBytes_AsStringAndSize(obj, &cstr, &len);
#else
    PyString_AsStringAndSize(obj, &cstr, &len);
#endif
    if (cptr) {
      if (alloc) {
	/* 
	   In python the user should not be able to modify the inner
	   string representation. To warranty that, if you define
	   SWIG_PYTHON_SAFE_CSTRINGS, a new/copy of the python string
	   buffer is always returned.

	   The default behavior is just to return the pointer value,
	   so, be careful.
	*/ 
#if defined(SWIG_PYTHON_SAFE_CSTRINGS)
	if (*alloc != SWIG_OLDOBJ) 
#else
	if (*alloc == SWIG_NEWOBJ) 
#endif
	{
	  *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
	  *alloc = SWIG_NEWOBJ;
	} else {
	  *cptr = cstr;
	  *alloc = SWIG_OLDOBJ;
	}
      } else {
#if PY_VERSION_HEX>=0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
	*cptr = PyBytes_AsString(obj);
#else
	assert(0); /* Should never reach here with Unicode strings in Python 3 */
#endif
#else
	*cptr = SWIG_Python_str_AsChar(obj);
#endif
      }
    }
    if (psize) *psize = len + 1;
#if PY_VERSION_HEX>=0x03000000 && !defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
    Py_XDECREF(obj);
#endif
    return SWIG_OK;
  } else {
#if defined(SWIG_PYTHON_2_UNICODE)
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
#error "Cannot use both SWIG_PYTHON_2_UNICODE and SWIG_PYTHON_STRICT_BYTE_CHAR at once"
#endif
#if PY_VERSION_HEX<0x03000000
    if (PyUnicode_Check(obj)) {
      char *cstr; Py_ssize_t len;
      if (!alloc && cptr) {
        return SWIG_RuntimeError;
      }
      obj = PyUnicode_AsUTF8String(obj);
      if (PyString_AsStringAndSize(obj, &cstr, &len) != -1) {
        if (cptr) {
          if (alloc) *alloc = SWIG_NEWOBJ;
          *cptr = reinterpret_cast< char* >(memcpy(new char[len + 1], cstr, sizeof(char)*(len + 1)));
        }
        if (psize) *psize = len + 1;

        Py_XDECREF(obj);
        return SWIG_OK;
      } else {
        Py_XDECREF(obj);
      }
    }
#endif
#endif

    swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
    if (pchar_descriptor) {
      void* vptr = 0;
      if (SWIG_ConvertPtr(obj, &vptr, pchar_descriptor, 0) == SWIG_OK) {
	if (cptr) *cptr = (char *) vptr;
	if (psize) *psize = vptr ? (strlen((char *)vptr) + 1) : 0;
	if (alloc) *alloc = SWIG_OLDOBJ;
	return SWIG_OK;
      }
    }
  }
  return SWIG_TypeError;
}


SWIGINTERN int
SWIG_AsPtr_std_string (PyObject * obj, std::string **val) 
{
  char* buf = 0 ; size_t size = 0; int alloc = SWIG_OLDOBJ;
  if (SWIG_IsOK((SWIG_AsCharPtrAndSize(obj, &buf, &size, &alloc)))) {
    if (buf) {
      if (val) *val = new std::string(buf, size - 1);
      if (alloc == SWIG_NEWOBJ) delete[] buf;
      return SWIG_NEWOBJ;
    } else {
      if (val) *val = 0;
      return SWIG_OLDOBJ;
    }
  } else {
    static int init = 0;
    static swig_type_info* descriptor = 0;
    if (!init) {
      descriptor = SWIG_TypeQuery("std::string" " *");
      init = 1;
    }
    if (descriptor) {
      std::string *vptr;
      int res = SWIG_ConvertPtr(obj, (void**)&vptr, descriptor, 0);
      if (SWIG_IsOK(res) && val) *val = vptr;
      return res;
    }
  }
  return SWIG_ERROR;
}


  #define SWIG_From_long   PyInt_FromLong 


SWIGINTERNINLINE PyObject* 
SWIG_From_unsigned_SS_long  (unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) : PyInt_FromLong(static_cast< long >(value));
}


SWIGINTERNINLINE PyObject *
SWIG_FromCharPtrAndSize(const char* carray, size_t size)
{
  if (carray) {
    if (size > INT_MAX) {
      swig_type_info* pchar_descriptor = SWIG_pchar_descriptor();
      return pchar_descriptor ? 
	SWIG_InternalNewPointerObj(const_cast< char * >(carray), pchar_descriptor, 0) : SWIG_Py_Void();
    } else {
#if PY_VERSION_HEX >= 0x03000000
#if defined(SWIG_PYTHON_STRICT_BYTE_CHAR)
      return PyBytes_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#else
#if PY_VERSION_HEX >= 0x03010000
      return PyUnicode_DecodeUTF8(carray, static_cast< Py_ssize_t >(size), "surrogateescape");
#else
      return PyUnicode_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
#endif
#else
      return PyString_FromStringAndSize(carray, static_cast< Py_ssize_t >(size));
#endif
    }
  } else {
    return SWIG_Py_Void();
  }
}


SWIGINTERNINLINE PyObject *
SWIG_From_std_string  (const std::string& s)
{
  return SWIG_FromCharPtrAndSize(s.data(), s.size());
}

SWIGINTERN std::string operations_research_Solver___str__(operations_research::Solver *self){
    return self->DebugString();
  }
SWIGINTERN operations_research::Constraint *operations_research_Solver_TreeNoCycle__SWIG_0(operations_research::Solver *self,std::vector< operations_research::IntVar * > const &nexts,std::vector< operations_research::IntVar * > const &active,operations_research::Solver::IndexFilter1 callback=nullptr){
    return self->MakeNoCycle(nexts, active, callback, false);
  }
SWIGINTERN operations_research::SearchMonitor *operations_research_Solver_SearchLogWithCallback(operations_research::Solver *self,int period,std::function< std::string () > callback){
    return self->MakeSearchLog(period, callback);
  }
SWIGINTERN operations_research::IntExpr *operations_research_Solver_ElementFunction(operations_research::Solver *self,std::function< int64_t (int64_t) > values,operations_research::IntVar *const index){
    return self->MakeElement(values, index);
  }
SWIGINTERN operations_research::DecisionBuilder *operations_research_Solver_VarEvalValStrPhase(operations_research::Solver *self,std::vector< operations_research::IntVar * > const &vars,std::function< int64_t (int64_t) > var_evaluator,operations_research::Solver::IntValueStrategy val_str){
    return self->MakePhase(vars, var_evaluator, val_str);
  }
SWIGINTERN operations_research::DecisionBuilder *operations_research_Solver_VarStrValEvalPhase(operations_research::Solver *self,std::vector< operations_research::IntVar * > const &vars,operations_research::Solver::IntVarStrategy var_str,operations_research::Solver::IndexEvaluator2 val_eval){
    return self->MakePhase(vars, var_str, val_eval);
  }
SWIGINTERN operations_research::DecisionBuilder *operations_research_Solver_VarEvalValEvalPhase(operations_research::Solver *self,std::vector< operations_research::IntVar * > const &vars,std::function< int64_t (int64_t) > var_eval,operations_research::Solver::IndexEvaluator2 val_eval){
    return self->MakePhase(vars, var_eval, val_eval);
  }
SWIGINTERN operations_research::DecisionBuilder *operations_research_Solver_VarStrValEvalTieBreakPhase(operations_research::Solver *self,std::vector< operations_research::IntVar * > const &vars,operations_research::Solver::IntVarStrategy var_str,operations_research::Solver::IndexEvaluator2 val_eval,std::function< int64_t (int64_t) > tie_breaker){
    return self->MakePhase(vars, var_str, val_eval, tie_breaker);
  }
SWIGINTERN operations_research::DecisionBuilder *operations_research_Solver_VarEvalValEvalTieBreakPhase(operations_research::Solver *self,std::vector< operations_research::IntVar * > const &vars,std::function< int64_t (int64_t) > var_eval,operations_research::Solver::IndexEvaluator2 val_eval,std::function< int64_t (int64_t) > tie_breaker){
    return self->MakePhase(vars, var_eval, val_eval, tie_breaker);
  }
SWIGINTERN operations_research::DecisionBuilder *operations_research_Solver_EvalEvalStrPhase(operations_research::Solver *self,std::vector< operations_research::IntVar * > const &vars,operations_research::Solver::IndexEvaluator2 evaluator,operations_research::Solver::EvaluatorStrategy str){
    return self->MakePhase(vars, evaluator, str);
  }
SWIGINTERN operations_research::DecisionBuilder *operations_research_Solver_EvalEvalStrTieBreakPhase(operations_research::Solver *self,std::vector< operations_research::IntVar * > const &vars,operations_research::Solver::IndexEvaluator2 evaluator,operations_research::Solver::IndexEvaluator1 tie_breaker,operations_research::Solver::EvaluatorStrategy str){
    return self->MakePhase(vars, evaluator, tie_breaker, str);
  }
SWIGINTERN operations_research::SearchMonitor *operations_research_Solver_GuidedLocalSearch__SWIG_4(operations_research::Solver *self,bool maximize,operations_research::IntVar *const objective,operations_research::Solver::IndexEvaluator2 objective_function,int64_t step,std::vector< operations_research::IntVar * > const &vars,double penalty_factor){
    return self->MakeGuidedLocalSearch(maximize,
                                       objective,
                                       objective_function,
                                       step,
                                       vars,
                                       penalty_factor);
  }
SWIGINTERN operations_research::LocalSearchFilter *operations_research_Solver_SumObjectiveFilter(operations_research::Solver *self,std::vector< operations_research::IntVar * > const &vars,operations_research::Solver::IndexEvaluator2 values,operations_research::Solver::LocalSearchFilterBound filter_enum){
    return self->MakeSumObjectiveFilter(vars,
                                         values,
                                         filter_enum);
  }
SWIGINTERN std::string operations_research_BaseObject___str__(operations_research::BaseObject *self){
    return self->DebugString();
  }
SWIGINTERN std::string operations_research_BaseObject___repr__(operations_research::BaseObject *self){
    return self->DebugString();
  }
SWIGINTERN std::string operations_research_Decision___repr__(operations_research::Decision *self){
    return self->DebugString();
  }
SWIGINTERN std::string operations_research_Decision___str__(operations_research::Decision *self){
    return self->DebugString();
  }
SWIGINTERN std::string operations_research_DecisionBuilder___repr__(operations_research::DecisionBuilder *self){
    return self->DebugString();
  }
SWIGINTERN std::string operations_research_DecisionBuilder___str__(operations_research::DecisionBuilder *self){
    return self->DebugString();
  }
SWIGINTERN std::string operations_research_Constraint___repr__(operations_research::Constraint *self){
    return self->DebugString();
  }
SWIGINTERN std::string operations_research_Constraint___str__(operations_research::Constraint *self){
    return self->DebugString();
  }
SWIGINTERN operations_research::IntExpr *operations_research_Constraint___add____SWIG_0(operations_research::Constraint *self,operations_research::IntExpr *other){
    return self->solver()->MakeSum(self->Var(), other);
  }
SWIGINTERN operations_research::IntExpr *operations_research_Constraint___add____SWIG_1(operations_research::Constraint *self,operations_research::Constraint *other){
    return self->solver()->MakeSum(self->Var(), other->Var());
  }
SWIGINTERN operations_research::IntExpr *operations_research_Constraint___add____SWIG_2(operations_research::Constraint *self,int64_t v){
    return self->solver()->MakeSum(self->Var(), v);
  }
SWIGINTERN operations_research::IntExpr *operations_research_Constraint___radd__(operations_research::Constraint *self,int64_t v){
    return self->solver()->MakeSum(self->Var(), v);
  }
SWIGINTERN operations_research::IntExpr *operations_research_Constraint___sub____SWIG_0(operations_research::Constraint *self,operations_research::IntExpr *other){
    return self->solver()->MakeDifference(self->Var(), other);
  }
SWIGINTERN operations_research::IntExpr *operations_research_Constraint___sub____SWIG_1(operations_research::Constraint *self,operations_research::Constraint *other){
    return self->solver()->MakeDifference(self->Var(), other->Var());
  }
SWIGINTERN operations_research::IntExpr *operations_research_Constraint___sub____SWIG_2(operations_research::Constraint *self,int64_t v){
    return self->solver()->MakeSum(self->Var(), -v);
  }
SWIGINTERN operations_research::IntExpr *operations_research_Constraint___rsub__(operations_research::Constraint *self,int64_t v){
    return self->solver()->MakeDifference(v, self->Var());
  }
SWIGINTERN operations_research::IntExpr *operations_research_Constraint___mul____SWIG_0(operations_research::Constraint *self,operations_research::IntExpr *other){
    return self->solver()->MakeProd(self->Var(), other);
  }
SWIGINTERN operations_research::IntExpr *operations_research_Constraint___mul____SWIG_1(operations_research::Constraint *self,operations_research::Constraint *other){
    return self->solver()->MakeProd(self->Var(), other->Var());
  }
SWIGINTERN operations_research::IntExpr *operations_research_Constraint___mul____SWIG_2(operations_research::Constraint *self,int64_t v){
    return self->solver()->MakeProd(self->Var(), v);
  }
SWIGINTERN operations_research::IntExpr *operations_research_Constraint___rmul__(operations_research::Constraint *self,int64_t v){
    return self->solver()->MakeProd(self->Var(), v);
  }
SWIGINTERN operations_research::IntExpr *operations_research_Constraint___floordiv__(operations_research::Constraint *self,int64_t v){
    return self->solver()->MakeDiv(self->Var(), v);
  }
SWIGINTERN operations_research::IntExpr *operations_research_Constraint___neg__(operations_research::Constraint *self){
    return self->solver()->MakeOpposite(self->Var());
  }
SWIGINTERN operations_research::IntExpr *operations_research_Constraint___abs__(operations_research::Constraint *self){
    return self->solver()->MakeAbs(self->Var());
  }
SWIGINTERN operations_research::IntExpr *operations_research_Constraint_Square(operations_research::Constraint *self){
    return self->solver()->MakeSquare(self->Var());
  }
SWIGINTERN operations_research::Constraint *operations_research_Constraint___eq____SWIG_0(operations_research::Constraint *self,int64_t v){
    return self->solver()->MakeEquality(self->Var(), v);
  }
SWIGINTERN operations_research::Constraint *operations_research_Constraint___ne____SWIG_0(operations_research::Constraint *self,int64_t v){
    return self->solver()->MakeNonEquality(self->Var(), v);
  }
SWIGINTERN operations_research::Constraint *operations_research_Constraint___ge____SWIG_0(operations_research::Constraint *self,int64_t v){
    return self->solver()->MakeGreaterOrEqual(self->Var(), v);
  }
SWIGINTERN operations_research::Constraint *operations_research_Constraint___gt____SWIG_0(operations_research::Constraint *self,int64_t v){
    return self->solver()->MakeGreater(self->Var(), v);
  }
SWIGINTERN operations_research::Constraint *operations_research_Constraint___le____SWIG_0(operations_research::Constraint *self,int64_t v){
    return self->solver()->MakeLessOrEqual(self->Var(), v);
  }
SWIGINTERN operations_research::Constraint *operations_research_Constraint___lt____SWIG_0(operations_research::Constraint *self,int64_t v){
    return self->solver()->MakeLess(self->Var(), v);
  }
SWIGINTERN operations_research::Constraint *operations_research_Constraint___eq____SWIG_1(operations_research::Constraint *self,operations_research::IntExpr *other){
    return self->solver()->MakeEquality(self->Var(), other->Var());
  }
SWIGINTERN operations_research::Constraint *operations_research_Constraint___ne____SWIG_1(operations_research::Constraint *self,operations_research::IntExpr *other){
    return self->solver()->MakeNonEquality(self->Var(), other->Var());
  }
SWIGINTERN operations_research::Constraint *operations_research_Constraint___ge____SWIG_1(operations_research::Constraint *self,operations_research::IntExpr *other){
    return self->solver()->MakeGreaterOrEqual(self->Var(), other->Var());
  }
SWIGINTERN operations_research::Constraint *operations_research_Constraint___gt____SWIG_1(operations_research::Constraint *self,operations_research::IntExpr *other){
    return self->solver()->MakeGreater(self->Var(), other->Var());
  }
SWIGINTERN operations_research::Constraint *operations_research_Constraint___le____SWIG_1(operations_research::Constraint *self,operations_research::IntExpr *other){
    return self->solver()->MakeLessOrEqual(self->Var(), other->Var());
  }
SWIGINTERN operations_research::Constraint *operations_research_Constraint___lt____SWIG_1(operations_research::Constraint *self,operations_research::IntExpr *other){
    return self->solver()->MakeLess(self->Var(), other->Var());
  }
SWIGINTERN operations_research::Constraint *operations_research_Constraint___eq____SWIG_2(operations_research::Constraint *self,operations_research::Constraint *other){
    return self->solver()->MakeEquality(self->Var(), other->Var());
  }
SWIGINTERN operations_research::Constraint *operations_research_Constraint___ne____SWIG_2(operations_research::Constraint *self,operations_research::Constraint *other){
    return self->solver()->MakeNonEquality(self->Var(), other->Var());
  }
SWIGINTERN operations_research::Constraint *operations_research_Constraint___ge____SWIG_2(operations_research::Constraint *self,operations_research::Constraint *other){
    return self->solver()->MakeGreaterOrEqual(self->Var(), other->Var());
  }
SWIGINTERN operations_research::Constraint *operations_research_Constraint___gt____SWIG_2(operations_research::Constraint *self,operations_research::Constraint *other){
    return self->solver()->MakeGreater(self->Var(), other->Var());
  }
SWIGINTERN operations_research::Constraint *operations_research_Constraint___le____SWIG_2(operations_research::Constraint *self,operations_research::Constraint *other){
    return self->solver()->MakeLessOrEqual(self->Var(), other->Var());
  }
SWIGINTERN operations_research::Constraint *operations_research_Constraint___lt____SWIG_2(operations_research::Constraint *self,operations_research::Constraint *other){
    return self->solver()->MakeLess(self->Var(), other->Var());
  }
SWIGINTERN operations_research::Constraint *operations_research_Constraint_MapTo(operations_research::Constraint *self,std::vector< operations_research::IntVar * > const &vars){
    return self->solver()->MakeMapDomain(self->Var(), vars);
  }
SWIGINTERN operations_research::IntExpr *operations_research_Constraint_IndexOf__SWIG_0(operations_research::Constraint *self,std::vector< int64_t > const &vars){
    return self->solver()->MakeElement(vars, self->Var());
  }
SWIGINTERN operations_research::IntExpr *operations_research_Constraint_IndexOf__SWIG_1(operations_research::Constraint *self,std::vector< operations_research::IntVar * > const &vars){
    return self->solver()->MakeElement(vars, self->Var());
  }
SWIGINTERN std::string operations_research_SearchMonitor___repr__(operations_research::SearchMonitor *self){
    return self->DebugString();
  }
SWIGINTERN std::string operations_research_SearchMonitor___str__(operations_research::SearchMonitor *self){
    return self->DebugString();
  }
SWIGINTERN std::string operations_research_IntExpr___repr__(operations_research::IntExpr *self){
    return self->DebugString();
  }
SWIGINTERN std::string operations_research_IntExpr___str__(operations_research::IntExpr *self){
    return self->DebugString();
  }
SWIGINTERN operations_research::IntExpr *operations_research_IntExpr___add____SWIG_0(operations_research::IntExpr *self,operations_research::IntExpr *other){
    return self->solver()->MakeSum(self, other);
  }
SWIGINTERN operations_research::IntExpr *operations_research_IntExpr___add____SWIG_1(operations_research::IntExpr *self,operations_research::Constraint *other){
    return self->solver()->MakeSum(self, other->Var());
  }
SWIGINTERN operations_research::IntExpr *operations_research_IntExpr___add____SWIG_2(operations_research::IntExpr *self,int64_t v){
    return self->solver()->MakeSum(self, v);
  }
SWIGINTERN operations_research::IntExpr *operations_research_IntExpr___radd__(operations_research::IntExpr *self,int64_t v){
    return self->solver()->MakeSum(self, v);
  }
SWIGINTERN operations_research::IntExpr *operations_research_IntExpr___sub____SWIG_0(operations_research::IntExpr *self,operations_research::IntExpr *other){
    return self->solver()->MakeDifference(self, other);
  }
SWIGINTERN operations_research::IntExpr *operations_research_IntExpr___sub____SWIG_1(operations_research::IntExpr *self,operations_research::Constraint *other){
    return self->solver()->MakeDifference(self, other->Var());
  }
SWIGINTERN operations_research::IntExpr *operations_research_IntExpr___sub____SWIG_2(operations_research::IntExpr *self,int64_t v){
    return self->solver()->MakeSum(self, -v);
  }
SWIGINTERN operations_research::IntExpr *operations_research_IntExpr___rsub__(operations_research::IntExpr *self,int64_t v){
    return self->solver()->MakeDifference(v, self);
  }
SWIGINTERN operations_research::IntExpr *operations_research_IntExpr___mul____SWIG_0(operations_research::IntExpr *self,operations_research::IntExpr *other){
    return self->solver()->MakeProd(self, other);
  }
SWIGINTERN operations_research::IntExpr *operations_research_IntExpr___mul____SWIG_1(operations_research::IntExpr *self,operations_research::Constraint *other){
    return self->solver()->MakeProd(self, other->Var());
  }
SWIGINTERN operations_research::IntExpr *operations_research_IntExpr___mul____SWIG_2(operations_research::IntExpr *self,int64_t v){
    return self->solver()->MakeProd(self, v);
  }
SWIGINTERN operations_research::IntExpr *operations_research_IntExpr___rmul__(operations_research::IntExpr *self,int64_t v){
    return self->solver()->MakeProd(self, v);
  }
SWIGINTERN operations_research::IntExpr *operations_research_IntExpr___floordiv____SWIG_0(operations_research::IntExpr *self,int64_t v){
    return self->solver()->MakeDiv(self, v);
  }
SWIGINTERN operations_research::IntExpr *operations_research_IntExpr___floordiv____SWIG_1(operations_research::IntExpr *self,operations_research::IntExpr *e){
    return self->solver()->MakeDiv(self, e);
  }
SWIGINTERN operations_research::IntExpr *operations_research_IntExpr___mod____SWIG_0(operations_research::IntExpr *self,int64_t v){
    return self->solver()->MakeModulo(self, v);
  }
SWIGINTERN operations_research::IntExpr *operations_research_IntExpr___mod____SWIG_1(operations_research::IntExpr *self,operations_research::IntExpr *e){
    return self->solver()->MakeModulo(self, e);
  }
SWIGINTERN operations_research::IntExpr *operations_research_IntExpr___neg__(operations_research::IntExpr *self){
    return self->solver()->MakeOpposite(self);
  }
SWIGINTERN operations_research::IntExpr *operations_research_IntExpr___abs__(operations_research::IntExpr *self){
    return self->solver()->MakeAbs(self);
  }
SWIGINTERN operations_research::IntExpr *operations_research_IntExpr_Square(operations_research::IntExpr *self){
    return self->solver()->MakeSquare(self);
  }
SWIGINTERN operations_research::Constraint *operations_research_IntExpr___eq____SWIG_0(operations_research::IntExpr *self,int64_t v){
    return self->solver()->MakeEquality(self, v);
  }
SWIGINTERN operations_research::Constraint *operations_research_IntExpr___ne____SWIG_0(operations_research::IntExpr *self,int64_t v){
    return self->solver()->MakeNonEquality(self->Var(), v);
  }
SWIGINTERN operations_research::Constraint *operations_research_IntExpr___ge____SWIG_0(operations_research::IntExpr *self,int64_t v){
    return self->solver()->MakeGreaterOrEqual(self, v);
  }
SWIGINTERN operations_research::Constraint *operations_research_IntExpr___gt____SWIG_0(operations_research::IntExpr *self,int64_t v){
    return self->solver()->MakeGreater(self, v);
  }
SWIGINTERN operations_research::Constraint *operations_research_IntExpr___le____SWIG_0(operations_research::IntExpr *self,int64_t v){
    return self->solver()->MakeLessOrEqual(self, v);
  }
SWIGINTERN operations_research::Constraint *operations_research_IntExpr___lt____SWIG_0(operations_research::IntExpr *self,int64_t v){
    return self->solver()->MakeLess(self, v);
  }
SWIGINTERN operations_research::Constraint *operations_research_IntExpr___eq____SWIG_1(operations_research::IntExpr *self,operations_research::IntExpr *other){
    return self->solver()->MakeEquality(self->Var(), other->Var());
  }
SWIGINTERN operations_research::Constraint *operations_research_IntExpr___ne____SWIG_1(operations_research::IntExpr *self,operations_research::IntExpr *other){
    return self->solver()->MakeNonEquality(self->Var(), other->Var());
  }
SWIGINTERN operations_research::Constraint *operations_research_IntExpr___ge____SWIG_1(operations_research::IntExpr *self,operations_research::IntExpr *other){
    return self->solver()->MakeGreaterOrEqual(self->Var(), other->Var());
  }
SWIGINTERN operations_research::Constraint *operations_research_IntExpr___gt____SWIG_1(operations_research::IntExpr *self,operations_research::IntExpr *other){
    return self->solver()->MakeGreater(self->Var(), other->Var());
  }
SWIGINTERN operations_research::Constraint *operations_research_IntExpr___le____SWIG_1(operations_research::IntExpr *self,operations_research::IntExpr *other){
    return self->solver()->MakeLessOrEqual(self->Var(), other->Var());
  }
SWIGINTERN operations_research::Constraint *operations_research_IntExpr___lt____SWIG_1(operations_research::IntExpr *self,operations_research::IntExpr *other){
    return self->solver()->MakeLess(self->Var(), other->Var());
  }
SWIGINTERN operations_research::Constraint *operations_research_IntExpr___eq____SWIG_2(operations_research::IntExpr *self,operations_research::Constraint *other){
    return self->solver()->MakeEquality(self->Var(), other->Var());
  }
SWIGINTERN operations_research::Constraint *operations_research_IntExpr___ne____SWIG_2(operations_research::IntExpr *self,operations_research::Constraint *other){
    return self->solver()->MakeNonEquality(self->Var(), other->Var());
  }
SWIGINTERN operations_research::Constraint *operations_research_IntExpr___ge____SWIG_2(operations_research::IntExpr *self,operations_research::Constraint *other){
    return self->solver()->MakeGreaterOrEqual(self->Var(), other->Var());
  }
SWIGINTERN operations_research::Constraint *operations_research_IntExpr___gt____SWIG_2(operations_research::IntExpr *self,operations_research::Constraint *other){
    return self->solver()->MakeGreater(self->Var(), other->Var());
  }
SWIGINTERN operations_research::Constraint *operations_research_IntExpr___le____SWIG_2(operations_research::IntExpr *self,operations_research::Constraint *other){
    return self->solver()->MakeLessOrEqual(self->Var(), other->Var());
  }
SWIGINTERN operations_research::Constraint *operations_research_IntExpr___lt____SWIG_2(operations_research::IntExpr *self,operations_research::Constraint *other){
    return self->solver()->MakeLess(self->Var(), other->Var());
  }
SWIGINTERN operations_research::Constraint *operations_research_IntExpr_MapTo(operations_research::IntExpr *self,std::vector< operations_research::IntVar * > const &vars){
    return self->solver()->MakeMapDomain(self->Var(), vars);
  }
SWIGINTERN operations_research::IntExpr *operations_research_IntExpr_IndexOf__SWIG_0(operations_research::IntExpr *self,std::vector< int64_t > const &vars){
    return self->solver()->MakeElement(vars, self->Var());
  }
SWIGINTERN operations_research::IntExpr *operations_research_IntExpr_IndexOf__SWIG_1(operations_research::IntExpr *self,std::vector< operations_research::IntVar * > const &vars){
    return self->solver()->MakeElement(vars, self->Var());
  }
SWIGINTERN operations_research::IntVar *operations_research_IntExpr_IsMember(operations_research::IntExpr *self,std::vector< int64_t > const &values){
    return self->solver()->MakeIsMemberVar(self->Var(), values);
  }
SWIGINTERN operations_research::Constraint *operations_research_IntExpr_Member(operations_research::IntExpr *self,std::vector< int64_t > const &values){
    return self->solver()->MakeMemberCt(self->Var(), values);
  }
SWIGINTERN operations_research::Constraint *operations_research_IntExpr_NotMember(operations_research::IntExpr *self,std::vector< int64_t > const &starts,std::vector< int64_t > const &ends){
    return self->solver()->MakeNotMemberCt(self, starts, ends);
  }
SWIGINTERN std::string operations_research_IntVar___repr__(operations_research::IntVar *self){
    return self->DebugString();
  }
SWIGINTERN std::string operations_research_IntVar___str__(operations_research::IntVar *self){
    return self->DebugString();
  }
SWIGINTERN operations_research::Constraint *operations_research_IntervalVar_EndsAfterEnd(operations_research::IntervalVar *self,operations_research::IntervalVar *other){
  return self->solver()->MakeIntervalVarRelation(
      self, operations_research::Solver::ENDS_AFTER_END, other);
}
SWIGINTERN operations_research::Constraint *operations_research_IntervalVar_EndsAfterEndWithDelay(operations_research::IntervalVar *self,operations_research::IntervalVar *other,int64_t delay){
  return self->solver()->MakeIntervalVarRelationWithDelay(
      self, operations_research::Solver::ENDS_AFTER_END, other, delay);
}
SWIGINTERN operations_research::Constraint *operations_research_IntervalVar_EndsAfterStart(operations_research::IntervalVar *self,operations_research::IntervalVar *other){
  return self->solver()->MakeIntervalVarRelation(
      self, operations_research::Solver::ENDS_AFTER_START, other);
}
SWIGINTERN operations_research::Constraint *operations_research_IntervalVar_EndsAfterStartWithDelay(operations_research::IntervalVar *self,operations_research::IntervalVar *other,int64_t delay){
  return self->solver()->MakeIntervalVarRelationWithDelay(
      self, operations_research::Solver::ENDS_AFTER_START, other, delay);
}
SWIGINTERN operations_research::Constraint *operations_research_IntervalVar_EndsAtEnd(operations_research::IntervalVar *self,operations_research::IntervalVar *other){
  return self->solver()->MakeIntervalVarRelation(
      self, operations_research::Solver::ENDS_AT_END, other);
}
SWIGINTERN operations_research::Constraint *operations_research_IntervalVar_EndsAtEndWithDelay(operations_research::IntervalVar *self,operations_research::IntervalVar *other,int64_t delay){
  return self->solver()->MakeIntervalVarRelationWithDelay(
      self, operations_research::Solver::ENDS_AT_END, other, delay);
}
SWIGINTERN operations_research::Constraint *operations_research_IntervalVar_EndsAtStart(operations_research::IntervalVar *self,operations_research::IntervalVar *other){
  return self->solver()->MakeIntervalVarRelation(
      self, operations_research::Solver::ENDS_AT_START, other);
}
SWIGINTERN operations_research::Constraint *operations_research_IntervalVar_EndsAtStartWithDelay(operations_research::IntervalVar *self,operations_research::IntervalVar *other,int64_t delay){
  return self->solver()->MakeIntervalVarRelationWithDelay(
      self, operations_research::Solver::ENDS_AT_START, other, delay);
}
SWIGINTERN operations_research::Constraint *operations_research_IntervalVar_StartsAfterEnd(operations_research::IntervalVar *self,operations_research::IntervalVar *other){
  return self->solver()->MakeIntervalVarRelation(
      self, operations_research::Solver::STARTS_AFTER_END, other);
}
SWIGINTERN operations_research::Constraint *operations_research_IntervalVar_StartsAfterEndWithDelay(operations_research::IntervalVar *self,operations_research::IntervalVar *other,int64_t delay){
  return self->solver()->MakeIntervalVarRelationWithDelay(
      self, operations_research::Solver::STARTS_AFTER_END, other, delay);
}
SWIGINTERN operations_research::Constraint *operations_research_IntervalVar_StartsAfterStart(operations_research::IntervalVar *self,operations_research::IntervalVar *other){
  return self->solver()->MakeIntervalVarRelation(
      self, operations_research::Solver::STARTS_AFTER_START, other);
}
SWIGINTERN operations_research::Constraint *operations_research_IntervalVar_StartsAfterStartWithDelay(operations_research::IntervalVar *self,operations_research::IntervalVar *other,int64_t delay){
  return self->solver()->MakeIntervalVarRelationWithDelay(
      self, operations_research::Solver::STARTS_AFTER_START, other, delay);
}
SWIGINTERN operations_research::Constraint *operations_research_IntervalVar_StartsAtEnd(operations_research::IntervalVar *self,operations_research::IntervalVar *other){
  return self->solver()->MakeIntervalVarRelation(
      self, operations_research::Solver::STARTS_AT_END, other);
}
SWIGINTERN operations_research::Constraint *operations_research_IntervalVar_StartsAtEndWithDelay(operations_research::IntervalVar *self,operations_research::IntervalVar *other,int64_t delay){
  return self->solver()->MakeIntervalVarRelationWithDelay(
      self, operations_research::Solver::STARTS_AT_END, other, delay);
}
SWIGINTERN operations_research::Constraint *operations_research_IntervalVar_StartsAtStart(operations_research::IntervalVar *self,operations_research::IntervalVar *other){
  return self->solver()->MakeIntervalVarRelation(
      self, operations_research::Solver::STARTS_AT_START, other);
}
SWIGINTERN operations_research::Constraint *operations_research_IntervalVar_StartsAtStartWithDelay(operations_research::IntervalVar *self,operations_research::IntervalVar *other,int64_t delay){
  return self->solver()->MakeIntervalVarRelationWithDelay(
      self, operations_research::Solver::STARTS_AT_START, other, delay);
}
SWIGINTERN operations_research::Constraint *operations_research_IntervalVar_StaysInSync(operations_research::IntervalVar *self,operations_research::IntervalVar *other){
  return self->solver()->MakeIntervalVarRelation(
      self, operations_research::Solver::STAYS_IN_SYNC, other);
}
SWIGINTERN operations_research::Constraint *operations_research_IntervalVar_StaysInSyncWithDelay(operations_research::IntervalVar *self,operations_research::IntervalVar *other,int64_t delay){
  return self->solver()->MakeIntervalVarRelationWithDelay(
      self, operations_research::Solver::STAYS_IN_SYNC, other, delay);
}
SWIGINTERN operations_research::Constraint *operations_research_IntervalVar_EndsAfter(operations_research::IntervalVar *self,int64_t date){
  return self->solver()->MakeIntervalVarRelation(
      self, operations_research::Solver::ENDS_AFTER, date);
}
SWIGINTERN operations_research::Constraint *operations_research_IntervalVar_EndsAt(operations_research::IntervalVar *self,int64_t date){
  return self->solver()->MakeIntervalVarRelation(
      self, operations_research::Solver::ENDS_AT, date);
}
SWIGINTERN operations_research::Constraint *operations_research_IntervalVar_EndsBefore(operations_research::IntervalVar *self,int64_t date){
  return self->solver()->MakeIntervalVarRelation(
      self, operations_research::Solver::ENDS_BEFORE, date);
}
SWIGINTERN operations_research::Constraint *operations_research_IntervalVar_StartsAfter(operations_research::IntervalVar *self,int64_t date){
  return self->solver()->MakeIntervalVarRelation(
      self, operations_research::Solver::STARTS_AFTER, date);
}
SWIGINTERN operations_research::Constraint *operations_research_IntervalVar_StartsAt(operations_research::IntervalVar *self,int64_t date){
  return self->solver()->MakeIntervalVarRelation(
      self, operations_research::Solver::STARTS_AT, date);
}
SWIGINTERN operations_research::Constraint *operations_research_IntervalVar_StartsBefore(operations_research::IntervalVar *self,int64_t date){
  return self->solver()->MakeIntervalVarRelation(
      self, operations_research::Solver::STARTS_BEFORE, date);
}
SWIGINTERN operations_research::Constraint *operations_research_IntervalVar_CrossesDate(operations_research::IntervalVar *self,int64_t date){
  return self->solver()->MakeIntervalVarRelation(
      self, operations_research::Solver::CROSS_DATE, date);
}
SWIGINTERN operations_research::Constraint *operations_research_IntervalVar_AvoidsDate(operations_research::IntervalVar *self,int64_t date){
  return self->solver()->MakeIntervalVarRelation(
      self, operations_research::Solver::AVOID_DATE, date);
}
SWIGINTERN std::string operations_research_IntervalVar___repr__(operations_research::IntervalVar *self){
    return self->DebugString();
  }
SWIGINTERN std::string operations_research_IntervalVar___str__(operations_research::IntervalVar *self){
    return self->DebugString();
  }
SWIGINTERN std::string operations_research_SequenceVar___repr__(operations_research::SequenceVar *self){
    return self->DebugString();
  }
SWIGINTERN std::string operations_research_SequenceVar___str__(operations_research::SequenceVar *self){
    return self->DebugString();
  }
SWIGINTERN int64_t operations_research_BaseLns___getitem__(operations_research::BaseLns *self,int index){
    return self->Value(index);
  }
SWIGINTERN int operations_research_BaseLns___len__(operations_research::BaseLns *self){
    return self->Size();
  }
SWIGINTERN int64_t operations_research_IntVarLocalSearchFilter_IndexFromVar(operations_research::IntVarLocalSearchFilter const *self,operations_research::IntVar *const var){
    int64_t index = -1;
    self->FindIndex(var, &index);
    return index;
  }

#include "ortools/constraint_solver/routing_types.h"

template<typename IndexT>
inline PyObject* PyInt_FromIndexT(const IndexT i) {
  return PyInt_FromLong(i.value());
}


template<>
bool PyObjAs(PyObject *py, operations_research::RoutingNodeIndex* i) {
  int temp;
  if (!PyObjAs(py, &temp)) return false;
  *i = operations_research::RoutingNodeIndex(temp);
  return true;
}


template<>
bool PyObjAs(PyObject *py, operations_research::RoutingCostClassIndex* i) {
  int temp;
  if (!PyObjAs(py, &temp)) return false;
  *i = operations_research::RoutingCostClassIndex(temp);
  return true;
}


template<>
bool PyObjAs(PyObject *py, operations_research::RoutingDimensionIndex* i) {
  int temp;
  if (!PyObjAs(py, &temp)) return false;
  *i = operations_research::RoutingDimensionIndex(temp);
  return true;
}


template<>
bool PyObjAs(PyObject *py, operations_research::RoutingDisjunctionIndex* i) {
  int temp;
  if (!PyObjAs(py, &temp)) return false;
  *i = operations_research::RoutingDisjunctionIndex(temp);
  return true;
}


template<>
bool PyObjAs(PyObject *py, operations_research::RoutingVehicleClassIndex* i) {
  int temp;
  if (!PyObjAs(py, &temp)) return false;
  *i = operations_research::RoutingVehicleClassIndex(temp);
  return true;
}


#include "ortools/constraint_solver/routing_index_manager.h"


#include "ortools/constraint_solver/routing_types.h"
#include "ortools/constraint_solver/routing_parameters.pb.h"
#include "ortools/constraint_solver/routing_parameters.h"
#include "ortools/constraint_solver/routing.h"
#include "ortools/util/optional_boolean.pb.h"


SWIGINTERNINLINE PyObject * 
SWIG_FromCharPtr(const char *cptr)
{ 
  return SWIG_FromCharPtrAndSize(cptr, (cptr ? strlen(cptr) : 0));
}



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "routingPYTHON_wrap.h"

SwigDirector_BaseObject::SwigDirector_BaseObject(PyObject *self): operations_research::BaseObject(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((operations_research::BaseObject *)this, this); 
}




SwigDirector_BaseObject::~SwigDirector_BaseObject() {
}

std::string SwigDirector_BaseObject::DebugString() const {
  std::string c_result;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call BaseObject.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char *const swig_method_name = "DebugString";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "DebugString", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  std::string *swig_optr = 0;
  int swig_ores = SWIG_AsPtr_std_string(result, &swig_optr);
  if (!SWIG_IsOK(swig_ores) || !swig_optr) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError((swig_optr ? swig_ores : SWIG_TypeError))), "in output value of type '""std::string""'");
  }
  c_result = *swig_optr;
  if (SWIG_IsNewObj(swig_ores)) delete swig_optr;
  return (std::string) c_result;
}


SwigDirector_PropagationBaseObject::SwigDirector_PropagationBaseObject(PyObject *self, operations_research::Solver *const s): operations_research::PropagationBaseObject(s), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((operations_research::PropagationBaseObject *)this, this); 
}




SwigDirector_PropagationBaseObject::~SwigDirector_PropagationBaseObject() {
}

std::string SwigDirector_PropagationBaseObject::DebugString() const {
  std::string c_result;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call PropagationBaseObject.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char *const swig_method_name = "DebugString";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "DebugString", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  std::string *swig_optr = 0;
  int swig_ores = SWIG_AsPtr_std_string(result, &swig_optr);
  if (!SWIG_IsOK(swig_ores) || !swig_optr) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError((swig_optr ? swig_ores : SWIG_TypeError))), "in output value of type '""std::string""'");
  }
  c_result = *swig_optr;
  if (SWIG_IsNewObj(swig_ores)) delete swig_optr;
  return (std::string) c_result;
}


std::string SwigDirector_PropagationBaseObject::name() const {
  std::string c_result;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call PropagationBaseObject.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char *const swig_method_name = "Name";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "Name", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  std::string *swig_optr = 0;
  int swig_ores = SWIG_AsPtr_std_string(result, &swig_optr);
  if (!SWIG_IsOK(swig_ores) || !swig_optr) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError((swig_optr ? swig_ores : SWIG_TypeError))), "in output value of type '""std::string""'");
  }
  c_result = *swig_optr;
  if (SWIG_IsNewObj(swig_ores)) delete swig_optr;
  return (std::string) c_result;
}


SwigDirector_Decision::SwigDirector_Decision(PyObject *self): operations_research::Decision(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((operations_research::Decision *)this, this); 
}




SwigDirector_Decision::~SwigDirector_Decision() {
}

std::string SwigDirector_Decision::DebugString() const {
  std::string c_result;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Decision.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char *const swig_method_name = "DebugString";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "DebugString", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  std::string *swig_optr = 0;
  int swig_ores = SWIG_AsPtr_std_string(result, &swig_optr);
  if (!SWIG_IsOK(swig_ores) || !swig_optr) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError((swig_optr ? swig_ores : SWIG_TypeError))), "in output value of type '""std::string""'");
  }
  c_result = *swig_optr;
  if (SWIG_IsNewObj(swig_ores)) delete swig_optr;
  return (std::string) c_result;
}


void SwigDirector_Decision::Apply(operations_research::Solver *s) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(s), SWIGTYPE_p_operations_research__Solver,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Decision.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char *const swig_method_name = "ApplyWrapper";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"ApplyWrapper", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


void SwigDirector_Decision::Refute(operations_research::Solver *s) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(s), SWIGTYPE_p_operations_research__Solver,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Decision.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 2;
  const char *const swig_method_name = "RefuteWrapper";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"RefuteWrapper", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


SwigDirector_DecisionBuilder::SwigDirector_DecisionBuilder(PyObject *self): operations_research::DecisionBuilder(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((operations_research::DecisionBuilder *)this, this); 
}




SwigDirector_DecisionBuilder::~SwigDirector_DecisionBuilder() {
}

std::string SwigDirector_DecisionBuilder::DebugString() const {
  std::string c_result;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call DecisionBuilder.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char *const swig_method_name = "DebugString";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "DebugString", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  std::string *swig_optr = 0;
  int swig_ores = SWIG_AsPtr_std_string(result, &swig_optr);
  if (!SWIG_IsOK(swig_ores) || !swig_optr) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError((swig_optr ? swig_ores : SWIG_TypeError))), "in output value of type '""std::string""'");
  }
  c_result = *swig_optr;
  if (SWIG_IsNewObj(swig_ores)) delete swig_optr;
  return (std::string) c_result;
}


operations_research::Decision *SwigDirector_DecisionBuilder::Next(operations_research::Solver *s) {
  void *swig_argp ;
  int swig_res ;
  swig_owntype own ;
  
  operations_research::Decision *c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(s), SWIGTYPE_p_operations_research__Solver,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call DecisionBuilder.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char *const swig_method_name = "NextWrapper";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"NextWrapper", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  swig_res = SWIG_ConvertPtrAndOwn(result, &swig_argp, SWIGTYPE_p_operations_research__Decision,  0  | SWIG_POINTER_DISOWN, &own);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""operations_research::Decision *""'");
  }
  c_result = reinterpret_cast< operations_research::Decision * >(swig_argp);
  swig_acquire_ownership_obj(SWIG_as_voidptr(c_result), own /* & TODO: SWIG_POINTER_OWN */);
  return (operations_research::Decision *) c_result;
}


SwigDirector_Demon::SwigDirector_Demon(PyObject *self): operations_research::Demon(), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((operations_research::Demon *)this, this); 
}




SwigDirector_Demon::~SwigDirector_Demon() {
}

std::string SwigDirector_Demon::DebugString() const {
  std::string c_result;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Demon.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char *const swig_method_name = "DebugString";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "DebugString", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  std::string *swig_optr = 0;
  int swig_ores = SWIG_AsPtr_std_string(result, &swig_optr);
  if (!SWIG_IsOK(swig_ores) || !swig_optr) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError((swig_optr ? swig_ores : SWIG_TypeError))), "in output value of type '""std::string""'");
  }
  c_result = *swig_optr;
  if (SWIG_IsNewObj(swig_ores)) delete swig_optr;
  return (std::string) c_result;
}


void SwigDirector_Demon::Run(operations_research::Solver *s) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(s), SWIGTYPE_p_operations_research__Solver,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Demon.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char *const swig_method_name = "RunWrapper";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"RunWrapper", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


operations_research::Solver::DemonPriority SwigDirector_Demon::priority() const {
  operations_research::Solver::DemonPriority c_result;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Demon.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 2;
  const char *const swig_method_name = "Priority";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "Priority", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""operations_research::Solver::DemonPriority""'");
  }
  c_result = static_cast< operations_research::Solver::DemonPriority >(swig_val);
  return (operations_research::Solver::DemonPriority) c_result;
}


SwigDirector_Constraint::SwigDirector_Constraint(PyObject *self, operations_research::Solver *const solver): operations_research::Constraint(solver), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((operations_research::Constraint *)this, this); 
}




SwigDirector_Constraint::~SwigDirector_Constraint() {
}

std::string SwigDirector_Constraint::DebugString() const {
  std::string c_result;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Constraint.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char *const swig_method_name = "DebugString";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "DebugString", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  std::string *swig_optr = 0;
  int swig_ores = SWIG_AsPtr_std_string(result, &swig_optr);
  if (!SWIG_IsOK(swig_ores) || !swig_optr) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError((swig_optr ? swig_ores : SWIG_TypeError))), "in output value of type '""std::string""'");
  }
  c_result = *swig_optr;
  if (SWIG_IsNewObj(swig_ores)) delete swig_optr;
  return (std::string) c_result;
}


std::string SwigDirector_Constraint::name() const {
  std::string c_result;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Constraint.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char *const swig_method_name = "Name";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "Name", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  std::string *swig_optr = 0;
  int swig_ores = SWIG_AsPtr_std_string(result, &swig_optr);
  if (!SWIG_IsOK(swig_ores) || !swig_optr) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError((swig_optr ? swig_ores : SWIG_TypeError))), "in output value of type '""std::string""'");
  }
  c_result = *swig_optr;
  if (SWIG_IsNewObj(swig_ores)) delete swig_optr;
  return (std::string) c_result;
}


void SwigDirector_Constraint::Post() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Constraint.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 2;
  const char *const swig_method_name = "Post";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "Post", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


void SwigDirector_Constraint::InitialPropagate() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Constraint.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 3;
  const char *const swig_method_name = "InitialPropagateWrapper";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "InitialPropagateWrapper", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


void SwigDirector_Constraint::Accept(operations_research::ModelVisitor *visitor) const {
  operations_research::Constraint::Accept(visitor);
}


operations_research::IntVar *SwigDirector_Constraint::Var() {
  void *swig_argp ;
  int swig_res ;
  swig_owntype own ;
  
  operations_research::IntVar *c_result;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call Constraint.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 4;
  const char *const swig_method_name = "Var";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "Var", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  swig_res = SWIG_ConvertPtrAndOwn(result, &swig_argp, SWIGTYPE_p_operations_research__IntVar,  0  | SWIG_POINTER_DISOWN, &own);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""operations_research::IntVar *""'");
  }
  c_result = reinterpret_cast< operations_research::IntVar * >(swig_argp);
  swig_acquire_ownership_obj(SWIG_as_voidptr(c_result), own /* & TODO: SWIG_POINTER_OWN */);
  return (operations_research::IntVar *) c_result;
}


SwigDirector_SearchMonitor::SwigDirector_SearchMonitor(PyObject *self, operations_research::Solver *const s): operations_research::SearchMonitor(s), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((operations_research::SearchMonitor *)this, this); 
}




SwigDirector_SearchMonitor::~SwigDirector_SearchMonitor() {
}

std::string SwigDirector_SearchMonitor::DebugString() const {
  std::string c_result;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call SearchMonitor.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char *const swig_method_name = "DebugString";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "DebugString", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  std::string *swig_optr = 0;
  int swig_ores = SWIG_AsPtr_std_string(result, &swig_optr);
  if (!SWIG_IsOK(swig_ores) || !swig_optr) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError((swig_optr ? swig_ores : SWIG_TypeError))), "in output value of type '""std::string""'");
  }
  c_result = *swig_optr;
  if (SWIG_IsNewObj(swig_ores)) delete swig_optr;
  return (std::string) c_result;
}


void SwigDirector_SearchMonitor::EnterSearch() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call SearchMonitor.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char *const swig_method_name = "EnterSearch";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "EnterSearch", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


void SwigDirector_SearchMonitor::RestartSearch() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call SearchMonitor.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 2;
  const char *const swig_method_name = "RestartSearch";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "RestartSearch", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


void SwigDirector_SearchMonitor::ExitSearch() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call SearchMonitor.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 3;
  const char *const swig_method_name = "ExitSearch";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "ExitSearch", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


void SwigDirector_SearchMonitor::BeginNextDecision(operations_research::DecisionBuilder *b) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(b), SWIGTYPE_p_operations_research__DecisionBuilder,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call SearchMonitor.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 4;
  const char *const swig_method_name = "BeginNextDecision";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"BeginNextDecision", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


void SwigDirector_SearchMonitor::EndNextDecision(operations_research::DecisionBuilder *b, operations_research::Decision *d) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(b), SWIGTYPE_p_operations_research__DecisionBuilder,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(d), SWIGTYPE_p_operations_research__Decision,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call SearchMonitor.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 5;
  const char *const swig_method_name = "EndNextDecision";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"EndNextDecision", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


void SwigDirector_SearchMonitor::ApplyDecision(operations_research::Decision *d) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(d), SWIGTYPE_p_operations_research__Decision,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call SearchMonitor.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 6;
  const char *const swig_method_name = "ApplyDecision";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"ApplyDecision", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


void SwigDirector_SearchMonitor::RefuteDecision(operations_research::Decision *d) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(d), SWIGTYPE_p_operations_research__Decision,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call SearchMonitor.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 7;
  const char *const swig_method_name = "RefuteDecision";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"RefuteDecision", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


void SwigDirector_SearchMonitor::AfterDecision(operations_research::Decision *d, bool apply) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(d), SWIGTYPE_p_operations_research__Decision,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_bool(static_cast< bool >(apply));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call SearchMonitor.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 8;
  const char *const swig_method_name = "AfterDecision";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"AfterDecision", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


void SwigDirector_SearchMonitor::BeginFail() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call SearchMonitor.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 9;
  const char *const swig_method_name = "BeginFail";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "BeginFail", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


void SwigDirector_SearchMonitor::EndFail() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call SearchMonitor.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 10;
  const char *const swig_method_name = "EndFail";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "EndFail", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


void SwigDirector_SearchMonitor::BeginInitialPropagation() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call SearchMonitor.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 11;
  const char *const swig_method_name = "BeginInitialPropagation";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "BeginInitialPropagation", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


void SwigDirector_SearchMonitor::EndInitialPropagation() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call SearchMonitor.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 12;
  const char *const swig_method_name = "EndInitialPropagation";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "EndInitialPropagation", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


bool SwigDirector_SearchMonitor::AcceptSolution() {
  bool c_result;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call SearchMonitor.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 13;
  const char *const swig_method_name = "AcceptSolution";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "AcceptSolution", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  bool swig_val;
  int swig_res = SWIG_AsVal_bool(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""bool""'");
  }
  c_result = static_cast< bool >(swig_val);
  return (bool) c_result;
}


bool SwigDirector_SearchMonitor::AtSolution() {
  bool c_result;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call SearchMonitor.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 14;
  const char *const swig_method_name = "AtSolution";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "AtSolution", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  bool swig_val;
  int swig_res = SWIG_AsVal_bool(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""bool""'");
  }
  c_result = static_cast< bool >(swig_val);
  return (bool) c_result;
}


void SwigDirector_SearchMonitor::NoMoreSolutions() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call SearchMonitor.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 15;
  const char *const swig_method_name = "NoMoreSolutions";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "NoMoreSolutions", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


bool SwigDirector_SearchMonitor::LocalOptimum() {
  bool c_result;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call SearchMonitor.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 16;
  const char *const swig_method_name = "LocalOptimum";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "LocalOptimum", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  bool swig_val;
  int swig_res = SWIG_AsVal_bool(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""bool""'");
  }
  c_result = static_cast< bool >(swig_val);
  return (bool) c_result;
}


bool SwigDirector_SearchMonitor::AcceptDelta(operations_research::Assignment *delta, operations_research::Assignment *deltadelta) {
  bool c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(delta), SWIGTYPE_p_operations_research__Assignment,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(deltadelta), SWIGTYPE_p_operations_research__Assignment,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call SearchMonitor.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 17;
  const char *const swig_method_name = "AcceptDelta";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"AcceptDelta", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  bool swig_val;
  int swig_res = SWIG_AsVal_bool(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""bool""'");
  }
  c_result = static_cast< bool >(swig_val);
  return (bool) c_result;
}


void SwigDirector_SearchMonitor::AcceptNeighbor() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call SearchMonitor.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 18;
  const char *const swig_method_name = "AcceptNeighbor";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "AcceptNeighbor", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


void SwigDirector_SearchMonitor::AcceptUncheckedNeighbor() {
  operations_research::SearchMonitor::AcceptUncheckedNeighbor();
}


bool SwigDirector_SearchMonitor::IsUncheckedSolutionLimitReached() {
  return operations_research::SearchMonitor::IsUncheckedSolutionLimitReached();
}


void SwigDirector_SearchMonitor::PeriodicCheck() {
  operations_research::SearchMonitor::PeriodicCheck();
}


int SwigDirector_SearchMonitor::ProgressPercent() {
  int c_result;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call SearchMonitor.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 19;
  const char *const swig_method_name = "ProgressPercent";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "ProgressPercent", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  int swig_val;
  int swig_res = SWIG_AsVal_int(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int""'");
  }
  c_result = static_cast< int >(swig_val);
  return (int) c_result;
}


void SwigDirector_SearchMonitor::Accept(operations_research::ModelVisitor *visitor) const {
  operations_research::SearchMonitor::Accept(visitor);
}


void SwigDirector_SearchMonitor::Install() {
  operations_research::SearchMonitor::Install();
}


SwigDirector_LocalSearchOperator::SwigDirector_LocalSearchOperator(PyObject *self) : Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((operations_research::LocalSearchOperator *)this, this); 
}




SwigDirector_LocalSearchOperator::~SwigDirector_LocalSearchOperator() {
}

std::string SwigDirector_LocalSearchOperator::DebugString() const {
  std::string c_result;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call LocalSearchOperator.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char *const swig_method_name = "DebugString";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "DebugString", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  std::string *swig_optr = 0;
  int swig_ores = SWIG_AsPtr_std_string(result, &swig_optr);
  if (!SWIG_IsOK(swig_ores) || !swig_optr) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError((swig_optr ? swig_ores : SWIG_TypeError))), "in output value of type '""std::string""'");
  }
  c_result = *swig_optr;
  if (SWIG_IsNewObj(swig_ores)) delete swig_optr;
  return (std::string) c_result;
}


bool SwigDirector_LocalSearchOperator::MakeNextNeighbor(operations_research::Assignment *delta, operations_research::Assignment *deltadelta) {
  bool c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(delta), SWIGTYPE_p_operations_research__Assignment,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(deltadelta), SWIGTYPE_p_operations_research__Assignment,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call LocalSearchOperator.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char *const swig_method_name = "NextNeighbor";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"NextNeighbor", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  bool swig_val;
  int swig_res = SWIG_AsVal_bool(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""bool""'");
  }
  c_result = static_cast< bool >(swig_val);
  return (bool) c_result;
}


void SwigDirector_LocalSearchOperator::Start(operations_research::Assignment const *assignment) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(assignment), SWIGTYPE_p_operations_research__Assignment,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call LocalSearchOperator.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 2;
  const char *const swig_method_name = "Start";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(O)" ,(PyObject *)obj0);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"Start", (char *)"(O)" ,(PyObject *)obj0);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


void SwigDirector_LocalSearchOperator::Reset() {
  operations_research::LocalSearchOperator::Reset();
}


bool SwigDirector_LocalSearchOperator::HasFragments() const {
  return operations_research::LocalSearchOperator::HasFragments();
}


bool SwigDirector_LocalSearchOperator::HoldsDelta() const {
  return operations_research::LocalSearchOperator::HoldsDelta();
}


SwigDirector_IntVarLocalSearchOperator::SwigDirector_IntVarLocalSearchOperator(PyObject *self, std::vector< operations_research::IntVar * > const &vars, bool keep_inverse_values): operations_research::IntVarLocalSearchOperator(vars, keep_inverse_values), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((operations_research::IntVarLocalSearchOperator *)this, this); 
}




SwigDirector_IntVarLocalSearchOperator::~SwigDirector_IntVarLocalSearchOperator() {
}

std::string SwigDirector_IntVarLocalSearchOperator::DebugString() const {
  std::string c_result;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call IntVarLocalSearchOperator.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char *const swig_method_name = "DebugString";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "DebugString", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  std::string *swig_optr = 0;
  int swig_ores = SWIG_AsPtr_std_string(result, &swig_optr);
  if (!SWIG_IsOK(swig_ores) || !swig_optr) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError((swig_optr ? swig_ores : SWIG_TypeError))), "in output value of type '""std::string""'");
  }
  c_result = *swig_optr;
  if (SWIG_IsNewObj(swig_ores)) delete swig_optr;
  return (std::string) c_result;
}


bool SwigDirector_IntVarLocalSearchOperator::MakeNextNeighbor(operations_research::Assignment *delta, operations_research::Assignment *deltadelta) {
  bool c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(delta), SWIGTYPE_p_operations_research__Assignment,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(deltadelta), SWIGTYPE_p_operations_research__Assignment,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call IntVarLocalSearchOperator.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char *const swig_method_name = "NextNeighbor";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"NextNeighbor", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  bool swig_val;
  int swig_res = SWIG_AsVal_bool(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""bool""'");
  }
  c_result = static_cast< bool >(swig_val);
  return (bool) c_result;
}


void SwigDirector_IntVarLocalSearchOperator::Reset() {
  operations_research::LocalSearchOperator::Reset();
}


bool SwigDirector_IntVarLocalSearchOperator::HasFragments() const {
  return operations_research::LocalSearchOperator::HasFragments();
}


bool SwigDirector_IntVarLocalSearchOperator::HoldsDelta() const {
  return operations_research::IntVarLocalSearchOperator::HoldsDelta();
}


bool SwigDirector_IntVarLocalSearchOperator::IsIncremental() const {
  bool c_result;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call IntVarLocalSearchOperator.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 2;
  const char *const swig_method_name = "IsIncremental";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "IsIncremental", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  bool swig_val;
  int swig_res = SWIG_AsVal_bool(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""bool""'");
  }
  c_result = static_cast< bool >(swig_val);
  return (bool) c_result;
}


bool SwigDirector_IntVarLocalSearchOperator::SkipUnchanged(int index) const {
  return operations_research::IntVarLocalSearchOperator::SkipUnchanged(index);
}


void SwigDirector_IntVarLocalSearchOperator::OnStart() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call IntVarLocalSearchOperator.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 3;
  const char *const swig_method_name = "OnStart";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "OnStart", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


bool SwigDirector_IntVarLocalSearchOperator::MakeOneNeighbor() {
  bool c_result;
  swig_set_inner("MakeOneNeighbor", true);
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call IntVarLocalSearchOperator.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 4;
  const char *const swig_method_name = "OneNeighbor";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "OneNeighbor", NULL);
#endif
  swig_set_inner("MakeOneNeighbor", false);
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  bool swig_val;
  int swig_res = SWIG_AsVal_bool(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""bool""'");
  }
  c_result = static_cast< bool >(swig_val);
  return (bool) c_result;
}


SwigDirector_BaseLns::SwigDirector_BaseLns(PyObject *self, std::vector< operations_research::IntVar * > const &vars): operations_research::BaseLns(vars), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((operations_research::BaseLns *)this, this); 
}




SwigDirector_BaseLns::~SwigDirector_BaseLns() {
}

std::string SwigDirector_BaseLns::DebugString() const {
  std::string c_result;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call BaseLns.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char *const swig_method_name = "DebugString";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "DebugString", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  std::string *swig_optr = 0;
  int swig_ores = SWIG_AsPtr_std_string(result, &swig_optr);
  if (!SWIG_IsOK(swig_ores) || !swig_optr) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError((swig_optr ? swig_ores : SWIG_TypeError))), "in output value of type '""std::string""'");
  }
  c_result = *swig_optr;
  if (SWIG_IsNewObj(swig_ores)) delete swig_optr;
  return (std::string) c_result;
}


bool SwigDirector_BaseLns::MakeNextNeighbor(operations_research::Assignment *delta, operations_research::Assignment *deltadelta) {
  bool c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(delta), SWIGTYPE_p_operations_research__Assignment,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(deltadelta), SWIGTYPE_p_operations_research__Assignment,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call BaseLns.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char *const swig_method_name = "NextNeighbor";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"NextNeighbor", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  bool swig_val;
  int swig_res = SWIG_AsVal_bool(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""bool""'");
  }
  c_result = static_cast< bool >(swig_val);
  return (bool) c_result;
}


void SwigDirector_BaseLns::Reset() {
  operations_research::LocalSearchOperator::Reset();
}


bool SwigDirector_BaseLns::HasFragments() const {
  return operations_research::BaseLns::HasFragments();
}


bool SwigDirector_BaseLns::HoldsDelta() const {
  return operations_research::IntVarLocalSearchOperator::HoldsDelta();
}


bool SwigDirector_BaseLns::IsIncremental() const {
  bool c_result;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call BaseLns.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 2;
  const char *const swig_method_name = "IsIncremental";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "IsIncremental", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  bool swig_val;
  int swig_res = SWIG_AsVal_bool(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""bool""'");
  }
  c_result = static_cast< bool >(swig_val);
  return (bool) c_result;
}


void SwigDirector_BaseLns::InitFragments() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call BaseLns.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 3;
  const char *const swig_method_name = "InitFragments";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "InitFragments", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


bool SwigDirector_BaseLns::NextFragment() {
  bool c_result;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call BaseLns.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 4;
  const char *const swig_method_name = "NextFragment";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "NextFragment", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  bool swig_val;
  int swig_res = SWIG_AsVal_bool(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""bool""'");
  }
  c_result = static_cast< bool >(swig_val);
  return (bool) c_result;
}


SwigDirector_ChangeValue::SwigDirector_ChangeValue(PyObject *self, std::vector< operations_research::IntVar * > const &vars): operations_research::ChangeValue(vars), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((operations_research::ChangeValue *)this, this); 
}




SwigDirector_ChangeValue::~SwigDirector_ChangeValue() {
}

std::string SwigDirector_ChangeValue::DebugString() const {
  std::string c_result;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ChangeValue.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char *const swig_method_name = "DebugString";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "DebugString", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  std::string *swig_optr = 0;
  int swig_ores = SWIG_AsPtr_std_string(result, &swig_optr);
  if (!SWIG_IsOK(swig_ores) || !swig_optr) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError((swig_optr ? swig_ores : SWIG_TypeError))), "in output value of type '""std::string""'");
  }
  c_result = *swig_optr;
  if (SWIG_IsNewObj(swig_ores)) delete swig_optr;
  return (std::string) c_result;
}


bool SwigDirector_ChangeValue::MakeNextNeighbor(operations_research::Assignment *delta, operations_research::Assignment *deltadelta) {
  bool c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(delta), SWIGTYPE_p_operations_research__Assignment,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(deltadelta), SWIGTYPE_p_operations_research__Assignment,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ChangeValue.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char *const swig_method_name = "NextNeighbor";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"NextNeighbor", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  bool swig_val;
  int swig_res = SWIG_AsVal_bool(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""bool""'");
  }
  c_result = static_cast< bool >(swig_val);
  return (bool) c_result;
}


void SwigDirector_ChangeValue::Reset() {
  operations_research::LocalSearchOperator::Reset();
}


bool SwigDirector_ChangeValue::HasFragments() const {
  return operations_research::LocalSearchOperator::HasFragments();
}


bool SwigDirector_ChangeValue::HoldsDelta() const {
  return operations_research::IntVarLocalSearchOperator::HoldsDelta();
}


bool SwigDirector_ChangeValue::IsIncremental() const {
  bool c_result;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ChangeValue.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 2;
  const char *const swig_method_name = "IsIncremental";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "IsIncremental", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  bool swig_val;
  int swig_res = SWIG_AsVal_bool(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""bool""'");
  }
  c_result = static_cast< bool >(swig_val);
  return (bool) c_result;
}


bool SwigDirector_ChangeValue::SkipUnchanged(int index) const {
  return operations_research::IntVarLocalSearchOperator::SkipUnchanged(index);
}


void SwigDirector_ChangeValue::OnStart() {
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ChangeValue.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 3;
  const char *const swig_method_name = "OnStart";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "OnStart", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


bool SwigDirector_ChangeValue::MakeOneNeighbor() {
  bool c_result;
  swig_set_inner("MakeOneNeighbor", true);
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ChangeValue.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 4;
  const char *const swig_method_name = "OneNeighbor";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "OneNeighbor", NULL);
#endif
  swig_set_inner("MakeOneNeighbor", false);
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  bool swig_val;
  int swig_res = SWIG_AsVal_bool(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""bool""'");
  }
  c_result = static_cast< bool >(swig_val);
  return (bool) c_result;
}


int64_t SwigDirector_ChangeValue::ModifyValue(int64_t index, int64_t value) {
  int64_t c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_From_long(static_cast< long >(index));
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_From_long(static_cast< long >(value));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call ChangeValue.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 5;
  const char *const swig_method_name = "ModifyValue";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"ModifyValue", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  long swig_val;
  int swig_res = SWIG_AsVal_long(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""int64_t""'");
  }
  c_result = static_cast< int64_t >(swig_val);
  return (int64_t) c_result;
}


SwigDirector_IntVarLocalSearchFilter::SwigDirector_IntVarLocalSearchFilter(PyObject *self, std::vector< operations_research::IntVar * > const &vars): operations_research::IntVarLocalSearchFilter(vars), Swig::Director(self) {
  SWIG_DIRECTOR_RGTR((operations_research::IntVarLocalSearchFilter *)this, this); 
}




SwigDirector_IntVarLocalSearchFilter::~SwigDirector_IntVarLocalSearchFilter() {
}

std::string SwigDirector_IntVarLocalSearchFilter::DebugString() const {
  std::string c_result;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call IntVarLocalSearchFilter.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 0;
  const char *const swig_method_name = "DebugString";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "DebugString", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  std::string *swig_optr = 0;
  int swig_ores = SWIG_AsPtr_std_string(result, &swig_optr);
  if (!SWIG_IsOK(swig_ores) || !swig_optr) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError((swig_optr ? swig_ores : SWIG_TypeError))), "in output value of type '""std::string""'");
  }
  c_result = *swig_optr;
  if (SWIG_IsNewObj(swig_ores)) delete swig_optr;
  return (std::string) c_result;
}


void SwigDirector_IntVarLocalSearchFilter::Relax(operations_research::Assignment const *delta, operations_research::Assignment const *deltadelta) {
  operations_research::LocalSearchFilter::Relax(delta,deltadelta);
}


void SwigDirector_IntVarLocalSearchFilter::Commit(operations_research::Assignment const *delta, operations_research::Assignment const *deltadelta) {
  operations_research::LocalSearchFilter::Commit(delta,deltadelta);
}


bool SwigDirector_IntVarLocalSearchFilter::Accept(operations_research::Assignment const *delta, operations_research::Assignment const *deltadelta, int64_t objective_min, int64_t objective_max) {
  bool c_result;
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(delta), SWIGTYPE_p_operations_research__Assignment,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(deltadelta), SWIGTYPE_p_operations_research__Assignment,  0 );
  swig::SwigVar_PyObject obj2;
  obj2 = SWIG_From_long(static_cast< long >(objective_min));
  swig::SwigVar_PyObject obj3;
  obj3 = SWIG_From_long(static_cast< long >(objective_max));
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call IntVarLocalSearchFilter.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 1;
  const char *const swig_method_name = "Accept";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(OOOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"Accept", (char *)"(OOOO)" ,(PyObject *)obj0,(PyObject *)obj1,(PyObject *)obj2,(PyObject *)obj3);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  bool swig_val;
  int swig_res = SWIG_AsVal_bool(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""bool""'");
  }
  c_result = static_cast< bool >(swig_val);
  return (bool) c_result;
}


bool SwigDirector_IntVarLocalSearchFilter::IsIncremental() const {
  bool c_result;
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call IntVarLocalSearchFilter.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 2;
  const char *const swig_method_name = "IsIncremental";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, NULL, NULL);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *) "IsIncremental", NULL);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
  bool swig_val;
  int swig_res = SWIG_AsVal_bool(result, &swig_val);
  if (!SWIG_IsOK(swig_res)) {
    Swig::DirectorTypeMismatchException::raise(SWIG_ErrorType(SWIG_ArgError(swig_res)), "in output value of type '""bool""'");
  }
  c_result = static_cast< bool >(swig_val);
  return (bool) c_result;
}


void SwigDirector_IntVarLocalSearchFilter::Synchronize(operations_research::Assignment const *assignment, operations_research::Assignment const *delta) {
  swig::SwigVar_PyObject obj0;
  obj0 = SWIG_NewPointerObj(SWIG_as_voidptr(assignment), SWIGTYPE_p_operations_research__Assignment,  0 );
  swig::SwigVar_PyObject obj1;
  obj1 = SWIG_NewPointerObj(SWIG_as_voidptr(delta), SWIGTYPE_p_operations_research__Assignment,  0 );
  if (!swig_get_self()) {
    Swig::DirectorException::raise("'self' uninitialized, maybe you forgot to call IntVarLocalSearchFilter.__init__.");
  }
#if defined(SWIG_PYTHON_DIRECTOR_VTABLE)
  const size_t swig_method_index = 3;
  const char *const swig_method_name = "Synchronize";
  PyObject *method = swig_get_method(swig_method_index, swig_method_name);
  swig::SwigVar_PyObject result = PyObject_CallFunction(method, (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#else
  swig::SwigVar_PyObject result = PyObject_CallMethod(swig_get_self(), (char *)"Synchronize", (char *)"(OO)" ,(PyObject *)obj0,(PyObject *)obj1);
#endif
  if (!result) {
    PyObject *error = PyErr_Occurred();
    {
      if (error != NULL) {
        throw Swig::DirectorMethodException();
      }
    }
  }
}


void SwigDirector_IntVarLocalSearchFilter::Revert() {
  operations_research::LocalSearchFilter::Revert();
}


void SwigDirector_IntVarLocalSearchFilter::Reset() {
  operations_research::LocalSearchFilter::Reset();
}


int64_t SwigDirector_IntVarLocalSearchFilter::GetSynchronizedObjectiveValue() const {
  return operations_research::LocalSearchFilter::GetSynchronizedObjectiveValue();
}


int64_t SwigDirector_IntVarLocalSearchFilter::GetAcceptedObjectiveValue() const {
  return operations_research::LocalSearchFilter::GetAcceptedObjectiveValue();
}


void SwigDirector_IntVarLocalSearchFilter::OnSynchronize(operations_research::Assignment const *delta) {
  operations_research::IntVarLocalSearchFilter::OnSynchronize(delta);
}


#ifdef __cplusplus
extern "C" {
#endif
SWIGINTERN PyObject *_wrap_DefaultPhaseParameters_var_selection_schema_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  operations_research::DefaultPhaseParameters::VariableSelection arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DefaultPhaseParameters_var_selection_schema_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__DefaultPhaseParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefaultPhaseParameters_var_selection_schema_set" "', argument " "1"" of type '" "operations_research::DefaultPhaseParameters *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::DefaultPhaseParameters * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DefaultPhaseParameters_var_selection_schema_set" "', argument " "2"" of type '" "operations_research::DefaultPhaseParameters::VariableSelection""'");
  } 
  arg2 = static_cast< operations_research::DefaultPhaseParameters::VariableSelection >(val2);
  if (arg1) (arg1)->var_selection_schema = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefaultPhaseParameters_var_selection_schema_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::DefaultPhaseParameters::VariableSelection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DefaultPhaseParameters_var_selection_schema_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__DefaultPhaseParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefaultPhaseParameters_var_selection_schema_get" "', argument " "1"" of type '" "operations_research::DefaultPhaseParameters *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::DefaultPhaseParameters * >(argp1);
  result = (operations_research::DefaultPhaseParameters::VariableSelection) ((arg1)->var_selection_schema);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefaultPhaseParameters_value_selection_schema_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  operations_research::DefaultPhaseParameters::ValueSelection arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DefaultPhaseParameters_value_selection_schema_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__DefaultPhaseParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefaultPhaseParameters_value_selection_schema_set" "', argument " "1"" of type '" "operations_research::DefaultPhaseParameters *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::DefaultPhaseParameters * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DefaultPhaseParameters_value_selection_schema_set" "', argument " "2"" of type '" "operations_research::DefaultPhaseParameters::ValueSelection""'");
  } 
  arg2 = static_cast< operations_research::DefaultPhaseParameters::ValueSelection >(val2);
  if (arg1) (arg1)->value_selection_schema = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefaultPhaseParameters_value_selection_schema_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::DefaultPhaseParameters::ValueSelection result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DefaultPhaseParameters_value_selection_schema_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__DefaultPhaseParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefaultPhaseParameters_value_selection_schema_get" "', argument " "1"" of type '" "operations_research::DefaultPhaseParameters *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::DefaultPhaseParameters * >(argp1);
  result = (operations_research::DefaultPhaseParameters::ValueSelection) ((arg1)->value_selection_schema);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefaultPhaseParameters_initialization_splits_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DefaultPhaseParameters_initialization_splits_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__DefaultPhaseParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefaultPhaseParameters_initialization_splits_set" "', argument " "1"" of type '" "operations_research::DefaultPhaseParameters *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::DefaultPhaseParameters * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DefaultPhaseParameters_initialization_splits_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->initialization_splits = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefaultPhaseParameters_initialization_splits_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DefaultPhaseParameters_initialization_splits_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__DefaultPhaseParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefaultPhaseParameters_initialization_splits_get" "', argument " "1"" of type '" "operations_research::DefaultPhaseParameters *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::DefaultPhaseParameters * >(argp1);
  result = (int) ((arg1)->initialization_splits);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefaultPhaseParameters_run_all_heuristics_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DefaultPhaseParameters_run_all_heuristics_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__DefaultPhaseParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefaultPhaseParameters_run_all_heuristics_set" "', argument " "1"" of type '" "operations_research::DefaultPhaseParameters *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::DefaultPhaseParameters * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DefaultPhaseParameters_run_all_heuristics_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->run_all_heuristics = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefaultPhaseParameters_run_all_heuristics_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DefaultPhaseParameters_run_all_heuristics_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__DefaultPhaseParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefaultPhaseParameters_run_all_heuristics_get" "', argument " "1"" of type '" "operations_research::DefaultPhaseParameters *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::DefaultPhaseParameters * >(argp1);
  result = (bool) ((arg1)->run_all_heuristics);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefaultPhaseParameters_heuristic_period_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DefaultPhaseParameters_heuristic_period_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__DefaultPhaseParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefaultPhaseParameters_heuristic_period_set" "', argument " "1"" of type '" "operations_research::DefaultPhaseParameters *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::DefaultPhaseParameters * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DefaultPhaseParameters_heuristic_period_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->heuristic_period = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefaultPhaseParameters_heuristic_period_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DefaultPhaseParameters_heuristic_period_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__DefaultPhaseParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefaultPhaseParameters_heuristic_period_get" "', argument " "1"" of type '" "operations_research::DefaultPhaseParameters *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::DefaultPhaseParameters * >(argp1);
  result = (int) ((arg1)->heuristic_period);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefaultPhaseParameters_heuristic_num_failures_limit_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DefaultPhaseParameters_heuristic_num_failures_limit_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__DefaultPhaseParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefaultPhaseParameters_heuristic_num_failures_limit_set" "', argument " "1"" of type '" "operations_research::DefaultPhaseParameters *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::DefaultPhaseParameters * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DefaultPhaseParameters_heuristic_num_failures_limit_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->heuristic_num_failures_limit = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefaultPhaseParameters_heuristic_num_failures_limit_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DefaultPhaseParameters_heuristic_num_failures_limit_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__DefaultPhaseParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefaultPhaseParameters_heuristic_num_failures_limit_get" "', argument " "1"" of type '" "operations_research::DefaultPhaseParameters *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::DefaultPhaseParameters * >(argp1);
  result = (int) ((arg1)->heuristic_num_failures_limit);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefaultPhaseParameters_persistent_impact_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DefaultPhaseParameters_persistent_impact_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__DefaultPhaseParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefaultPhaseParameters_persistent_impact_set" "', argument " "1"" of type '" "operations_research::DefaultPhaseParameters *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::DefaultPhaseParameters * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DefaultPhaseParameters_persistent_impact_set" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  if (arg1) (arg1)->persistent_impact = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefaultPhaseParameters_persistent_impact_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DefaultPhaseParameters_persistent_impact_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__DefaultPhaseParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefaultPhaseParameters_persistent_impact_get" "', argument " "1"" of type '" "operations_research::DefaultPhaseParameters *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::DefaultPhaseParameters * >(argp1);
  result = (bool) ((arg1)->persistent_impact);
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefaultPhaseParameters_random_seed_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DefaultPhaseParameters_random_seed_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__DefaultPhaseParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefaultPhaseParameters_random_seed_set" "', argument " "1"" of type '" "operations_research::DefaultPhaseParameters *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::DefaultPhaseParameters * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DefaultPhaseParameters_random_seed_set" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  if (arg1) (arg1)->random_seed = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefaultPhaseParameters_random_seed_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DefaultPhaseParameters_random_seed_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__DefaultPhaseParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefaultPhaseParameters_random_seed_get" "', argument " "1"" of type '" "operations_research::DefaultPhaseParameters *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::DefaultPhaseParameters * >(argp1);
  result = (int) ((arg1)->random_seed);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefaultPhaseParameters_display_level_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  operations_research::DefaultPhaseParameters::DisplayLevel arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DefaultPhaseParameters_display_level_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__DefaultPhaseParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefaultPhaseParameters_display_level_set" "', argument " "1"" of type '" "operations_research::DefaultPhaseParameters *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::DefaultPhaseParameters * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DefaultPhaseParameters_display_level_set" "', argument " "2"" of type '" "operations_research::DefaultPhaseParameters::DisplayLevel""'");
  } 
  arg2 = static_cast< operations_research::DefaultPhaseParameters::DisplayLevel >(val2);
  if (arg1) (arg1)->display_level = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefaultPhaseParameters_display_level_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::DefaultPhaseParameters::DisplayLevel result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DefaultPhaseParameters_display_level_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__DefaultPhaseParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefaultPhaseParameters_display_level_get" "', argument " "1"" of type '" "operations_research::DefaultPhaseParameters *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::DefaultPhaseParameters * >(argp1);
  result = (operations_research::DefaultPhaseParameters::DisplayLevel) ((arg1)->display_level);
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefaultPhaseParameters_decision_builder_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DefaultPhaseParameters_decision_builder_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__DefaultPhaseParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefaultPhaseParameters_decision_builder_set" "', argument " "1"" of type '" "operations_research::DefaultPhaseParameters *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::DefaultPhaseParameters * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  if (arg1) (arg1)->decision_builder = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefaultPhaseParameters_decision_builder_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DefaultPhaseParameters_decision_builder_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__DefaultPhaseParameters, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DefaultPhaseParameters_decision_builder_get" "', argument " "1"" of type '" "operations_research::DefaultPhaseParameters *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::DefaultPhaseParameters * >(argp1);
  result = (operations_research::DecisionBuilder *) ((arg1)->decision_builder);
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DecisionBuilder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_DefaultPhaseParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::DefaultPhaseParameters *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_DefaultPhaseParameters")) SWIG_fail;
  {
    try {
      result = (operations_research::DefaultPhaseParameters *)new operations_research::DefaultPhaseParameters(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DefaultPhaseParameters, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DefaultPhaseParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::DefaultPhaseParameters *arg1 = (operations_research::DefaultPhaseParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DefaultPhaseParameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__DefaultPhaseParameters, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_DefaultPhaseParameters" "', argument " "1"" of type '" "operations_research::DefaultPhaseParameters *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::DefaultPhaseParameters * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DefaultPhaseParameters_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__DefaultPhaseParameters, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Solver__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  operations_research::Solver *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Solver",&obj0)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Solver" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Solver" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    try {
      result = (operations_research::Solver *)new operations_research::Solver((std::string const &)*arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Solver, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Solver__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::string *arg1 = 0 ;
  operations_research::ConstraintSolverParameters *arg2 = 0 ;
  int res1 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::Solver *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Solver",&obj0,&obj1)) SWIG_fail;
  {
    std::string *ptr = (std::string *)0;
    res1 = SWIG_AsPtr_std_string(obj0, &ptr);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_Solver" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_Solver" "', argument " "1"" of type '" "std::string const &""'"); 
    }
    arg1 = ptr;
  }
  {
    arg2 = new operations_research::ConstraintSolverParameters;
    PyObject* const pyresult = PyObject_CallMethod(
      obj1, const_cast<char*>("SerializeToString"), nullptr);
    if (pyresult != nullptr) {
      char* buffer = nullptr;
      Py_ssize_t length = 0;
      int result = PyString_AsStringAndSize(pyresult, &buffer, &length);
      if (buffer != nullptr) {
        arg2->ParseFromArray(buffer, length);
      }
      Py_DECREF(pyresult);
    }
  }
  {
    try {
      result = (operations_research::Solver *)new operations_research::Solver((std::string const &)*arg1,(operations_research::ConstraintSolverParameters const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Solver, SWIG_POINTER_NEW |  0 );
  if (SWIG_IsNewObj(res1)) delete arg1;
  {
    delete arg2;
  }
  return resultobj;
fail:
  if (SWIG_IsNewObj(res1)) delete arg1;
  {
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_Solver(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_Solver__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        bool ok = false;
        PyObject* const module = PyImport_ImportModule("ortools.constraint_solver.solver_parameters_pb2");
        if (module != nullptr) {
          PyObject* const dict = PyModule_GetDict(module);
          if (dict != nullptr) {
            PyObject* const clss = PyDict_GetItemString(dict, "ConstraintSolverParameters");
            if (clss != nullptr) {
              if (PyObject_IsInstance(argv[1], clss)) {
                ok = true;
              }
            }
          }
          Py_DECREF(module);
        }
        _v = ok ? 1 : 0;
      }
      if (_v) {
        return _wrap_new_Solver__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_Solver'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::Solver(std::string const &)\n"
    "    operations_research::Solver::Solver(std::string const &,operations_research::ConstraintSolverParameters const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_Solver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Solver",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_Solver" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Parameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::ConstraintSolverParameters result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_Parameters",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Parameters" "', argument " "1"" of type '" "operations_research::Solver const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    try {
      result = ((operations_research::Solver const *)arg1)->parameters(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    PyObject* const module = PyImport_ImportModule("ortools.constraint_solver.solver_parameters_pb2");
    if (module != nullptr) {
      PyObject* const dict = PyModule_GetDict(module);
      if (dict != nullptr) {
        PyObject* const clss = PyDict_GetItemString(dict, "ConstraintSolverParameters");
        if (clss != nullptr) {
          std::string encoded_protobuf;
          (&result)->SerializeToString(&encoded_protobuf);
          
          PyObject* const python_encoded_protobuf = PyBytes_FromStringAndSize(
            encoded_protobuf.c_str(), encoded_protobuf.size());
          
          
          
          
          PyObject* const result = PyObject_CallMethod(
            clss, const_cast<char*>("FromString"),
            const_cast<char*>("(O)"),
            python_encoded_protobuf);
          Py_DECREF(python_encoded_protobuf);
          resultobj = result;
        }
      }
      Py_DECREF(module);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_DefaultSolverParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::ConstraintSolverParameters result;
  
  if (!PyArg_ParseTuple(args,(char *)":Solver_DefaultSolverParameters")) SWIG_fail;
  {
    try {
      result = operations_research::Solver::DefaultSolverParameters(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    PyObject* const module = PyImport_ImportModule("ortools.constraint_solver.solver_parameters_pb2");
    if (module != nullptr) {
      PyObject* const dict = PyModule_GetDict(module);
      if (dict != nullptr) {
        PyObject* const clss = PyDict_GetItemString(dict, "ConstraintSolverParameters");
        if (clss != nullptr) {
          std::string encoded_protobuf;
          (&result)->SerializeToString(&encoded_protobuf);
          
          PyObject* const python_encoded_protobuf = PyBytes_FromStringAndSize(
            encoded_protobuf.c_str(), encoded_protobuf.size());
          
          
          
          
          PyObject* const result = PyObject_CallMethod(
            clss, const_cast<char*>("FromString"),
            const_cast<char*>("(O)"),
            python_encoded_protobuf);
          Py_DECREF(python_encoded_protobuf);
          resultobj = result;
        }
      }
      Py_DECREF(module);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_AddConstraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_AddConstraint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_AddConstraint" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    operations_research::Solver* const solver = arg1;
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->AddConstraint(arg2);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      // IMPORTANT: the type and message of the exception raised matter,
      // because they are caught by the python overrides of some CP classes.
      // See the occurrences of the "PyExc_Exception" string below.
      PyErr_SetString(PyExc_Exception, "CP Solver fail");
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Solve__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) 0 ;
  std::vector< operations_research::SearchMonitor * > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::SearchMonitor * > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_Solve",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Solve" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<operations_research::SearchMonitor*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::SearchMonitor*) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    try {
      result = (bool)(arg1)->Solve(arg2,(std::vector< operations_research::SearchMonitor * > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Solve__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_Solve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Solve" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (bool)(arg1)->Solve(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Solve__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) 0 ;
  operations_research::SearchMonitor *arg3 = (operations_research::SearchMonitor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_Solve",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Solve" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    try {
      result = (bool)(arg1)->Solve(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Solve__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) 0 ;
  operations_research::SearchMonitor *arg3 = (operations_research::SearchMonitor *) 0 ;
  operations_research::SearchMonitor *arg4 = (operations_research::SearchMonitor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_Solve",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Solve" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    try {
      result = (bool)(arg1)->Solve(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Solve__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) 0 ;
  operations_research::SearchMonitor *arg3 = (operations_research::SearchMonitor *) 0 ;
  operations_research::SearchMonitor *arg4 = (operations_research::SearchMonitor *) 0 ;
  operations_research::SearchMonitor *arg5 = (operations_research::SearchMonitor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_Solve",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Solve" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj4, &arg5)) SWIG_fail;
  }
  {
    try {
      result = (bool)(arg1)->Solve(arg2,arg3,arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Solve__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) 0 ;
  operations_research::SearchMonitor *arg3 = (operations_research::SearchMonitor *) 0 ;
  operations_research::SearchMonitor *arg4 = (operations_research::SearchMonitor *) 0 ;
  operations_research::SearchMonitor *arg5 = (operations_research::SearchMonitor *) 0 ;
  operations_research::SearchMonitor *arg6 = (operations_research::SearchMonitor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Solver_Solve",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Solve" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj4, &arg5)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj5, &arg6)) SWIG_fail;
  }
  {
    try {
      result = (bool)(arg1)->Solve(arg2,arg3,arg4,arg5,arg6); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Solve(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToDecisionBuilder(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_Solver_Solve__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToDecisionBuilder(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && CanConvertToSearchMonitor(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          return _wrap_Solver_Solve__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToDecisionBuilder(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          _v = CanConvertToSearchMonitor(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          return _wrap_Solver_Solve__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToDecisionBuilder(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          _v = CanConvertToSearchMonitor(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          {
            _v = CanConvertToSearchMonitor(argv[3]);
            if (_v == 0) PyErr_Clear();
          }
          if (_v) {
            return _wrap_Solver_Solve__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToDecisionBuilder(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          _v = CanConvertToSearchMonitor(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          {
            _v = CanConvertToSearchMonitor(argv[3]);
            if (_v == 0) PyErr_Clear();
          }
          if (_v) {
            {
              _v = CanConvertToSearchMonitor(argv[4]);
              if (_v == 0) PyErr_Clear();
            }
            if (_v) {
              return _wrap_Solver_Solve__SWIG_4(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToDecisionBuilder(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          _v = CanConvertToSearchMonitor(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          {
            _v = CanConvertToSearchMonitor(argv[3]);
            if (_v == 0) PyErr_Clear();
          }
          if (_v) {
            {
              _v = CanConvertToSearchMonitor(argv[4]);
              if (_v == 0) PyErr_Clear();
            }
            if (_v) {
              {
                _v = CanConvertToSearchMonitor(argv[5]);
                if (_v == 0) PyErr_Clear();
              }
              if (_v) {
                return _wrap_Solver_Solve__SWIG_5(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_Solve'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::Solve(operations_research::DecisionBuilder *,std::vector< operations_research::SearchMonitor * > const &)\n"
    "    operations_research::Solver::Solve(operations_research::DecisionBuilder *)\n"
    "    operations_research::Solver::Solve(operations_research::DecisionBuilder *,operations_research::SearchMonitor *)\n"
    "    operations_research::Solver::Solve(operations_research::DecisionBuilder *,operations_research::SearchMonitor *,operations_research::SearchMonitor *)\n"
    "    operations_research::Solver::Solve(operations_research::DecisionBuilder *,operations_research::SearchMonitor *,operations_research::SearchMonitor *,operations_research::SearchMonitor *)\n"
    "    operations_research::Solver::Solve(operations_research::DecisionBuilder *,operations_research::SearchMonitor *,operations_research::SearchMonitor *,operations_research::SearchMonitor *,operations_research::SearchMonitor *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_NewSearch__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) 0 ;
  std::vector< operations_research::SearchMonitor * > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::SearchMonitor * > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_NewSearch",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_NewSearch" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<operations_research::SearchMonitor*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::SearchMonitor*) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    try {
      (arg1)->NewSearch(arg2,(std::vector< operations_research::SearchMonitor * > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_NewSearch__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_NewSearch",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_NewSearch" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->NewSearch(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_NewSearch__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) 0 ;
  operations_research::SearchMonitor *arg3 = (operations_research::SearchMonitor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_NewSearch",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_NewSearch" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    try {
      (arg1)->NewSearch(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_NewSearch__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) 0 ;
  operations_research::SearchMonitor *arg3 = (operations_research::SearchMonitor *) 0 ;
  operations_research::SearchMonitor *arg4 = (operations_research::SearchMonitor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_NewSearch",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_NewSearch" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    try {
      (arg1)->NewSearch(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_NewSearch__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) 0 ;
  operations_research::SearchMonitor *arg3 = (operations_research::SearchMonitor *) 0 ;
  operations_research::SearchMonitor *arg4 = (operations_research::SearchMonitor *) 0 ;
  operations_research::SearchMonitor *arg5 = (operations_research::SearchMonitor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_NewSearch",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_NewSearch" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj4, &arg5)) SWIG_fail;
  }
  {
    try {
      (arg1)->NewSearch(arg2,arg3,arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_NewSearch__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) 0 ;
  operations_research::SearchMonitor *arg3 = (operations_research::SearchMonitor *) 0 ;
  operations_research::SearchMonitor *arg4 = (operations_research::SearchMonitor *) 0 ;
  operations_research::SearchMonitor *arg5 = (operations_research::SearchMonitor *) 0 ;
  operations_research::SearchMonitor *arg6 = (operations_research::SearchMonitor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Solver_NewSearch",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_NewSearch" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj4, &arg5)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj5, &arg6)) SWIG_fail;
  }
  {
    try {
      (arg1)->NewSearch(arg2,arg3,arg4,arg5,arg6); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_NewSearch(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToDecisionBuilder(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_Solver_NewSearch__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToDecisionBuilder(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && CanConvertToSearchMonitor(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          return _wrap_Solver_NewSearch__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToDecisionBuilder(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          _v = CanConvertToSearchMonitor(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          return _wrap_Solver_NewSearch__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToDecisionBuilder(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          _v = CanConvertToSearchMonitor(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          {
            _v = CanConvertToSearchMonitor(argv[3]);
            if (_v == 0) PyErr_Clear();
          }
          if (_v) {
            return _wrap_Solver_NewSearch__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToDecisionBuilder(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          _v = CanConvertToSearchMonitor(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          {
            _v = CanConvertToSearchMonitor(argv[3]);
            if (_v == 0) PyErr_Clear();
          }
          if (_v) {
            {
              _v = CanConvertToSearchMonitor(argv[4]);
              if (_v == 0) PyErr_Clear();
            }
            if (_v) {
              return _wrap_Solver_NewSearch__SWIG_4(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToDecisionBuilder(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          _v = CanConvertToSearchMonitor(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          {
            _v = CanConvertToSearchMonitor(argv[3]);
            if (_v == 0) PyErr_Clear();
          }
          if (_v) {
            {
              _v = CanConvertToSearchMonitor(argv[4]);
              if (_v == 0) PyErr_Clear();
            }
            if (_v) {
              {
                _v = CanConvertToSearchMonitor(argv[5]);
                if (_v == 0) PyErr_Clear();
              }
              if (_v) {
                return _wrap_Solver_NewSearch__SWIG_5(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_NewSearch'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::NewSearch(operations_research::DecisionBuilder *,std::vector< operations_research::SearchMonitor * > const &)\n"
    "    operations_research::Solver::NewSearch(operations_research::DecisionBuilder *)\n"
    "    operations_research::Solver::NewSearch(operations_research::DecisionBuilder *,operations_research::SearchMonitor *)\n"
    "    operations_research::Solver::NewSearch(operations_research::DecisionBuilder *,operations_research::SearchMonitor *,operations_research::SearchMonitor *)\n"
    "    operations_research::Solver::NewSearch(operations_research::DecisionBuilder *,operations_research::SearchMonitor *,operations_research::SearchMonitor *,operations_research::SearchMonitor *)\n"
    "    operations_research::Solver::NewSearch(operations_research::DecisionBuilder *,operations_research::SearchMonitor *,operations_research::SearchMonitor *,operations_research::SearchMonitor *,operations_research::SearchMonitor *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_NextSolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_NextSolution",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_NextSolution" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    try {
      result = (bool)(arg1)->NextSolution(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_RestartSearch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_RestartSearch",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_RestartSearch" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    try {
      (arg1)->RestartSearch(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_EndSearch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_EndSearch",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_EndSearch" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    try {
      (arg1)->EndSearch(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_SolveAndCommit__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) 0 ;
  std::vector< operations_research::SearchMonitor * > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::SearchMonitor * > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_SolveAndCommit",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_SolveAndCommit" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<operations_research::SearchMonitor*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::SearchMonitor*) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    try {
      result = (bool)(arg1)->SolveAndCommit(arg2,(std::vector< operations_research::SearchMonitor * > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_SolveAndCommit__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_SolveAndCommit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_SolveAndCommit" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (bool)(arg1)->SolveAndCommit(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_SolveAndCommit__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) 0 ;
  operations_research::SearchMonitor *arg3 = (operations_research::SearchMonitor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_SolveAndCommit",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_SolveAndCommit" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    try {
      result = (bool)(arg1)->SolveAndCommit(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_SolveAndCommit__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) 0 ;
  operations_research::SearchMonitor *arg3 = (operations_research::SearchMonitor *) 0 ;
  operations_research::SearchMonitor *arg4 = (operations_research::SearchMonitor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_SolveAndCommit",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_SolveAndCommit" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    try {
      result = (bool)(arg1)->SolveAndCommit(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_SolveAndCommit__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) 0 ;
  operations_research::SearchMonitor *arg3 = (operations_research::SearchMonitor *) 0 ;
  operations_research::SearchMonitor *arg4 = (operations_research::SearchMonitor *) 0 ;
  operations_research::SearchMonitor *arg5 = (operations_research::SearchMonitor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_SolveAndCommit",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_SolveAndCommit" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj4, &arg5)) SWIG_fail;
  }
  {
    try {
      result = (bool)(arg1)->SolveAndCommit(arg2,arg3,arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_SolveAndCommit(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToDecisionBuilder(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_Solver_SolveAndCommit__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToDecisionBuilder(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && CanConvertToSearchMonitor(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          return _wrap_Solver_SolveAndCommit__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToDecisionBuilder(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          _v = CanConvertToSearchMonitor(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          return _wrap_Solver_SolveAndCommit__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToDecisionBuilder(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          _v = CanConvertToSearchMonitor(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          {
            _v = CanConvertToSearchMonitor(argv[3]);
            if (_v == 0) PyErr_Clear();
          }
          if (_v) {
            return _wrap_Solver_SolveAndCommit__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToDecisionBuilder(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          _v = CanConvertToSearchMonitor(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          {
            _v = CanConvertToSearchMonitor(argv[3]);
            if (_v == 0) PyErr_Clear();
          }
          if (_v) {
            {
              _v = CanConvertToSearchMonitor(argv[4]);
              if (_v == 0) PyErr_Clear();
            }
            if (_v) {
              return _wrap_Solver_SolveAndCommit__SWIG_4(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_SolveAndCommit'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::SolveAndCommit(operations_research::DecisionBuilder *,std::vector< operations_research::SearchMonitor * > const &)\n"
    "    operations_research::Solver::SolveAndCommit(operations_research::DecisionBuilder *)\n"
    "    operations_research::Solver::SolveAndCommit(operations_research::DecisionBuilder *,operations_research::SearchMonitor *)\n"
    "    operations_research::Solver::SolveAndCommit(operations_research::DecisionBuilder *,operations_research::SearchMonitor *,operations_research::SearchMonitor *)\n"
    "    operations_research::Solver::SolveAndCommit(operations_research::DecisionBuilder *,operations_research::SearchMonitor *,operations_research::SearchMonitor *,operations_research::SearchMonitor *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_CheckAssignment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_CheckAssignment",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_CheckAssignment" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Solver_CheckAssignment" "', argument " "2"" of type '" "operations_research::Assignment *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  {
    try {
      result = (bool)(arg1)->CheckAssignment(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_CheckConstraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_CheckConstraint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_CheckConstraint" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (bool)(arg1)->CheckConstraint(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Fail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_Fail",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Fail" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    operations_research::Solver* const solver = arg1;
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->Fail();
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      // IMPORTANT: the type and message of the exception raised matter,
      // because they are caught by the python overrides of some CP classes.
      // See the occurrences of the "PyExc_Exception" string below.
      PyErr_SetString(PyExc_Exception, "CP Solver fail");
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_MemoryUsage(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)":Solver_MemoryUsage")) SWIG_fail;
  {
    try {
      result = (int64_t)operations_research::Solver::MemoryUsage(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_WallTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_WallTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_WallTime" "', argument " "1"" of type '" "operations_research::Solver const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    try {
      result = (int64_t)((operations_research::Solver const *)arg1)->wall_time(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Branches(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_Branches",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Branches" "', argument " "1"" of type '" "operations_research::Solver const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    try {
      result = (int64_t)((operations_research::Solver const *)arg1)->branches(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Solutions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_Solutions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Solutions" "', argument " "1"" of type '" "operations_research::Solver const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    try {
      result = (int64_t)((operations_research::Solver const *)arg1)->solutions(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Failures(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_Failures",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Failures" "', argument " "1"" of type '" "operations_research::Solver const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    try {
      result = (int64_t)((operations_research::Solver const *)arg1)->failures(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_AcceptedNeighbors(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_AcceptedNeighbors",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_AcceptedNeighbors" "', argument " "1"" of type '" "operations_research::Solver const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    try {
      result = (int64_t)((operations_research::Solver const *)arg1)->accepted_neighbors(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Stamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_Stamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Stamp" "', argument " "1"" of type '" "operations_research::Solver const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    try {
      result = (uint64_t)((operations_research::Solver const *)arg1)->stamp(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_FailStamp(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_FailStamp",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_FailStamp" "', argument " "1"" of type '" "operations_research::Solver const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    try {
      result = (uint64_t)((operations_research::Solver const *)arg1)->fail_stamp(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IntVar__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_IntVar",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IntVar" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_IntVar" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_IntVar" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Solver_IntVar" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_IntVar" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (operations_research::IntVar *)(arg1)->MakeIntVar(arg2,arg3,(std::string const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IntVar__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< int64_t > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int64_t > temp2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_IntVar",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IntVar" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Solver_IntVar" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_IntVar" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (operations_research::IntVar *)(arg1)->MakeIntVar((std::vector< int64_t > const &)*arg2,(std::string const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IntVar__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< int > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > temp2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_IntVar",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IntVar" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Solver_IntVar" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_IntVar" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (operations_research::IntVar *)(arg1)->MakeIntVar((std::vector< int > const &)*arg2,(std::string const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IntVar__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_IntVar",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IntVar" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_IntVar" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_IntVar" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (operations_research::IntVar *)(arg1)->MakeIntVar(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IntVar__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< int64_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int64_t > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_IntVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IntVar" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (operations_research::IntVar *)(arg1)->MakeIntVar((std::vector< int64_t > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IntVar__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_IntVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IntVar" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (operations_research::IntVar *)(arg1)->MakeIntVar((std::vector< int > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IntVar(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        return _wrap_Solver_IntVar__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && PyInt_Check(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        return _wrap_Solver_IntVar__SWIG_5(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Solver_IntVar__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && PyInt_Check(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Solver_IntVar__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Solver_IntVar__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Solver_IntVar__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_IntVar'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeIntVar(int64_t,int64_t,std::string const &)\n"
    "    operations_research::Solver::MakeIntVar(std::vector< int64_t > const &,std::string const &)\n"
    "    operations_research::Solver::MakeIntVar(std::vector< int > const &,std::string const &)\n"
    "    operations_research::Solver::MakeIntVar(int64_t,int64_t)\n"
    "    operations_research::Solver::MakeIntVar(std::vector< int64_t > const &)\n"
    "    operations_research::Solver::MakeIntVar(std::vector< int > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_BoolVar__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_BoolVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_BoolVar" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Solver_BoolVar" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_BoolVar" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (operations_research::IntVar *)(arg1)->MakeBoolVar((std::string const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_BoolVar__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_BoolVar",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_BoolVar" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    try {
      result = (operations_research::IntVar *)(arg1)->MakeBoolVar(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_BoolVar(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Solver_BoolVar__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Solver_BoolVar__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_BoolVar'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeBoolVar(std::string const &)\n"
    "    operations_research::Solver::MakeBoolVar()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_IntConst__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64_t arg2 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_IntConst",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IntConst" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_IntConst" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Solver_IntConst" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_IntConst" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (operations_research::IntVar *)(arg1)->MakeIntConst(arg2,(std::string const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IntConst__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_IntConst",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IntConst" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_IntConst" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::IntVar *)(arg1)->MakeIntConst(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IntConst(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Solver_IntConst__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        int res = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Solver_IntConst__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_IntConst'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeIntConst(int64_t,std::string const &)\n"
    "    operations_research::Solver::MakeIntConst(int64_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_Sum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_Sum",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Sum" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (operations_research::IntExpr *)(arg1)->MakeSum((std::vector< operations_research::IntVar * > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_ScalProd__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int64_t > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< int64_t > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_ScalProd",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_ScalProd" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    try {
      result = (operations_research::IntExpr *)(arg1)->MakeScalProd((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int64_t > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_ScalProd__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< int > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_ScalProd",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_ScalProd" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    try {
      result = (operations_research::IntExpr *)(arg1)->MakeScalProd((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_ScalProd(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          return _wrap_Solver_ScalProd__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && PyInt_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          return _wrap_Solver_ScalProd__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_ScalProd'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeScalProd(std::vector< operations_research::IntVar * > const &,std::vector< int64_t > const &)\n"
    "    operations_research::Solver::MakeScalProd(std::vector< operations_research::IntVar * > const &,std::vector< int > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_Element__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< int64_t > *arg2 = 0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int64_t > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_Element",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Element" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntExpr *)(arg1)->MakeElement((std::vector< int64_t > const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Element__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< int > *arg2 = 0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_Element",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Element" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntExpr *)(arg1)->MakeElement((std::vector< int > const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Element__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Solver::IndexEvaluator1 arg2 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_Element",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Element" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    SharedPyPtr input(obj1);
    arg2 = [input](int64_t index) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "(L)", index);
    };
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntExpr *)(arg1)->MakeElement(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_MonotonicElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Solver::IndexEvaluator1 arg2 ;
  bool arg3 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_MonotonicElement",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_MonotonicElement" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    SharedPyPtr input(obj1);
    arg2 = [input](int64_t index) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "(L)", index);
    };
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_MonotonicElement" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntExpr *)(arg1)->MakeMonotonicElement(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Element__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Solver::IndexEvaluator2 arg2 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) 0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_Element",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Element" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    SharedPyPtr input(obj1);
    arg2 = [input](int64_t i, int64_t j) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "LL", i, j);
    };
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntExpr *)(arg1)->MakeElement(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Element__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_Element",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Element" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntExpr *)(arg1)->MakeElement((std::vector< operations_research::IntVar * > const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Element(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          _v = CanConvertToIntVar(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          return _wrap_Solver_Element__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && PyInt_Check(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          _v = CanConvertToIntVar(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          return _wrap_Solver_Element__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]);
      }
      if (_v) {
        {
          _v = CanConvertToIntVar(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          return _wrap_Solver_Element__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          _v = CanConvertToIntVar(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          return _wrap_Solver_Element__SWIG_4(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]);
      }
      if (_v) {
        {
          _v = CanConvertToIntVar(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          {
            _v = CanConvertToIntVar(argv[3]);
            if (_v == 0) PyErr_Clear();
          }
          if (_v) {
            return _wrap_Solver_Element__SWIG_3(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_Element'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeElement(std::vector< int64_t > const &,operations_research::IntVar *)\n"
    "    operations_research::Solver::MakeElement(std::vector< int > const &,operations_research::IntVar *)\n"
    "    operations_research::Solver::MakeElement(operations_research::Solver::IndexEvaluator1,operations_research::IntVar *)\n"
    "    operations_research::Solver::MakeElement(operations_research::Solver::IndexEvaluator2,operations_research::IntVar *,operations_research::IntVar *)\n"
    "    operations_research::Solver::MakeElement(std::vector< operations_research::IntVar * > const &,operations_research::IntVar *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_IndexExpression(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_IndexExpression",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IndexExpression" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_IndexExpression" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (operations_research::IntExpr *)(arg1)->MakeIndexExpression((std::vector< operations_research::IntVar * > const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Min__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_Min",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Min" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (operations_research::IntExpr *)(arg1)->MakeMin((std::vector< operations_research::IntVar * > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Min__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_Min",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Min" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntExpr *)(arg1)->MakeMin(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Min__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_Min",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Min" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_Min" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (operations_research::IntExpr *)(arg1)->MakeMin(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Min__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_Min",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Min" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_Min" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (operations_research::IntExpr *)(arg1)->MakeMin(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Min(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        return _wrap_Solver_Min__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          _v = CanConvertToIntExpr(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          return _wrap_Solver_Min__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Solver_Min__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Solver_Min__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_Min'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeMin(std::vector< operations_research::IntVar * > const &)\n"
    "    operations_research::Solver::MakeMin(operations_research::IntExpr *,operations_research::IntExpr *)\n"
    "    operations_research::Solver::MakeMin(operations_research::IntExpr *,int64_t)\n"
    "    operations_research::Solver::MakeMin(operations_research::IntExpr *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_Max__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_Max",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Max" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (operations_research::IntExpr *)(arg1)->MakeMax((std::vector< operations_research::IntVar * > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Max__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_Max",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Max" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntExpr *)(arg1)->MakeMax(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Max__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_Max",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Max" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_Max" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (operations_research::IntExpr *)(arg1)->MakeMax(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Max__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_Max",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Max" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_Max" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (operations_research::IntExpr *)(arg1)->MakeMax(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Max(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        return _wrap_Solver_Max__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          _v = CanConvertToIntExpr(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          return _wrap_Solver_Max__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Solver_Max__SWIG_3(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Solver_Max__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_Max'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeMax(std::vector< operations_research::IntVar * > const &)\n"
    "    operations_research::Solver::MakeMax(operations_research::IntExpr *,operations_research::IntExpr *)\n"
    "    operations_research::Solver::MakeMax(operations_research::IntExpr *,int64_t)\n"
    "    operations_research::Solver::MakeMax(operations_research::IntExpr *,int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_ConvexPiecewiseExpr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  int64_t arg3 ;
  int64_t arg4 ;
  int64_t arg5 ;
  int64_t arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  long val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Solver_ConvexPiecewiseExpr",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_ConvexPiecewiseExpr" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_ConvexPiecewiseExpr" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_ConvexPiecewiseExpr" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Solver_ConvexPiecewiseExpr" "', argument " "5"" of type '" "int64_t""'");
  } 
  arg5 = static_cast< int64_t >(val5);
  ecode6 = SWIG_AsVal_long(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Solver_ConvexPiecewiseExpr" "', argument " "6"" of type '" "int64_t""'");
  } 
  arg6 = static_cast< int64_t >(val6);
  {
    try {
      result = (operations_research::IntExpr *)(arg1)->MakeConvexPiecewiseExpr(arg2,arg3,arg4,arg5,arg6); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_SemiContinuousExpr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  int64_t arg3 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_SemiContinuousExpr",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_SemiContinuousExpr" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_SemiContinuousExpr" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_SemiContinuousExpr" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      result = (operations_research::IntExpr *)(arg1)->MakeSemiContinuousExpr(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_ConditionalExpression(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) 0 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_ConditionalExpression",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_ConditionalExpression" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_ConditionalExpression" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      result = (operations_research::IntExpr *)(arg1)->MakeConditionalExpression(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_TrueConstraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_TrueConstraint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_TrueConstraint" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeTrueConstraint(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_FalseConstraint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_FalseConstraint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_FalseConstraint" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeFalseConstraint(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_FalseConstraint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_FalseConstraint",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_FalseConstraint" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Solver_FalseConstraint" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_FalseConstraint" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeFalseConstraint((std::string const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_FalseConstraint(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Solver_FalseConstraint__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Solver_FalseConstraint__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_FalseConstraint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeFalseConstraint()\n"
    "    operations_research::Solver::MakeFalseConstraint(std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_IsEqualCstCt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  int64_t arg3 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_IsEqualCstCt",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IsEqualCstCt" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_IsEqualCstCt" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeIsEqualCstCt(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IsEqualCstVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_IsEqualCstVar",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IsEqualCstVar" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_IsEqualCstVar" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (operations_research::IntVar *)(arg1)->MakeIsEqualCstVar(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IsEqualCt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) 0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_IsEqualCt",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IsEqualCt" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeIsEqualCt(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IsEqualVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_IsEqualVar",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IsEqualVar" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntVar *)(arg1)->MakeIsEqualVar(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IsDifferentCstCt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  int64_t arg3 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_IsDifferentCstCt",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IsDifferentCstCt" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_IsDifferentCstCt" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeIsDifferentCstCt(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IsDifferentCstVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_IsDifferentCstVar",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IsDifferentCstVar" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_IsDifferentCstVar" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (operations_research::IntVar *)(arg1)->MakeIsDifferentCstVar(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IsDifferentVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_IsDifferentVar",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IsDifferentVar" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntVar *)(arg1)->MakeIsDifferentVar(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IsDifferentCt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) 0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_IsDifferentCt",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IsDifferentCt" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeIsDifferentCt(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IsLessOrEqualCstCt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  int64_t arg3 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_IsLessOrEqualCstCt",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IsLessOrEqualCstCt" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_IsLessOrEqualCstCt" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeIsLessOrEqualCstCt(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IsLessOrEqualCstVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_IsLessOrEqualCstVar",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IsLessOrEqualCstVar" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_IsLessOrEqualCstVar" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (operations_research::IntVar *)(arg1)->MakeIsLessOrEqualCstVar(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IsLessOrEqualVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_IsLessOrEqualVar",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IsLessOrEqualVar" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntVar *)(arg1)->MakeIsLessOrEqualVar(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IsLessOrEqualCt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) 0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_IsLessOrEqualCt",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IsLessOrEqualCt" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeIsLessOrEqualCt(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IsGreaterOrEqualCstCt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  int64_t arg3 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_IsGreaterOrEqualCstCt",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IsGreaterOrEqualCstCt" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_IsGreaterOrEqualCstCt" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeIsGreaterOrEqualCstCt(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IsGreaterOrEqualCstVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_IsGreaterOrEqualCstVar",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IsGreaterOrEqualCstVar" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_IsGreaterOrEqualCstVar" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (operations_research::IntVar *)(arg1)->MakeIsGreaterOrEqualCstVar(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IsGreaterOrEqualVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_IsGreaterOrEqualVar",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IsGreaterOrEqualVar" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntVar *)(arg1)->MakeIsGreaterOrEqualVar(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IsGreaterOrEqualCt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) 0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_IsGreaterOrEqualCt",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IsGreaterOrEqualCt" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeIsGreaterOrEqualCt(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IsGreaterCstCt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  int64_t arg3 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_IsGreaterCstCt",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IsGreaterCstCt" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_IsGreaterCstCt" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeIsGreaterCstCt(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IsGreaterCstVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_IsGreaterCstVar",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IsGreaterCstVar" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_IsGreaterCstVar" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (operations_research::IntVar *)(arg1)->MakeIsGreaterCstVar(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IsGreaterVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_IsGreaterVar",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IsGreaterVar" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntVar *)(arg1)->MakeIsGreaterVar(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IsGreaterCt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) 0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_IsGreaterCt",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IsGreaterCt" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeIsGreaterCt(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IsLessCstCt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  int64_t arg3 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_IsLessCstCt",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IsLessCstCt" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_IsLessCstCt" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeIsLessCstCt(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IsLessCstVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_IsLessCstVar",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IsLessCstVar" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_IsLessCstVar" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (operations_research::IntVar *)(arg1)->MakeIsLessCstVar(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IsLessVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_IsLessVar",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IsLessVar" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntVar *)(arg1)->MakeIsLessVar(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IsLessCt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  operations_research::IntExpr *arg3 = (operations_research::IntExpr *) 0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_IsLessCt",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IsLessCt" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeIsLessCt(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_SumLessOrEqual(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_SumLessOrEqual",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_SumLessOrEqual" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_SumLessOrEqual" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeSumLessOrEqual((std::vector< operations_research::IntVar * > const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_SumGreaterOrEqual(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_SumGreaterOrEqual",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_SumGreaterOrEqual" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_SumGreaterOrEqual" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeSumGreaterOrEqual((std::vector< operations_research::IntVar * > const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_SumEquality__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_SumEquality",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_SumEquality" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_SumEquality" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeSumEquality((std::vector< operations_research::IntVar * > const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_SumEquality__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_SumEquality",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_SumEquality" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeSumEquality((std::vector< operations_research::IntVar * > const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_SumEquality(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          _v = CanConvertToIntVar(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          return _wrap_Solver_SumEquality__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Solver_SumEquality__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_SumEquality'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeSumEquality(std::vector< operations_research::IntVar * > const &,int64_t)\n"
    "    operations_research::Solver::MakeSumEquality(std::vector< operations_research::IntVar * > const &,operations_research::IntVar *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_ScalProdEquality__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int64_t > *arg3 = 0 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< int64_t > temp3 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_ScalProdEquality",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_ScalProdEquality" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_ScalProdEquality" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeScalProdEquality((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int64_t > const &)*arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_ScalProdEquality__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< int > temp3 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_ScalProdEquality",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_ScalProdEquality" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_ScalProdEquality" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeScalProdEquality((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int > const &)*arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_ScalProdEquality__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int64_t > *arg3 = 0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< int64_t > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_ScalProdEquality",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_ScalProdEquality" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeScalProdEquality((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int64_t > const &)*arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_ScalProdEquality__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< int > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_ScalProdEquality",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_ScalProdEquality" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeScalProdEquality((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int > const &)*arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_ScalProdEquality(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            _v = CanConvertToIntVar(argv[3]);
            if (_v == 0) PyErr_Clear();
          }
          if (_v) {
            return _wrap_Solver_ScalProdEquality__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && PyInt_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            _v = CanConvertToIntVar(argv[3]);
            if (_v == 0) PyErr_Clear();
          }
          if (_v) {
            return _wrap_Solver_ScalProdEquality__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Solver_ScalProdEquality__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && PyInt_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Solver_ScalProdEquality__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_ScalProdEquality'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeScalProdEquality(std::vector< operations_research::IntVar * > const &,std::vector< int64_t > const &,int64_t)\n"
    "    operations_research::Solver::MakeScalProdEquality(std::vector< operations_research::IntVar * > const &,std::vector< int > const &,int64_t)\n"
    "    operations_research::Solver::MakeScalProdEquality(std::vector< operations_research::IntVar * > const &,std::vector< int64_t > const &,operations_research::IntVar *)\n"
    "    operations_research::Solver::MakeScalProdEquality(std::vector< operations_research::IntVar * > const &,std::vector< int > const &,operations_research::IntVar *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_ScalProdGreaterOrEqual__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int64_t > *arg3 = 0 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< int64_t > temp3 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_ScalProdGreaterOrEqual",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_ScalProdGreaterOrEqual" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_ScalProdGreaterOrEqual" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeScalProdGreaterOrEqual((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int64_t > const &)*arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_ScalProdGreaterOrEqual__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< int > temp3 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_ScalProdGreaterOrEqual",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_ScalProdGreaterOrEqual" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_ScalProdGreaterOrEqual" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeScalProdGreaterOrEqual((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int > const &)*arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_ScalProdGreaterOrEqual(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Solver_ScalProdGreaterOrEqual__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && PyInt_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Solver_ScalProdGreaterOrEqual__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_ScalProdGreaterOrEqual'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeScalProdGreaterOrEqual(std::vector< operations_research::IntVar * > const &,std::vector< int64_t > const &,int64_t)\n"
    "    operations_research::Solver::MakeScalProdGreaterOrEqual(std::vector< operations_research::IntVar * > const &,std::vector< int > const &,int64_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_ScalProdLessOrEqual__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int64_t > *arg3 = 0 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< int64_t > temp3 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_ScalProdLessOrEqual",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_ScalProdLessOrEqual" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_ScalProdLessOrEqual" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeScalProdLessOrEqual((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int64_t > const &)*arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_ScalProdLessOrEqual__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< int > temp3 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_ScalProdLessOrEqual",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_ScalProdLessOrEqual" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_ScalProdLessOrEqual" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeScalProdLessOrEqual((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int > const &)*arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_ScalProdLessOrEqual(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Solver_ScalProdLessOrEqual__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && PyInt_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Solver_ScalProdLessOrEqual__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_ScalProdLessOrEqual'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeScalProdLessOrEqual(std::vector< operations_research::IntVar * > const &,std::vector< int64_t > const &,int64_t)\n"
    "    operations_research::Solver::MakeScalProdLessOrEqual(std::vector< operations_research::IntVar * > const &,std::vector< int > const &,int64_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_MinEquality(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_MinEquality",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_MinEquality" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeMinEquality((std::vector< operations_research::IntVar * > const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_MaxEquality(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_MaxEquality",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_MaxEquality" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeMaxEquality((std::vector< operations_research::IntVar * > const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_ElementEquality__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< int64_t > *arg2 = 0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) 0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int64_t > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_ElementEquality",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_ElementEquality" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeElementEquality((std::vector< int64_t > const &)*arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_ElementEquality__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< int > *arg2 = 0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) 0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_ElementEquality",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_ElementEquality" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeElementEquality((std::vector< int > const &)*arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_ElementEquality__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) 0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_ElementEquality",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_ElementEquality" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeElementEquality((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_ElementEquality__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) 0 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_ElementEquality",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_ElementEquality" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_ElementEquality" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeElementEquality((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_ElementEquality(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          _v = CanConvertToIntVar(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          {
            _v = CanConvertToIntVar(argv[3]);
            if (_v == 0) PyErr_Clear();
          }
          if (_v) {
            return _wrap_Solver_ElementEquality__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && PyInt_Check(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          _v = CanConvertToIntVar(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          {
            _v = CanConvertToIntVar(argv[3]);
            if (_v == 0) PyErr_Clear();
          }
          if (_v) {
            return _wrap_Solver_ElementEquality__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          _v = CanConvertToIntVar(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          {
            _v = CanConvertToIntVar(argv[3]);
            if (_v == 0) PyErr_Clear();
          }
          if (_v) {
            return _wrap_Solver_ElementEquality__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          _v = CanConvertToIntVar(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Solver_ElementEquality__SWIG_3(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_ElementEquality'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeElementEquality(std::vector< int64_t > const &,operations_research::IntVar *,operations_research::IntVar *)\n"
    "    operations_research::Solver::MakeElementEquality(std::vector< int > const &,operations_research::IntVar *,operations_research::IntVar *)\n"
    "    operations_research::Solver::MakeElementEquality(std::vector< operations_research::IntVar * > const &,operations_research::IntVar *,operations_research::IntVar *)\n"
    "    operations_research::Solver::MakeElementEquality(std::vector< operations_research::IntVar * > const &,operations_research::IntVar *,int64_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_AbsEquality(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_AbsEquality",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_AbsEquality" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeAbsEquality(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IndexOfConstraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) 0 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_IndexOfConstraint",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IndexOfConstraint" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_IndexOfConstraint" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeIndexOfConstraint((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_ConstraintInitialPropagateCallback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::Demon *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_ConstraintInitialPropagateCallback",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_ConstraintInitialPropagateCallback" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Demon *)(arg1)->MakeConstraintInitialPropagateCallback(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Demon, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_DelayedConstraintInitialPropagateCallback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::Demon *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_DelayedConstraintInitialPropagateCallback",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_DelayedConstraintInitialPropagateCallback" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Demon *)(arg1)->MakeDelayedConstraintInitialPropagateCallback(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Demon, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_ClosureDemon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Solver::Closure arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::Demon *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_ClosureDemon",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_ClosureDemon" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    SharedPyPtr input(obj1);
    arg2 = [input]() {
      return InvokePythonCallableReturning<void>(input.get()); 
    };
  }
  {
    try {
      result = (operations_research::Demon *)(arg1)->MakeClosureDemon(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Demon, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_BetweenCt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  int64_t arg3 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_BetweenCt",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_BetweenCt" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_BetweenCt" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_BetweenCt" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeBetweenCt(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IsBetweenCt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  int64_t arg3 ;
  int64_t arg4 ;
  operations_research::IntVar *arg5 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_IsBetweenCt",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IsBetweenCt" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_IsBetweenCt" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_IsBetweenCt" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    if (!PyObjAs(obj4, &arg5)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeIsBetweenCt(arg2,arg3,arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IsBetweenVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  int64_t arg3 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_IsBetweenVar",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IsBetweenVar" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_IsBetweenVar" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_IsBetweenVar" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      result = (operations_research::IntVar *)(arg1)->MakeIsBetweenVar(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_MemberCt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  std::vector< int64_t > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int64_t > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_MemberCt",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_MemberCt" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeMemberCt(arg2,(std::vector< int64_t > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_MemberCt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  std::vector< int > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_MemberCt",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_MemberCt" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeMemberCt(arg2,(std::vector< int > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_MemberCt(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          return _wrap_Solver_MemberCt__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && PyInt_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          return _wrap_Solver_MemberCt__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_MemberCt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeMemberCt(operations_research::IntExpr *,std::vector< int64_t > const &)\n"
    "    operations_research::Solver::MakeMemberCt(operations_research::IntExpr *,std::vector< int > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_NotMemberCt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  std::vector< int64_t > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int64_t > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_NotMemberCt",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_NotMemberCt" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeNotMemberCt(arg2,(std::vector< int64_t > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_NotMemberCt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  std::vector< int > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_NotMemberCt",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_NotMemberCt" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeNotMemberCt(arg2,(std::vector< int > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_NotMemberCt__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  std::vector< int64_t > arg3 ;
  std::vector< int64_t > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int64_t > temp3 ;
  std::vector< int64_t > temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_NotMemberCt",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_NotMemberCt" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg3 = std::move(temp3);
  }
  {
    if (!vector_input_helper(obj3, &temp4, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg4 = std::move(temp4);
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeNotMemberCt(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_NotMemberCt__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  std::vector< int > arg3 ;
  std::vector< int > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > temp3 ;
  std::vector< int > temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_NotMemberCt",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_NotMemberCt" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg3 = std::move(temp3);
  }
  {
    if (!vector_input_helper(obj3, &temp4, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg4 = std::move(temp4);
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeNotMemberCt(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_NotMemberCt(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          return _wrap_Solver_NotMemberCt__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && PyInt_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          return _wrap_Solver_NotMemberCt__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            if (!PyTuple_Check(argv[3]) && !PyList_Check(argv[3])) {
              _v = 0;
            } else {
              const bool is_tuple = PyTuple_Check(argv[3]);
              const size_t size = is_tuple ? PyTuple_Size(argv[3]) : PyList_Size(argv[3]);
              size_t i = 0;
              while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[3], i)
                  :PyList_GetItem(argv[3], i))) {
                ++i;
              }
              _v = i == size;
            }
          }
          if (_v) {
            return _wrap_Solver_NotMemberCt__SWIG_2(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && PyInt_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            if (!PyTuple_Check(argv[3]) && !PyList_Check(argv[3])) {
              _v = 0;
            } else {
              const bool is_tuple = PyTuple_Check(argv[3]);
              const size_t size = is_tuple ? PyTuple_Size(argv[3]) : PyList_Size(argv[3]);
              size_t i = 0;
              while (i < size && PyInt_Check(is_tuple ? PyTuple_GetItem(argv[3], i)
                  :PyList_GetItem(argv[3], i))) {
                ++i;
              }
              _v = i == size;
            }
          }
          if (_v) {
            return _wrap_Solver_NotMemberCt__SWIG_3(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_NotMemberCt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeNotMemberCt(operations_research::IntExpr *,std::vector< int64_t > const &)\n"
    "    operations_research::Solver::MakeNotMemberCt(operations_research::IntExpr *,std::vector< int > const &)\n"
    "    operations_research::Solver::MakeNotMemberCt(operations_research::IntExpr *,std::vector< int64_t >,std::vector< int64_t >)\n"
    "    operations_research::Solver::MakeNotMemberCt(operations_research::IntExpr *,std::vector< int >,std::vector< int >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_IsMemberCt__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  std::vector< int64_t > *arg3 = 0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int64_t > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_IsMemberCt",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IsMemberCt" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeIsMemberCt(arg2,(std::vector< int64_t > const &)*arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IsMemberCt__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  std::vector< int > *arg3 = 0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_IsMemberCt",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IsMemberCt" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeIsMemberCt(arg2,(std::vector< int > const &)*arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IsMemberCt(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            _v = CanConvertToIntVar(argv[3]);
            if (_v == 0) PyErr_Clear();
          }
          if (_v) {
            return _wrap_Solver_IsMemberCt__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && PyInt_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            _v = CanConvertToIntVar(argv[3]);
            if (_v == 0) PyErr_Clear();
          }
          if (_v) {
            return _wrap_Solver_IsMemberCt__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_IsMemberCt'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeIsMemberCt(operations_research::IntExpr *,std::vector< int64_t > const &,operations_research::IntVar *)\n"
    "    operations_research::Solver::MakeIsMemberCt(operations_research::IntExpr *,std::vector< int > const &,operations_research::IntVar *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_IsMemberVar__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  std::vector< int64_t > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int64_t > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_IsMemberVar",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IsMemberVar" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    try {
      result = (operations_research::IntVar *)(arg1)->MakeIsMemberVar(arg2,(std::vector< int64_t > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IsMemberVar__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  std::vector< int > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_IsMemberVar",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IsMemberVar" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    try {
      result = (operations_research::IntVar *)(arg1)->MakeIsMemberVar(arg2,(std::vector< int > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IsMemberVar(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          return _wrap_Solver_IsMemberVar__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && PyInt_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          return _wrap_Solver_IsMemberVar__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_IsMemberVar'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeIsMemberVar(operations_research::IntExpr *,std::vector< int64_t > const &)\n"
    "    operations_research::Solver::MakeIsMemberVar(operations_research::IntExpr *,std::vector< int > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_Count__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  int64_t arg3 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_Count",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Count" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_Count" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_Count" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeCount((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Count__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  int64_t arg3 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_Count",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Count" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_Count" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeCount((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Count(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            _v = CanConvertToIntVar(argv[3]);
            if (_v == 0) PyErr_Clear();
          }
          if (_v) {
            return _wrap_Solver_Count__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Solver_Count__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_Count'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeCount(std::vector< operations_research::IntVar * > const &,int64_t,int64_t)\n"
    "    operations_research::Solver::MakeCount(std::vector< operations_research::IntVar * > const &,int64_t,operations_research::IntVar *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_Distribute__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int64_t > *arg3 = 0 ;
  std::vector< operations_research::IntVar * > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< int64_t > temp3 ;
  std::vector< operations_research::IntVar * > temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_Distribute",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Distribute" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    if (!vector_input_helper(obj3, &temp4, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg4 = &temp4;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeDistribute((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int64_t > const &)*arg3,(std::vector< operations_research::IntVar * > const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Distribute__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  std::vector< operations_research::IntVar * > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< int > temp3 ;
  std::vector< operations_research::IntVar * > temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_Distribute",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Distribute" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    if (!vector_input_helper(obj3, &temp4, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg4 = &temp4;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeDistribute((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int > const &)*arg3,(std::vector< operations_research::IntVar * > const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Distribute__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< operations_research::IntVar * > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_Distribute",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Distribute" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeDistribute((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Distribute__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  int64_t arg3 ;
  int64_t arg4 ;
  int64_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_Distribute",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Distribute" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_Distribute" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_Distribute" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Solver_Distribute" "', argument " "5"" of type '" "int64_t""'");
  } 
  arg5 = static_cast< int64_t >(val5);
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeDistribute((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Distribute__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int64_t > *arg3 = 0 ;
  std::vector< int64_t > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< int64_t > temp3 ;
  std::vector< int64_t > temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_Distribute",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Distribute" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    if (!vector_input_helper(obj3, &temp4, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg4 = &temp4;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeDistribute((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int64_t > const &)*arg3,(std::vector< int64_t > const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Distribute__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  std::vector< int > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< int > temp3 ;
  std::vector< int > temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_Distribute",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Distribute" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    if (!vector_input_helper(obj3, &temp4, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg4 = &temp4;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeDistribute((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int > const &)*arg3,(std::vector< int > const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Distribute__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int64_t > *arg3 = 0 ;
  std::vector< int64_t > *arg4 = 0 ;
  std::vector< int64_t > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< int64_t > temp3 ;
  std::vector< int64_t > temp4 ;
  std::vector< int64_t > temp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_Distribute",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Distribute" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    if (!vector_input_helper(obj3, &temp4, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg4 = &temp4;
  }
  {
    if (!vector_input_helper(obj4, &temp5, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg5 = &temp5;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeDistribute((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int64_t > const &)*arg3,(std::vector< int64_t > const &)*arg4,(std::vector< int64_t > const &)*arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Distribute__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  std::vector< int > *arg4 = 0 ;
  std::vector< int > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< int > temp3 ;
  std::vector< int > temp4 ;
  std::vector< int > temp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_Distribute",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Distribute" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    if (!vector_input_helper(obj3, &temp4, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg4 = &temp4;
  }
  {
    if (!vector_input_helper(obj4, &temp5, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg5 = &temp5;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeDistribute((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int > const &)*arg3,(std::vector< int > const &)*arg4,(std::vector< int > const &)*arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Distribute(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          return _wrap_Solver_Distribute__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && PyInt_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            if (!PyTuple_Check(argv[3]) && !PyList_Check(argv[3])) {
              _v = 0;
            } else {
              const bool is_tuple = PyTuple_Check(argv[3]);
              const size_t size = is_tuple ? PyTuple_Size(argv[3]) : PyList_Size(argv[3]);
              size_t i = 0;
              while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[3], i)
                  :PyList_GetItem(argv[3], i))) {
                ++i;
              }
              _v = i == size;
            }
          }
          if (_v) {
            return _wrap_Solver_Distribute__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            if (!PyTuple_Check(argv[3]) && !PyList_Check(argv[3])) {
              _v = 0;
            } else {
              const bool is_tuple = PyTuple_Check(argv[3]);
              const size_t size = is_tuple ? PyTuple_Size(argv[3]) : PyList_Size(argv[3]);
              size_t i = 0;
              while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[3], i)
                  :PyList_GetItem(argv[3], i))) {
                ++i;
              }
              _v = i == size;
            }
          }
          if (_v) {
            return _wrap_Solver_Distribute__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            if (!PyTuple_Check(argv[3]) && !PyList_Check(argv[3])) {
              _v = 0;
            } else {
              const bool is_tuple = PyTuple_Check(argv[3]);
              const size_t size = is_tuple ? PyTuple_Size(argv[3]) : PyList_Size(argv[3]);
              size_t i = 0;
              while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[3], i)
                  :PyList_GetItem(argv[3], i))) {
                ++i;
              }
              _v = i == size;
            }
          }
          if (_v) {
            return _wrap_Solver_Distribute__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && PyInt_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            if (!PyTuple_Check(argv[3]) && !PyList_Check(argv[3])) {
              _v = 0;
            } else {
              const bool is_tuple = PyTuple_Check(argv[3]);
              const size_t size = is_tuple ? PyTuple_Size(argv[3]) : PyList_Size(argv[3]);
              size_t i = 0;
              while (i < size && PyInt_Check(is_tuple ? PyTuple_GetItem(argv[3], i)
                  :PyList_GetItem(argv[3], i))) {
                ++i;
              }
              _v = i == size;
            }
          }
          if (_v) {
            return _wrap_Solver_Distribute__SWIG_5(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            if (!PyTuple_Check(argv[3]) && !PyList_Check(argv[3])) {
              _v = 0;
            } else {
              const bool is_tuple = PyTuple_Check(argv[3]);
              const size_t size = is_tuple ? PyTuple_Size(argv[3]) : PyList_Size(argv[3]);
              size_t i = 0;
              while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[3], i)
                  :PyList_GetItem(argv[3], i))) {
                ++i;
              }
              _v = i == size;
            }
          }
          if (_v) {
            {
              if (!PyTuple_Check(argv[4]) && !PyList_Check(argv[4])) {
                _v = 0;
              } else {
                const bool is_tuple = PyTuple_Check(argv[4]);
                const size_t size = is_tuple ? PyTuple_Size(argv[4]) : PyList_Size(argv[4]);
                size_t i = 0;
                while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[4], i)
                    :PyList_GetItem(argv[4], i))) {
                  ++i;
                }
                _v = i == size;
              }
            }
            if (_v) {
              return _wrap_Solver_Distribute__SWIG_6(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && PyInt_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            if (!PyTuple_Check(argv[3]) && !PyList_Check(argv[3])) {
              _v = 0;
            } else {
              const bool is_tuple = PyTuple_Check(argv[3]);
              const size_t size = is_tuple ? PyTuple_Size(argv[3]) : PyList_Size(argv[3]);
              size_t i = 0;
              while (i < size && PyInt_Check(is_tuple ? PyTuple_GetItem(argv[3], i)
                  :PyList_GetItem(argv[3], i))) {
                ++i;
              }
              _v = i == size;
            }
          }
          if (_v) {
            {
              if (!PyTuple_Check(argv[4]) && !PyList_Check(argv[4])) {
                _v = 0;
              } else {
                const bool is_tuple = PyTuple_Check(argv[4]);
                const size_t size = is_tuple ? PyTuple_Size(argv[4]) : PyList_Size(argv[4]);
                size_t i = 0;
                while (i < size && PyInt_Check(is_tuple ? PyTuple_GetItem(argv[4], i)
                    :PyList_GetItem(argv[4], i))) {
                  ++i;
                }
                _v = i == size;
              }
            }
            if (_v) {
              return _wrap_Solver_Distribute__SWIG_7(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Solver_Distribute__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_Distribute'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeDistribute(std::vector< operations_research::IntVar * > const &,std::vector< int64_t > const &,std::vector< operations_research::IntVar * > const &)\n"
    "    operations_research::Solver::MakeDistribute(std::vector< operations_research::IntVar * > const &,std::vector< int > const &,std::vector< operations_research::IntVar * > const &)\n"
    "    operations_research::Solver::MakeDistribute(std::vector< operations_research::IntVar * > const &,std::vector< operations_research::IntVar * > const &)\n"
    "    operations_research::Solver::MakeDistribute(std::vector< operations_research::IntVar * > const &,int64_t,int64_t,int64_t)\n"
    "    operations_research::Solver::MakeDistribute(std::vector< operations_research::IntVar * > const &,std::vector< int64_t > const &,std::vector< int64_t > const &)\n"
    "    operations_research::Solver::MakeDistribute(std::vector< operations_research::IntVar * > const &,std::vector< int > const &,std::vector< int > const &)\n"
    "    operations_research::Solver::MakeDistribute(std::vector< operations_research::IntVar * > const &,std::vector< int64_t > const &,std::vector< int64_t > const &,std::vector< int64_t > const &)\n"
    "    operations_research::Solver::MakeDistribute(std::vector< operations_research::IntVar * > const &,std::vector< int > const &,std::vector< int > const &,std::vector< int > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_Deviation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) 0 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_Deviation",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Deviation" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_Deviation" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeDeviation((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_AllDifferent__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_AllDifferent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_AllDifferent" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeAllDifferent((std::vector< operations_research::IntVar * > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_AllDifferent__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_AllDifferent",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_AllDifferent" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_AllDifferent" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeAllDifferent((std::vector< operations_research::IntVar * > const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_AllDifferent(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        return _wrap_Solver_AllDifferent__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Solver_AllDifferent__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_AllDifferent'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeAllDifferent(std::vector< operations_research::IntVar * > const &)\n"
    "    operations_research::Solver::MakeAllDifferent(std::vector< operations_research::IntVar * > const &,bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_AllDifferentExcept(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_AllDifferentExcept",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_AllDifferentExcept" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_AllDifferentExcept" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeAllDifferentExcept((std::vector< operations_research::IntVar * > const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_SortingConstraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< operations_research::IntVar * > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_SortingConstraint",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_SortingConstraint" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeSortingConstraint((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_LexicalLess(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< operations_research::IntVar * > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_LexicalLess",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_LexicalLess" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeLexicalLess((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_LexicalLessOrEqual(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< operations_research::IntVar * > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_LexicalLessOrEqual",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_LexicalLessOrEqual" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeLexicalLessOrEqual((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_InversePermutationConstraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< operations_research::IntVar * > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_InversePermutationConstraint",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_InversePermutationConstraint" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeInversePermutationConstraint((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_NullIntersect(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< operations_research::IntVar * > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_NullIntersect",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_NullIntersect" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeNullIntersect((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_NullIntersectExcept(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< operations_research::IntVar * > temp3 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_NullIntersectExcept",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_NullIntersectExcept" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_NullIntersectExcept" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeNullIntersectExcept((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Circuit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_Circuit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Circuit" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeCircuit((std::vector< operations_research::IntVar * > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_SubCircuit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_SubCircuit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_SubCircuit" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeSubCircuit((std::vector< operations_research::IntVar * > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_PathCumul__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::vector< operations_research::IntVar * > *arg4 = 0 ;
  std::vector< operations_research::IntVar * > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< operations_research::IntVar * > temp3 ;
  std::vector< operations_research::IntVar * > temp4 ;
  std::vector< operations_research::IntVar * > temp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_PathCumul",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_PathCumul" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    if (!vector_input_helper(obj3, &temp4, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg4 = &temp4;
  }
  {
    if (!vector_input_helper(obj4, &temp5, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg5 = &temp5;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakePathCumul((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3,(std::vector< operations_research::IntVar * > const &)*arg4,(std::vector< operations_research::IntVar * > const &)*arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_DelayedPathCumul(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::vector< operations_research::IntVar * > *arg4 = 0 ;
  std::vector< operations_research::IntVar * > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< operations_research::IntVar * > temp3 ;
  std::vector< operations_research::IntVar * > temp4 ;
  std::vector< operations_research::IntVar * > temp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_DelayedPathCumul",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_DelayedPathCumul" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    if (!vector_input_helper(obj3, &temp4, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg4 = &temp4;
  }
  {
    if (!vector_input_helper(obj4, &temp5, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg5 = &temp5;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeDelayedPathCumul((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3,(std::vector< operations_research::IntVar * > const &)*arg4,(std::vector< operations_research::IntVar * > const &)*arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_PathCumul__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::vector< operations_research::IntVar * > *arg4 = 0 ;
  operations_research::Solver::IndexEvaluator2 arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< operations_research::IntVar * > temp3 ;
  std::vector< operations_research::IntVar * > temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_PathCumul",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_PathCumul" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    if (!vector_input_helper(obj3, &temp4, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg4 = &temp4;
  }
  {
    SharedPyPtr input(obj4);
    arg5 = [input](int64_t i, int64_t j) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "LL", i, j);
    };
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakePathCumul((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3,(std::vector< operations_research::IntVar * > const &)*arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_PathCumul__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::vector< operations_research::IntVar * > *arg4 = 0 ;
  std::vector< operations_research::IntVar * > *arg5 = 0 ;
  operations_research::Solver::IndexEvaluator2 arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< operations_research::IntVar * > temp3 ;
  std::vector< operations_research::IntVar * > temp4 ;
  std::vector< operations_research::IntVar * > temp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Solver_PathCumul",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_PathCumul" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    if (!vector_input_helper(obj3, &temp4, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg4 = &temp4;
  }
  {
    if (!vector_input_helper(obj4, &temp5, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg5 = &temp5;
  }
  {
    SharedPyPtr input(obj5);
    arg6 = [input](int64_t i, int64_t j) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "LL", i, j);
    };
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakePathCumul((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3,(std::vector< operations_research::IntVar * > const &)*arg4,(std::vector< operations_research::IntVar * > const &)*arg5,arg6); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_PathCumul(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            if (!PyTuple_Check(argv[3]) && !PyList_Check(argv[3])) {
              _v = 0;
            } else {
              const bool is_tuple = PyTuple_Check(argv[3]);
              const size_t size = is_tuple ? PyTuple_Size(argv[3]) : PyList_Size(argv[3]);
              size_t i = 0;
              while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[3], i)
                  :PyList_GetItem(argv[3], i))) {
                ++i;
              }
              _v = i == size;
            }
          }
          if (_v) {
            {
              if (!PyTuple_Check(argv[4]) && !PyList_Check(argv[4])) {
                _v = 0;
              } else {
                const bool is_tuple = PyTuple_Check(argv[4]);
                const size_t size = is_tuple ? PyTuple_Size(argv[4]) : PyList_Size(argv[4]);
                size_t i = 0;
                while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[4], i)
                    :PyList_GetItem(argv[4], i))) {
                  ++i;
                }
                _v = i == size;
              }
            }
            if (_v) {
              return _wrap_Solver_PathCumul__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            if (!PyTuple_Check(argv[3]) && !PyList_Check(argv[3])) {
              _v = 0;
            } else {
              const bool is_tuple = PyTuple_Check(argv[3]);
              const size_t size = is_tuple ? PyTuple_Size(argv[3]) : PyList_Size(argv[3]);
              size_t i = 0;
              while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[3], i)
                  :PyList_GetItem(argv[3], i))) {
                ++i;
              }
              _v = i == size;
            }
          }
          if (_v) {
            {
              _v = PyCallable_Check(argv[4]);
            }
            if (_v) {
              return _wrap_Solver_PathCumul__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            if (!PyTuple_Check(argv[3]) && !PyList_Check(argv[3])) {
              _v = 0;
            } else {
              const bool is_tuple = PyTuple_Check(argv[3]);
              const size_t size = is_tuple ? PyTuple_Size(argv[3]) : PyList_Size(argv[3]);
              size_t i = 0;
              while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[3], i)
                  :PyList_GetItem(argv[3], i))) {
                ++i;
              }
              _v = i == size;
            }
          }
          if (_v) {
            {
              if (!PyTuple_Check(argv[4]) && !PyList_Check(argv[4])) {
                _v = 0;
              } else {
                const bool is_tuple = PyTuple_Check(argv[4]);
                const size_t size = is_tuple ? PyTuple_Size(argv[4]) : PyList_Size(argv[4]);
                size_t i = 0;
                while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[4], i)
                    :PyList_GetItem(argv[4], i))) {
                  ++i;
                }
                _v = i == size;
              }
            }
            if (_v) {
              {
                _v = PyCallable_Check(argv[5]);
              }
              if (_v) {
                return _wrap_Solver_PathCumul__SWIG_2(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_PathCumul'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakePathCumul(std::vector< operations_research::IntVar * > const &,std::vector< operations_research::IntVar * > const &,std::vector< operations_research::IntVar * > const &,std::vector< operations_research::IntVar * > const &)\n"
    "    operations_research::Solver::MakePathCumul(std::vector< operations_research::IntVar * > const &,std::vector< operations_research::IntVar * > const &,std::vector< operations_research::IntVar * > const &,operations_research::Solver::IndexEvaluator2)\n"
    "    operations_research::Solver::MakePathCumul(std::vector< operations_research::IntVar * > const &,std::vector< operations_research::IntVar * > const &,std::vector< operations_research::IntVar * > const &,std::vector< operations_research::IntVar * > const &,operations_research::Solver::IndexEvaluator2)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_AllowedAssignments__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::IntTupleSet *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_AllowedAssignments",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_AllowedAssignments" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_operations_research__IntTupleSet,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Solver_AllowedAssignments" "', argument " "3"" of type '" "operations_research::IntTupleSet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_AllowedAssignments" "', argument " "3"" of type '" "operations_research::IntTupleSet const &""'"); 
  }
  arg3 = reinterpret_cast< operations_research::IntTupleSet * >(argp3);
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeAllowedAssignments((std::vector< operations_research::IntVar * > const &)*arg2,(operations_research::IntTupleSet const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_TransitionConstraint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::IntTupleSet *arg3 = 0 ;
  int64_t arg4 ;
  std::vector< int64_t > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  std::vector< int64_t > temp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_TransitionConstraint",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_TransitionConstraint" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_operations_research__IntTupleSet,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Solver_TransitionConstraint" "', argument " "3"" of type '" "operations_research::IntTupleSet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_TransitionConstraint" "', argument " "3"" of type '" "operations_research::IntTupleSet const &""'"); 
  }
  arg3 = reinterpret_cast< operations_research::IntTupleSet * >(argp3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_TransitionConstraint" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    if (!vector_input_helper(obj4, &temp5, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg5 = &temp5;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeTransitionConstraint((std::vector< operations_research::IntVar * > const &)*arg2,(operations_research::IntTupleSet const &)*arg3,arg4,(std::vector< int64_t > const &)*arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_TransitionConstraint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::IntTupleSet *arg3 = 0 ;
  int64_t arg4 ;
  std::vector< int > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  std::vector< int > temp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_TransitionConstraint",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_TransitionConstraint" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_operations_research__IntTupleSet,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Solver_TransitionConstraint" "', argument " "3"" of type '" "operations_research::IntTupleSet const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_TransitionConstraint" "', argument " "3"" of type '" "operations_research::IntTupleSet const &""'"); 
  }
  arg3 = reinterpret_cast< operations_research::IntTupleSet * >(argp3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_TransitionConstraint" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    if (!vector_input_helper(obj4, &temp5, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg5 = &temp5;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeTransitionConstraint((std::vector< operations_research::IntVar * > const &)*arg2,(operations_research::IntTupleSet const &)*arg3,arg4,(std::vector< int > const &)*arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_AllowedAssignments__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< std::vector< int64_t > > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< std::vector< int64_t > > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_AllowedAssignments",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_AllowedAssignments" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!PyList_Check(obj2)) {
      PyErr_SetString(PyExc_TypeError, "Expecting a list of tuples");
      SWIG_fail;
    }
    int len = PyList_Size(obj2);
    int arity = -1;
    if (len > 0) {
      temp3.resize(len);
      for (size_t i = 0; i < len; ++i) {
        PyObject *tuple = PyList_GetItem(obj2, i);
        if (!PyTuple_Check(tuple) && !PyList_Check(tuple)) {
          PyErr_SetString(PyExc_TypeError, "Expecting a sequence");
          SWIG_fail;
        }
        bool is_tuple = PyTuple_Check(tuple);
        int arity = is_tuple ? PyTuple_Size(tuple) : PyList_Size(tuple);
        temp3[i].resize(arity);
        for (size_t j = 0; j < arity; ++j) {
          bool success = PyObjAs<int64_t>(
            is_tuple ? PyTuple_GetItem(tuple, j) : PyList_GetItem(tuple, j),
            &temp3[i][j]);
          if (!success) {
            SWIG_fail;
          }
        }
      }
    }
    arg3 = &temp3;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeAllowedAssignments((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< std::vector< int64_t > > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_AllowedAssignments(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_operations_research__IntTupleSet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Solver_AllowedAssignments__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const int size = PyList_Size(argv[2]);
            bool failed = false;
            for (size_t i = 0; i < size; ++i) {
              PyObject* const tuple = PyList_GetItem(argv[2], i);
              if (!PyTuple_Check(tuple) && !PyList_Check(tuple)) {
                _v = 0;
                break;
              } else {
                const bool is_tuple = PyTuple_Check(tuple);
                const int arity = is_tuple ? PyTuple_Size(tuple) : PyList_Size(tuple);
                for (size_t j = 0; j < arity; ++j) {
                  PyObject* const entry =
                  is_tuple ? PyTuple_GetItem(tuple, j) : PyList_GetItem(tuple, j);
                  if (!SwigPyIntOrLong_Check(entry)) {
                    failed = true;
                    break;
                  }
                }
              }
              if (failed) {
                break;
              }
            }
            _v = failed ? 0 : 1;
          }
        }
        if (_v) {
          return _wrap_Solver_AllowedAssignments__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_AllowedAssignments'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeAllowedAssignments(std::vector< operations_research::IntVar * > const &,operations_research::IntTupleSet const &)\n"
    "    operations_research::Solver::MakeAllowedAssignments(std::vector< operations_research::IntVar * > const &,std::vector< std::vector< int64_t > > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_TransitionConstraint__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< std::vector< int64_t > > *arg3 = 0 ;
  int64_t arg4 ;
  std::vector< int > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< std::vector< int64_t > > temp3 ;
  long val4 ;
  int ecode4 = 0 ;
  std::vector< int > temp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_TransitionConstraint",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_TransitionConstraint" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!PyList_Check(obj2)) {
      PyErr_SetString(PyExc_TypeError, "Expecting a list of tuples");
      SWIG_fail;
    }
    int len = PyList_Size(obj2);
    int arity = -1;
    if (len > 0) {
      temp3.resize(len);
      for (size_t i = 0; i < len; ++i) {
        PyObject *tuple = PyList_GetItem(obj2, i);
        if (!PyTuple_Check(tuple) && !PyList_Check(tuple)) {
          PyErr_SetString(PyExc_TypeError, "Expecting a sequence");
          SWIG_fail;
        }
        bool is_tuple = PyTuple_Check(tuple);
        int arity = is_tuple ? PyTuple_Size(tuple) : PyList_Size(tuple);
        temp3[i].resize(arity);
        for (size_t j = 0; j < arity; ++j) {
          bool success = PyObjAs<int64_t>(
            is_tuple ? PyTuple_GetItem(tuple, j) : PyList_GetItem(tuple, j),
            &temp3[i][j]);
          if (!success) {
            SWIG_fail;
          }
        }
      }
    }
    arg3 = &temp3;
  }
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_TransitionConstraint" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    if (!vector_input_helper(obj4, &temp5, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg5 = &temp5;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeTransitionConstraint((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< std::vector< int64_t > > const &)*arg3,arg4,(std::vector< int > const &)*arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_TransitionConstraint(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_operations_research__IntTupleSet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              if (!PyTuple_Check(argv[4]) && !PyList_Check(argv[4])) {
                _v = 0;
              } else {
                const bool is_tuple = PyTuple_Check(argv[4]);
                const size_t size = is_tuple ? PyTuple_Size(argv[4]) : PyList_Size(argv[4]);
                size_t i = 0;
                while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[4], i)
                    :PyList_GetItem(argv[4], i))) {
                  ++i;
                }
                _v = i == size;
              }
            }
            if (_v) {
              return _wrap_Solver_TransitionConstraint__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_operations_research__IntTupleSet, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              if (!PyTuple_Check(argv[4]) && !PyList_Check(argv[4])) {
                _v = 0;
              } else {
                const bool is_tuple = PyTuple_Check(argv[4]);
                const size_t size = is_tuple ? PyTuple_Size(argv[4]) : PyList_Size(argv[4]);
                size_t i = 0;
                while (i < size && PyInt_Check(is_tuple ? PyTuple_GetItem(argv[4], i)
                    :PyList_GetItem(argv[4], i))) {
                  ++i;
                }
                _v = i == size;
              }
            }
            if (_v) {
              return _wrap_Solver_TransitionConstraint__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const int size = PyList_Size(argv[2]);
            bool failed = false;
            for (size_t i = 0; i < size; ++i) {
              PyObject* const tuple = PyList_GetItem(argv[2], i);
              if (!PyTuple_Check(tuple) && !PyList_Check(tuple)) {
                _v = 0;
                break;
              } else {
                const bool is_tuple = PyTuple_Check(tuple);
                const int arity = is_tuple ? PyTuple_Size(tuple) : PyList_Size(tuple);
                for (size_t j = 0; j < arity; ++j) {
                  PyObject* const entry =
                  is_tuple ? PyTuple_GetItem(tuple, j) : PyList_GetItem(tuple, j);
                  if (!SwigPyIntOrLong_Check(entry)) {
                    failed = true;
                    break;
                  }
                }
              }
              if (failed) {
                break;
              }
            }
            _v = failed ? 0 : 1;
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              if (!PyTuple_Check(argv[4]) && !PyList_Check(argv[4])) {
                _v = 0;
              } else {
                const bool is_tuple = PyTuple_Check(argv[4]);
                const size_t size = is_tuple ? PyTuple_Size(argv[4]) : PyList_Size(argv[4]);
                size_t i = 0;
                while (i < size && PyInt_Check(is_tuple ? PyTuple_GetItem(argv[4], i)
                    :PyList_GetItem(argv[4], i))) {
                  ++i;
                }
                _v = i == size;
              }
            }
            if (_v) {
              return _wrap_Solver_TransitionConstraint__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_TransitionConstraint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeTransitionConstraint(std::vector< operations_research::IntVar * > const &,operations_research::IntTupleSet const &,int64_t,std::vector< int64_t > const &)\n"
    "    operations_research::Solver::MakeTransitionConstraint(std::vector< operations_research::IntVar * > const &,operations_research::IntTupleSet const &,int64_t,std::vector< int > const &)\n"
    "    operations_research::Solver::MakeTransitionConstraint(std::vector< operations_research::IntVar * > const &,std::vector< std::vector< int64_t > > const &,int64_t,std::vector< int > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_NonOverlappingBoxesConstraint__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::vector< operations_research::IntVar * > *arg4 = 0 ;
  std::vector< operations_research::IntVar * > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< operations_research::IntVar * > temp3 ;
  std::vector< operations_research::IntVar * > temp4 ;
  std::vector< operations_research::IntVar * > temp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_NonOverlappingBoxesConstraint",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_NonOverlappingBoxesConstraint" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    if (!vector_input_helper(obj3, &temp4, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg4 = &temp4;
  }
  {
    if (!vector_input_helper(obj4, &temp5, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg5 = &temp5;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeNonOverlappingBoxesConstraint((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3,(std::vector< operations_research::IntVar * > const &)*arg4,(std::vector< operations_research::IntVar * > const &)*arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_NonOverlappingBoxesConstraint__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  absl::Span< int64_t const > arg4 ;
  absl::Span< int64_t const > arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< operations_research::IntVar * > temp3 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_NonOverlappingBoxesConstraint",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_NonOverlappingBoxesConstraint" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_absl__SpanT_int64_t_const_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Solver_NonOverlappingBoxesConstraint" "', argument " "4"" of type '" "absl::Span< int64_t const >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_NonOverlappingBoxesConstraint" "', argument " "4"" of type '" "absl::Span< int64_t const >""'");
    } else {
      absl::Span< int64_t const > * temp = reinterpret_cast< absl::Span< int64_t const > * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_absl__SpanT_int64_t_const_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Solver_NonOverlappingBoxesConstraint" "', argument " "5"" of type '" "absl::Span< int64_t const >""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_NonOverlappingBoxesConstraint" "', argument " "5"" of type '" "absl::Span< int64_t const >""'");
    } else {
      absl::Span< int64_t const > * temp = reinterpret_cast< absl::Span< int64_t const > * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeNonOverlappingBoxesConstraint((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3,arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_NonOverlappingBoxesConstraint__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  absl::Span< int const > arg4 ;
  absl::Span< int const > arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< operations_research::IntVar * > temp3 ;
  void *argp4 ;
  int res4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_NonOverlappingBoxesConstraint",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_NonOverlappingBoxesConstraint" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_absl__SpanT_int_const_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Solver_NonOverlappingBoxesConstraint" "', argument " "4"" of type '" "absl::Span< int const >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_NonOverlappingBoxesConstraint" "', argument " "4"" of type '" "absl::Span< int const >""'");
    } else {
      absl::Span< int const > * temp = reinterpret_cast< absl::Span< int const > * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_absl__SpanT_int_const_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Solver_NonOverlappingBoxesConstraint" "', argument " "5"" of type '" "absl::Span< int const >""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_NonOverlappingBoxesConstraint" "', argument " "5"" of type '" "absl::Span< int const >""'");
    } else {
      absl::Span< int const > * temp = reinterpret_cast< absl::Span< int const > * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeNonOverlappingBoxesConstraint((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3,arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_NonOverlappingBoxesConstraint(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            if (!PyTuple_Check(argv[3]) && !PyList_Check(argv[3])) {
              _v = 0;
            } else {
              const bool is_tuple = PyTuple_Check(argv[3]);
              const size_t size = is_tuple ? PyTuple_Size(argv[3]) : PyList_Size(argv[3]);
              size_t i = 0;
              while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[3], i)
                  :PyList_GetItem(argv[3], i))) {
                ++i;
              }
              _v = i == size;
            }
          }
          if (_v) {
            {
              if (!PyTuple_Check(argv[4]) && !PyList_Check(argv[4])) {
                _v = 0;
              } else {
                const bool is_tuple = PyTuple_Check(argv[4]);
                const size_t size = is_tuple ? PyTuple_Size(argv[4]) : PyList_Size(argv[4]);
                size_t i = 0;
                while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[4], i)
                    :PyList_GetItem(argv[4], i))) {
                  ++i;
                }
                _v = i == size;
              }
            }
            if (_v) {
              return _wrap_Solver_NonOverlappingBoxesConstraint__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_absl__SpanT_int64_t_const_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_absl__SpanT_int64_t_const_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Solver_NonOverlappingBoxesConstraint__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_absl__SpanT_int_const_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_absl__SpanT_int_const_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Solver_NonOverlappingBoxesConstraint__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_NonOverlappingBoxesConstraint'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeNonOverlappingBoxesConstraint(std::vector< operations_research::IntVar * > const &,std::vector< operations_research::IntVar * > const &,std::vector< operations_research::IntVar * > const &,std::vector< operations_research::IntVar * > const &)\n"
    "    operations_research::Solver::MakeNonOverlappingBoxesConstraint(std::vector< operations_research::IntVar * > const &,std::vector< operations_research::IntVar * > const &,absl::Span< int64_t const >,absl::Span< int64_t const >)\n"
    "    operations_research::Solver::MakeNonOverlappingBoxesConstraint(std::vector< operations_research::IntVar * > const &,std::vector< operations_research::IntVar * > const &,absl::Span< int const >,absl::Span< int const >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_Pack(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Pack *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_Pack",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Pack" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_Pack" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (operations_research::Pack *)(arg1)->MakePack((std::vector< operations_research::IntVar * > const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Pack, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_FixedDurationIntervalVar__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  int64_t arg4 ;
  bool arg5 ;
  std::string *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  operations_research::IntervalVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Solver_FixedDurationIntervalVar",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_FixedDurationIntervalVar" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_FixedDurationIntervalVar" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_FixedDurationIntervalVar" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_FixedDurationIntervalVar" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Solver_FixedDurationIntervalVar" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Solver_FixedDurationIntervalVar" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_FixedDurationIntervalVar" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  {
    try {
      result = (operations_research::IntervalVar *)(arg1)->MakeFixedDurationIntervalVar(arg2,arg3,arg4,arg5,(std::string const &)*arg6); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntervalVar, 0 |  0 );
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_FixedDurationIntervalVar__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  int64_t arg3 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::IntervalVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_FixedDurationIntervalVar",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_FixedDurationIntervalVar" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_FixedDurationIntervalVar" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Solver_FixedDurationIntervalVar" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_FixedDurationIntervalVar" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (operations_research::IntervalVar *)(arg1)->MakeFixedDurationIntervalVar(arg2,arg3,(std::string const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntervalVar, 0 |  0 );
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_FixedDurationIntervalVar__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  int64_t arg3 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) 0 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::IntervalVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_FixedDurationIntervalVar",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_FixedDurationIntervalVar" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_FixedDurationIntervalVar" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Solver_FixedDurationIntervalVar" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_FixedDurationIntervalVar" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  {
    try {
      result = (operations_research::IntervalVar *)(arg1)->MakeFixedDurationIntervalVar(arg2,arg3,arg4,(std::string const &)*arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntervalVar, 0 |  0 );
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_FixedDurationIntervalVar(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[7] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 6) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntVar(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Solver_FixedDurationIntervalVar__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntVar(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            _v = CanConvertToIntVar(argv[3]);
            if (_v == 0) PyErr_Clear();
          }
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Solver_FixedDurationIntervalVar__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              int res = SWIG_AsPtr_std_string(argv[5], (std::string**)(0));
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_Solver_FixedDurationIntervalVar__SWIG_0(self, args);
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_FixedDurationIntervalVar'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeFixedDurationIntervalVar(int64_t,int64_t,int64_t,bool,std::string const &)\n"
    "    operations_research::Solver::MakeFixedDurationIntervalVar(operations_research::IntVar *,int64_t,std::string const &)\n"
    "    operations_research::Solver::MakeFixedDurationIntervalVar(operations_research::IntVar *,int64_t,operations_research::IntVar *,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_FixedInterval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  std::string *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  int res4 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::IntervalVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_FixedInterval",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_FixedInterval" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_FixedInterval" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_FixedInterval" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    std::string *ptr = (std::string *)0;
    res4 = SWIG_AsPtr_std_string(obj3, &ptr);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Solver_FixedInterval" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_FixedInterval" "', argument " "4"" of type '" "std::string const &""'"); 
    }
    arg4 = ptr;
  }
  {
    try {
      result = (operations_research::IntervalVar *)(arg1)->MakeFixedInterval(arg2,arg3,(std::string const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntervalVar, 0 |  0 );
  if (SWIG_IsNewObj(res4)) delete arg4;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res4)) delete arg4;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IntervalVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  int64_t arg4 ;
  int64_t arg5 ;
  int64_t arg6 ;
  int64_t arg7 ;
  bool arg8 ;
  std::string *arg9 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  long val6 ;
  int ecode6 = 0 ;
  long val7 ;
  int ecode7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  int res9 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  operations_research::IntervalVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:Solver_IntervalVar",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IntervalVar" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_IntervalVar" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_IntervalVar" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_IntervalVar" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Solver_IntervalVar" "', argument " "5"" of type '" "int64_t""'");
  } 
  arg5 = static_cast< int64_t >(val5);
  ecode6 = SWIG_AsVal_long(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Solver_IntervalVar" "', argument " "6"" of type '" "int64_t""'");
  } 
  arg6 = static_cast< int64_t >(val6);
  ecode7 = SWIG_AsVal_long(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Solver_IntervalVar" "', argument " "7"" of type '" "int64_t""'");
  } 
  arg7 = static_cast< int64_t >(val7);
  ecode8 = SWIG_AsVal_bool(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Solver_IntervalVar" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);
  {
    std::string *ptr = (std::string *)0;
    res9 = SWIG_AsPtr_std_string(obj8, &ptr);
    if (!SWIG_IsOK(res9)) {
      SWIG_exception_fail(SWIG_ArgError(res9), "in method '" "Solver_IntervalVar" "', argument " "9"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_IntervalVar" "', argument " "9"" of type '" "std::string const &""'"); 
    }
    arg9 = ptr;
  }
  {
    try {
      result = (operations_research::IntervalVar *)(arg1)->MakeIntervalVar(arg2,arg3,arg4,arg5,arg6,arg7,arg8,(std::string const &)*arg9); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntervalVar, 0 |  0 );
  if (SWIG_IsNewObj(res9)) delete arg9;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res9)) delete arg9;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_MirrorInterval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntervalVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_MirrorInterval",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_MirrorInterval" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntervalVar *)(arg1)->MakeMirrorInterval(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntervalVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_FixedDurationStartSyncedOnStartIntervalVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  int64_t arg3 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::IntervalVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_FixedDurationStartSyncedOnStartIntervalVar",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_FixedDurationStartSyncedOnStartIntervalVar" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_FixedDurationStartSyncedOnStartIntervalVar" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_FixedDurationStartSyncedOnStartIntervalVar" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      result = (operations_research::IntervalVar *)(arg1)->MakeFixedDurationStartSyncedOnStartIntervalVar(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntervalVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_FixedDurationStartSyncedOnEndIntervalVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  int64_t arg3 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::IntervalVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_FixedDurationStartSyncedOnEndIntervalVar",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_FixedDurationStartSyncedOnEndIntervalVar" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_FixedDurationStartSyncedOnEndIntervalVar" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_FixedDurationStartSyncedOnEndIntervalVar" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      result = (operations_research::IntervalVar *)(arg1)->MakeFixedDurationStartSyncedOnEndIntervalVar(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntervalVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_FixedDurationEndSyncedOnStartIntervalVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  int64_t arg3 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::IntervalVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_FixedDurationEndSyncedOnStartIntervalVar",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_FixedDurationEndSyncedOnStartIntervalVar" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_FixedDurationEndSyncedOnStartIntervalVar" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_FixedDurationEndSyncedOnStartIntervalVar" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      result = (operations_research::IntervalVar *)(arg1)->MakeFixedDurationEndSyncedOnStartIntervalVar(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntervalVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_FixedDurationEndSyncedOnEndIntervalVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  int64_t arg3 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::IntervalVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_FixedDurationEndSyncedOnEndIntervalVar",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_FixedDurationEndSyncedOnEndIntervalVar" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_FixedDurationEndSyncedOnEndIntervalVar" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_FixedDurationEndSyncedOnEndIntervalVar" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      result = (operations_research::IntervalVar *)(arg1)->MakeFixedDurationEndSyncedOnEndIntervalVar(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntervalVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IntervalRelaxedMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntervalVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_IntervalRelaxedMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IntervalRelaxedMin" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntervalVar *)(arg1)->MakeIntervalRelaxedMin(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntervalVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_IntervalRelaxedMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntervalVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_IntervalRelaxedMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_IntervalRelaxedMax" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntervalVar *)(arg1)->MakeIntervalRelaxedMax(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntervalVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_TemporalDisjunction__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  operations_research::IntervalVar *arg3 = (operations_research::IntervalVar *) 0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_TemporalDisjunction",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_TemporalDisjunction" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeTemporalDisjunction(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_TemporalDisjunction__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  operations_research::IntervalVar *arg3 = (operations_research::IntervalVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_TemporalDisjunction",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_TemporalDisjunction" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeTemporalDisjunction(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_TemporalDisjunction(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntervalVar(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          _v = CanConvertToIntervalVar(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          return _wrap_Solver_TemporalDisjunction__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntervalVar(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          _v = CanConvertToIntervalVar(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          {
            _v = CanConvertToIntVar(argv[3]);
            if (_v == 0) PyErr_Clear();
          }
          if (_v) {
            return _wrap_Solver_TemporalDisjunction__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_TemporalDisjunction'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeTemporalDisjunction(operations_research::IntervalVar *,operations_research::IntervalVar *,operations_research::IntVar *)\n"
    "    operations_research::Solver::MakeTemporalDisjunction(operations_research::IntervalVar *,operations_research::IntervalVar *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_DisjunctiveConstraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntervalVar * > *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntervalVar * > temp2 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::DisjunctiveConstraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_DisjunctiveConstraint",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_DisjunctiveConstraint" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntervalVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntervalVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Solver_DisjunctiveConstraint" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_DisjunctiveConstraint" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = (operations_research::DisjunctiveConstraint *)(arg1)->MakeDisjunctiveConstraint((std::vector< operations_research::IntervalVar * > const &)*arg2,(std::string const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DisjunctiveConstraint, 0 |  0 );
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Cumulative__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntervalVar * > *arg2 = 0 ;
  std::vector< int64_t > *arg3 = 0 ;
  int64_t arg4 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntervalVar * > temp2 ;
  std::vector< int64_t > temp3 ;
  long val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_Cumulative",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Cumulative" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntervalVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntervalVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_Cumulative" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Solver_Cumulative" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_Cumulative" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeCumulative((std::vector< operations_research::IntervalVar * > const &)*arg2,(std::vector< int64_t > const &)*arg3,arg4,(std::string const &)*arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Cumulative__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntervalVar * > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  int64_t arg4 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntervalVar * > temp2 ;
  std::vector< int > temp3 ;
  long val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_Cumulative",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Cumulative" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntervalVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntervalVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_Cumulative" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Solver_Cumulative" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_Cumulative" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeCumulative((std::vector< operations_research::IntervalVar * > const &)*arg2,(std::vector< int > const &)*arg3,arg4,(std::string const &)*arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Cumulative__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntervalVar * > *arg2 = 0 ;
  std::vector< int64_t > *arg3 = 0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) 0 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntervalVar * > temp2 ;
  std::vector< int64_t > temp3 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_Cumulative",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Cumulative" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntervalVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntervalVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Solver_Cumulative" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_Cumulative" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeCumulative((std::vector< operations_research::IntervalVar * > const &)*arg2,(std::vector< int64_t > const &)*arg3,arg4,(std::string const &)*arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Cumulative__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntervalVar * > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) 0 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntervalVar * > temp2 ;
  std::vector< int > temp3 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_Cumulative",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Cumulative" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntervalVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntervalVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Solver_Cumulative" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_Cumulative" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeCumulative((std::vector< operations_research::IntervalVar * > const &)*arg2,(std::vector< int > const &)*arg3,arg4,(std::string const &)*arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Cumulative__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntervalVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  int64_t arg4 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntervalVar * > temp2 ;
  std::vector< operations_research::IntVar * > temp3 ;
  long val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_Cumulative",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Cumulative" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntervalVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntervalVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_Cumulative" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Solver_Cumulative" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_Cumulative" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeCumulative((std::vector< operations_research::IntervalVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3,arg4,(std::string const &)*arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Cumulative__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntervalVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  operations_research::IntVar *arg4 = (operations_research::IntVar *) 0 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntervalVar * > temp2 ;
  std::vector< operations_research::IntVar * > temp3 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_Cumulative",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Cumulative" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntervalVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntervalVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Solver_Cumulative" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_Cumulative" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeCumulative((std::vector< operations_research::IntervalVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3,arg4,(std::string const &)*arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Cumulative(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntervalVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            _v = CanConvertToIntVar(argv[3]);
            if (_v == 0) PyErr_Clear();
          }
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Solver_Cumulative__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntervalVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && PyInt_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            _v = CanConvertToIntVar(argv[3]);
            if (_v == 0) PyErr_Clear();
          }
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Solver_Cumulative__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntervalVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Solver_Cumulative__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntervalVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && PyInt_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Solver_Cumulative__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntervalVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            _v = CanConvertToIntVar(argv[3]);
            if (_v == 0) PyErr_Clear();
          }
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Solver_Cumulative__SWIG_5(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntervalVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_AsPtr_std_string(argv[4], (std::string**)(0));
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Solver_Cumulative__SWIG_4(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_Cumulative'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeCumulative(std::vector< operations_research::IntervalVar * > const &,std::vector< int64_t > const &,int64_t,std::string const &)\n"
    "    operations_research::Solver::MakeCumulative(std::vector< operations_research::IntervalVar * > const &,std::vector< int > const &,int64_t,std::string const &)\n"
    "    operations_research::Solver::MakeCumulative(std::vector< operations_research::IntervalVar * > const &,std::vector< int64_t > const &,operations_research::IntVar *,std::string const &)\n"
    "    operations_research::Solver::MakeCumulative(std::vector< operations_research::IntervalVar * > const &,std::vector< int > const &,operations_research::IntVar *,std::string const &)\n"
    "    operations_research::Solver::MakeCumulative(std::vector< operations_research::IntervalVar * > const &,std::vector< operations_research::IntVar * > const &,int64_t,std::string const &)\n"
    "    operations_research::Solver::MakeCumulative(std::vector< operations_research::IntervalVar * > const &,std::vector< operations_research::IntVar * > const &,operations_research::IntVar *,std::string const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_Cover(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntervalVar * > *arg2 = 0 ;
  operations_research::IntervalVar *arg3 = (operations_research::IntervalVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntervalVar * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_Cover",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Cover" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntervalVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntervalVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)(arg1)->MakeCover((std::vector< operations_research::IntervalVar * > const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Assignment__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::Assignment *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_Assignment",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Assignment" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    try {
      result = (operations_research::Assignment *)(arg1)->MakeAssignment(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Assignment__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::Assignment *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_Assignment",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Assignment" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Solver_Assignment" "', argument " "2"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  {
    try {
      result = (operations_research::Assignment *)(arg1)->MakeAssignment((operations_research::Assignment const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Assignment(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Solver_Assignment__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Solver_Assignment__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_Assignment'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeAssignment()\n"
    "    operations_research::Solver::MakeAssignment(operations_research::Assignment const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_FirstSolutionCollector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::SolutionCollector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_FirstSolutionCollector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_FirstSolutionCollector" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Solver_FirstSolutionCollector" "', argument " "2"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  {
    try {
      result = (operations_research::SolutionCollector *)(arg1)->MakeFirstSolutionCollector((operations_research::Assignment const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__SolutionCollector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_FirstSolutionCollector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::SolutionCollector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_FirstSolutionCollector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_FirstSolutionCollector" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    try {
      result = (operations_research::SolutionCollector *)(arg1)->MakeFirstSolutionCollector(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__SolutionCollector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_FirstSolutionCollector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Solver_FirstSolutionCollector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Solver_FirstSolutionCollector__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_FirstSolutionCollector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeFirstSolutionCollector(operations_research::Assignment const *)\n"
    "    operations_research::Solver::MakeFirstSolutionCollector()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_LastSolutionCollector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::SolutionCollector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_LastSolutionCollector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_LastSolutionCollector" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Solver_LastSolutionCollector" "', argument " "2"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  {
    try {
      result = (operations_research::SolutionCollector *)(arg1)->MakeLastSolutionCollector((operations_research::Assignment const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__SolutionCollector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_LastSolutionCollector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::SolutionCollector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_LastSolutionCollector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_LastSolutionCollector" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    try {
      result = (operations_research::SolutionCollector *)(arg1)->MakeLastSolutionCollector(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__SolutionCollector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_LastSolutionCollector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Solver_LastSolutionCollector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Solver_LastSolutionCollector__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_LastSolutionCollector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeLastSolutionCollector(operations_research::Assignment const *)\n"
    "    operations_research::Solver::MakeLastSolutionCollector()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_BestValueSolutionCollector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::SolutionCollector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_BestValueSolutionCollector",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_BestValueSolutionCollector" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Solver_BestValueSolutionCollector" "', argument " "2"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_BestValueSolutionCollector" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (operations_research::SolutionCollector *)(arg1)->MakeBestValueSolutionCollector((operations_research::Assignment const *)arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__SolutionCollector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_BestValueSolutionCollector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::SolutionCollector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_BestValueSolutionCollector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_BestValueSolutionCollector" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_BestValueSolutionCollector" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (operations_research::SolutionCollector *)(arg1)->MakeBestValueSolutionCollector(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__SolutionCollector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_BestValueSolutionCollector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Solver_BestValueSolutionCollector__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Solver_BestValueSolutionCollector__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_BestValueSolutionCollector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeBestValueSolutionCollector(operations_research::Assignment const *,bool)\n"
    "    operations_research::Solver::MakeBestValueSolutionCollector(bool)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_AllSolutionCollector__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::SolutionCollector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_AllSolutionCollector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_AllSolutionCollector" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Solver_AllSolutionCollector" "', argument " "2"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  {
    try {
      result = (operations_research::SolutionCollector *)(arg1)->MakeAllSolutionCollector((operations_research::Assignment const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__SolutionCollector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_AllSolutionCollector__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::SolutionCollector *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_AllSolutionCollector",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_AllSolutionCollector" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    try {
      result = (operations_research::SolutionCollector *)(arg1)->MakeAllSolutionCollector(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__SolutionCollector, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_AllSolutionCollector(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_Solver_AllSolutionCollector__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Solver_AllSolutionCollector__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_AllSolutionCollector'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeAllSolutionCollector(operations_research::Assignment const *)\n"
    "    operations_research::Solver::MakeAllSolutionCollector()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_Minimize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::OptimizeVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_Minimize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Minimize" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_Minimize" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (operations_research::OptimizeVar *)(arg1)->MakeMinimize(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__OptimizeVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Maximize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::OptimizeVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_Maximize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Maximize" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_Maximize" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (operations_research::OptimizeVar *)(arg1)->MakeMaximize(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__OptimizeVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Optimize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  bool arg2 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) 0 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::OptimizeVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_Optimize",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Optimize" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_Optimize" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_Optimize" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      result = (operations_research::OptimizeVar *)(arg1)->MakeOptimize(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__OptimizeVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_WeightedMinimize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int64_t > *arg3 = 0 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< int64_t > temp3 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::OptimizeVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_WeightedMinimize",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_WeightedMinimize" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_WeightedMinimize" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      result = (operations_research::OptimizeVar *)(arg1)->MakeWeightedMinimize((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int64_t > const &)*arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__OptimizeVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_WeightedMinimize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< int > temp3 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::OptimizeVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_WeightedMinimize",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_WeightedMinimize" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_WeightedMinimize" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      result = (operations_research::OptimizeVar *)(arg1)->MakeWeightedMinimize((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int > const &)*arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__OptimizeVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_WeightedMinimize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Solver_WeightedMinimize__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && PyInt_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Solver_WeightedMinimize__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_WeightedMinimize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeWeightedMinimize(std::vector< operations_research::IntVar * > const &,std::vector< int64_t > const &,int64_t)\n"
    "    operations_research::Solver::MakeWeightedMinimize(std::vector< operations_research::IntVar * > const &,std::vector< int > const &,int64_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_WeightedMaximize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int64_t > *arg3 = 0 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< int64_t > temp3 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::OptimizeVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_WeightedMaximize",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_WeightedMaximize" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_WeightedMaximize" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      result = (operations_research::OptimizeVar *)(arg1)->MakeWeightedMaximize((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int64_t > const &)*arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__OptimizeVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_WeightedMaximize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< int > temp3 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::OptimizeVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_WeightedMaximize",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_WeightedMaximize" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_WeightedMaximize" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      result = (operations_research::OptimizeVar *)(arg1)->MakeWeightedMaximize((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int > const &)*arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__OptimizeVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_WeightedMaximize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Solver_WeightedMaximize__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && PyInt_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Solver_WeightedMaximize__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_WeightedMaximize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeWeightedMaximize(std::vector< operations_research::IntVar * > const &,std::vector< int64_t > const &,int64_t)\n"
    "    operations_research::Solver::MakeWeightedMaximize(std::vector< operations_research::IntVar * > const &,std::vector< int > const &,int64_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_WeightedOptimize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  bool arg2 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::vector< int64_t > *arg4 = 0 ;
  int64_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  std::vector< operations_research::IntVar * > temp3 ;
  std::vector< int64_t > temp4 ;
  long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::OptimizeVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_WeightedOptimize",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_WeightedOptimize" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_WeightedOptimize" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    if (!vector_input_helper(obj3, &temp4, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg4 = &temp4;
  }
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Solver_WeightedOptimize" "', argument " "5"" of type '" "int64_t""'");
  } 
  arg5 = static_cast< int64_t >(val5);
  {
    try {
      result = (operations_research::OptimizeVar *)(arg1)->MakeWeightedOptimize(arg2,(std::vector< operations_research::IntVar * > const &)*arg3,(std::vector< int64_t > const &)*arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__OptimizeVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_WeightedOptimize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  bool arg2 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  std::vector< int > *arg4 = 0 ;
  int64_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  std::vector< operations_research::IntVar * > temp3 ;
  std::vector< int > temp4 ;
  long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::OptimizeVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_WeightedOptimize",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_WeightedOptimize" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_WeightedOptimize" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    if (!vector_input_helper(obj3, &temp4, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg4 = &temp4;
  }
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Solver_WeightedOptimize" "', argument " "5"" of type '" "int64_t""'");
  } 
  arg5 = static_cast< int64_t >(val5);
  {
    try {
      result = (operations_research::OptimizeVar *)(arg1)->MakeWeightedOptimize(arg2,(std::vector< operations_research::IntVar * > const &)*arg3,(std::vector< int > const &)*arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__OptimizeVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_WeightedOptimize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            if (!PyTuple_Check(argv[3]) && !PyList_Check(argv[3])) {
              _v = 0;
            } else {
              const bool is_tuple = PyTuple_Check(argv[3]);
              const size_t size = is_tuple ? PyTuple_Size(argv[3]) : PyList_Size(argv[3]);
              size_t i = 0;
              while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[3], i)
                  :PyList_GetItem(argv[3], i))) {
                ++i;
              }
              _v = i == size;
            }
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Solver_WeightedOptimize__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            if (!PyTuple_Check(argv[3]) && !PyList_Check(argv[3])) {
              _v = 0;
            } else {
              const bool is_tuple = PyTuple_Check(argv[3]);
              const size_t size = is_tuple ? PyTuple_Size(argv[3]) : PyList_Size(argv[3]);
              size_t i = 0;
              while (i < size && PyInt_Check(is_tuple ? PyTuple_GetItem(argv[3], i)
                  :PyList_GetItem(argv[3], i))) {
                ++i;
              }
              _v = i == size;
            }
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Solver_WeightedOptimize__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_WeightedOptimize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeWeightedOptimize(bool,std::vector< operations_research::IntVar * > const &,std::vector< int64_t > const &,int64_t)\n"
    "    operations_research::Solver::MakeWeightedOptimize(bool,std::vector< operations_research::IntVar * > const &,std::vector< int > const &,int64_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_TabuSearch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  bool arg2 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) 0 ;
  int64_t arg4 ;
  std::vector< operations_research::IntVar * > *arg5 = 0 ;
  int64_t arg6 ;
  int64_t arg7 ;
  double arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  std::vector< operations_research::IntVar * > temp5 ;
  long val6 ;
  int ecode6 = 0 ;
  long val7 ;
  int ecode7 = 0 ;
  double val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  operations_research::ObjectiveMonitor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Solver_TabuSearch",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_TabuSearch" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_TabuSearch" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_TabuSearch" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    if (!vector_input_helper(obj4, &temp5, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg5 = &temp5;
  }
  ecode6 = SWIG_AsVal_long(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Solver_TabuSearch" "', argument " "6"" of type '" "int64_t""'");
  } 
  arg6 = static_cast< int64_t >(val6);
  ecode7 = SWIG_AsVal_long(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Solver_TabuSearch" "', argument " "7"" of type '" "int64_t""'");
  } 
  arg7 = static_cast< int64_t >(val7);
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Solver_TabuSearch" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    try {
      result = (operations_research::ObjectiveMonitor *)(arg1)->MakeTabuSearch(arg2,arg3,arg4,(std::vector< operations_research::IntVar * > const &)*arg5,arg6,arg7,arg8); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__ObjectiveMonitor, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_SimulatedAnnealing(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  bool arg2 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) 0 ;
  int64_t arg4 ;
  int64_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::ObjectiveMonitor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_SimulatedAnnealing",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_SimulatedAnnealing" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_SimulatedAnnealing" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_SimulatedAnnealing" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Solver_SimulatedAnnealing" "', argument " "5"" of type '" "int64_t""'");
  } 
  arg5 = static_cast< int64_t >(val5);
  {
    try {
      result = (operations_research::ObjectiveMonitor *)(arg1)->MakeSimulatedAnnealing(arg2,arg3,arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__ObjectiveMonitor, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_GuidedLocalSearch__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  bool arg2 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) 0 ;
  operations_research::Solver::IndexEvaluator2 arg4 ;
  int64_t arg5 ;
  std::vector< operations_research::IntVar * > *arg6 = 0 ;
  double arg7 ;
  bool arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  std::vector< operations_research::IntVar * > temp6 ;
  double val7 ;
  int ecode7 = 0 ;
  bool val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  operations_research::ObjectiveMonitor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Solver_GuidedLocalSearch",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_GuidedLocalSearch" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_GuidedLocalSearch" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    SharedPyPtr input(obj3);
    arg4 = [input](int64_t i, int64_t j) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "LL", i, j);
    };
  }
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Solver_GuidedLocalSearch" "', argument " "5"" of type '" "int64_t""'");
  } 
  arg5 = static_cast< int64_t >(val5);
  {
    if (!vector_input_helper(obj5, &temp6, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg6 = &temp6;
  }
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Solver_GuidedLocalSearch" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  ecode8 = SWIG_AsVal_bool(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Solver_GuidedLocalSearch" "', argument " "8"" of type '" "bool""'");
  } 
  arg8 = static_cast< bool >(val8);
  {
    try {
      result = (operations_research::ObjectiveMonitor *)(arg1)->MakeGuidedLocalSearch(arg2,arg3,arg4,arg5,(std::vector< operations_research::IntVar * > const &)*arg6,arg7,arg8); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__ObjectiveMonitor, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_GuidedLocalSearch__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  bool arg2 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) 0 ;
  operations_research::Solver::IndexEvaluator2 arg4 ;
  int64_t arg5 ;
  std::vector< operations_research::IntVar * > *arg6 = 0 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  std::vector< operations_research::IntVar * > temp6 ;
  double val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  operations_research::ObjectiveMonitor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Solver_GuidedLocalSearch",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_GuidedLocalSearch" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_GuidedLocalSearch" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    SharedPyPtr input(obj3);
    arg4 = [input](int64_t i, int64_t j) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "LL", i, j);
    };
  }
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Solver_GuidedLocalSearch" "', argument " "5"" of type '" "int64_t""'");
  } 
  arg5 = static_cast< int64_t >(val5);
  {
    if (!vector_input_helper(obj5, &temp6, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg6 = &temp6;
  }
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Solver_GuidedLocalSearch" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  {
    try {
      result = (operations_research::ObjectiveMonitor *)(arg1)->MakeGuidedLocalSearch(arg2,arg3,arg4,arg5,(std::vector< operations_research::IntVar * > const &)*arg6,arg7); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__ObjectiveMonitor, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_GuidedLocalSearch__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  bool arg2 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) 0 ;
  operations_research::Solver::IndexEvaluator3 arg4 ;
  int64_t arg5 ;
  std::vector< operations_research::IntVar * > *arg6 = 0 ;
  std::vector< operations_research::IntVar * > *arg7 = 0 ;
  double arg8 ;
  bool arg9 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  std::vector< operations_research::IntVar * > temp6 ;
  std::vector< operations_research::IntVar * > temp7 ;
  double val8 ;
  int ecode8 = 0 ;
  bool val9 ;
  int ecode9 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  operations_research::ObjectiveMonitor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:Solver_GuidedLocalSearch",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_GuidedLocalSearch" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_GuidedLocalSearch" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    SharedPyPtr input(obj3);
    arg4 = [input](int64_t i, int64_t j, int64_t k) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "LLL", i, j, k);
    };
  }
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Solver_GuidedLocalSearch" "', argument " "5"" of type '" "int64_t""'");
  } 
  arg5 = static_cast< int64_t >(val5);
  {
    if (!vector_input_helper(obj5, &temp6, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg6 = &temp6;
  }
  {
    if (!vector_input_helper(obj6, &temp7, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg7 = &temp7;
  }
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Solver_GuidedLocalSearch" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  ecode9 = SWIG_AsVal_bool(obj8, &val9);
  if (!SWIG_IsOK(ecode9)) {
    SWIG_exception_fail(SWIG_ArgError(ecode9), "in method '" "Solver_GuidedLocalSearch" "', argument " "9"" of type '" "bool""'");
  } 
  arg9 = static_cast< bool >(val9);
  {
    try {
      result = (operations_research::ObjectiveMonitor *)(arg1)->MakeGuidedLocalSearch(arg2,arg3,arg4,arg5,(std::vector< operations_research::IntVar * > const &)*arg6,(std::vector< operations_research::IntVar * > const &)*arg7,arg8,arg9); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__ObjectiveMonitor, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_GuidedLocalSearch__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  bool arg2 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) 0 ;
  operations_research::Solver::IndexEvaluator3 arg4 ;
  int64_t arg5 ;
  std::vector< operations_research::IntVar * > *arg6 = 0 ;
  std::vector< operations_research::IntVar * > *arg7 = 0 ;
  double arg8 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  std::vector< operations_research::IntVar * > temp6 ;
  std::vector< operations_research::IntVar * > temp7 ;
  double val8 ;
  int ecode8 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  operations_research::ObjectiveMonitor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Solver_GuidedLocalSearch",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_GuidedLocalSearch" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_GuidedLocalSearch" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    SharedPyPtr input(obj3);
    arg4 = [input](int64_t i, int64_t j, int64_t k) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "LLL", i, j, k);
    };
  }
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Solver_GuidedLocalSearch" "', argument " "5"" of type '" "int64_t""'");
  } 
  arg5 = static_cast< int64_t >(val5);
  {
    if (!vector_input_helper(obj5, &temp6, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg6 = &temp6;
  }
  {
    if (!vector_input_helper(obj6, &temp7, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg7 = &temp7;
  }
  ecode8 = SWIG_AsVal_double(obj7, &val8);
  if (!SWIG_IsOK(ecode8)) {
    SWIG_exception_fail(SWIG_ArgError(ecode8), "in method '" "Solver_GuidedLocalSearch" "', argument " "8"" of type '" "double""'");
  } 
  arg8 = static_cast< double >(val8);
  {
    try {
      result = (operations_research::ObjectiveMonitor *)(arg1)->MakeGuidedLocalSearch(arg2,arg3,arg4,arg5,(std::vector< operations_research::IntVar * > const &)*arg6,(std::vector< operations_research::IntVar * > const &)*arg7,arg8); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__ObjectiveMonitor, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_LubyRestart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::SearchMonitor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_LubyRestart",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_LubyRestart" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_LubyRestart" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (operations_research::SearchMonitor *)(arg1)->MakeLubyRestart(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__SearchMonitor, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_ConstantRestart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::SearchMonitor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_ConstantRestart",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_ConstantRestart" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_ConstantRestart" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (operations_research::SearchMonitor *)(arg1)->MakeConstantRestart(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__SearchMonitor, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_TimeLimit__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  absl::Duration arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::RegularLimit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_TimeLimit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_TimeLimit" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_absl__Duration,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Solver_TimeLimit" "', argument " "2"" of type '" "absl::Duration""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_TimeLimit" "', argument " "2"" of type '" "absl::Duration""'");
    } else {
      absl::Duration * temp = reinterpret_cast< absl::Duration * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (operations_research::RegularLimit *)(arg1)->MakeTimeLimit(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__RegularLimit, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_TimeLimit__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::RegularLimit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_TimeLimit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_TimeLimit" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_TimeLimit" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::RegularLimit *)(arg1)->MakeTimeLimit(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__RegularLimit, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_TimeLimit(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_absl__Duration, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Solver_TimeLimit__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Solver_TimeLimit__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_TimeLimit'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeTimeLimit(absl::Duration)\n"
    "    operations_research::Solver::MakeTimeLimit(int64_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_BranchesLimit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::RegularLimit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_BranchesLimit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_BranchesLimit" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_BranchesLimit" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::RegularLimit *)(arg1)->MakeBranchesLimit(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__RegularLimit, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_FailuresLimit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::RegularLimit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_FailuresLimit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_FailuresLimit" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_FailuresLimit" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::RegularLimit *)(arg1)->MakeFailuresLimit(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__RegularLimit, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_SolutionsLimit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::RegularLimit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_SolutionsLimit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_SolutionsLimit" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_SolutionsLimit" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::RegularLimit *)(arg1)->MakeSolutionsLimit(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__RegularLimit, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Limit__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  absl::Duration arg2 ;
  int64_t arg3 ;
  int64_t arg4 ;
  int64_t arg5 ;
  bool arg6 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  operations_research::RegularLimit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Solver_Limit",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Limit" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_absl__Duration,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Solver_Limit" "', argument " "2"" of type '" "absl::Duration""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_Limit" "', argument " "2"" of type '" "absl::Duration""'");
    } else {
      absl::Duration * temp = reinterpret_cast< absl::Duration * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_Limit" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_Limit" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Solver_Limit" "', argument " "5"" of type '" "int64_t""'");
  } 
  arg5 = static_cast< int64_t >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Solver_Limit" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Solver_Limit" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  {
    try {
      result = (operations_research::RegularLimit *)(arg1)->MakeLimit(arg2,arg3,arg4,arg5,arg6,arg7); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__RegularLimit, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Limit__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  absl::Duration arg2 ;
  int64_t arg3 ;
  int64_t arg4 ;
  int64_t arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  operations_research::RegularLimit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Solver_Limit",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Limit" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_absl__Duration,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Solver_Limit" "', argument " "2"" of type '" "absl::Duration""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_Limit" "', argument " "2"" of type '" "absl::Duration""'");
    } else {
      absl::Duration * temp = reinterpret_cast< absl::Duration * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_Limit" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_Limit" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Solver_Limit" "', argument " "5"" of type '" "int64_t""'");
  } 
  arg5 = static_cast< int64_t >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Solver_Limit" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  {
    try {
      result = (operations_research::RegularLimit *)(arg1)->MakeLimit(arg2,arg3,arg4,arg5,arg6); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__RegularLimit, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Limit__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  absl::Duration arg2 ;
  int64_t arg3 ;
  int64_t arg4 ;
  int64_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::RegularLimit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_Limit",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Limit" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_absl__Duration,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Solver_Limit" "', argument " "2"" of type '" "absl::Duration""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_Limit" "', argument " "2"" of type '" "absl::Duration""'");
    } else {
      absl::Duration * temp = reinterpret_cast< absl::Duration * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_Limit" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_Limit" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Solver_Limit" "', argument " "5"" of type '" "int64_t""'");
  } 
  arg5 = static_cast< int64_t >(val5);
  {
    try {
      result = (operations_research::RegularLimit *)(arg1)->MakeLimit(arg2,arg3,arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__RegularLimit, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Limit__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::RegularLimitParameters *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::RegularLimit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_Limit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Limit" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    arg2 = new operations_research::RegularLimitParameters;
    PyObject* const pyresult = PyObject_CallMethod(
      obj1, const_cast<char*>("SerializeToString"), nullptr);
    if (pyresult != nullptr) {
      char* buffer = nullptr;
      Py_ssize_t length = 0;
      int result = PyString_AsStringAndSize(pyresult, &buffer, &length);
      if (buffer != nullptr) {
        arg2->ParseFromArray(buffer, length);
      }
      Py_DECREF(pyresult);
    }
  }
  {
    try {
      result = (operations_research::RegularLimit *)(arg1)->MakeLimit((operations_research::RegularLimitParameters const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__RegularLimit, 0 |  0 );
  {
    delete arg2;
  }
  return resultobj;
fail:
  {
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Limit__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  int64_t arg4 ;
  int64_t arg5 ;
  bool arg6 ;
  bool arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  bool val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  operations_research::RegularLimit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Solver_Limit",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Limit" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_Limit" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_Limit" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_Limit" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Solver_Limit" "', argument " "5"" of type '" "int64_t""'");
  } 
  arg5 = static_cast< int64_t >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Solver_Limit" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  ecode7 = SWIG_AsVal_bool(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Solver_Limit" "', argument " "7"" of type '" "bool""'");
  } 
  arg7 = static_cast< bool >(val7);
  {
    try {
      result = (operations_research::RegularLimit *)(arg1)->MakeLimit(arg2,arg3,arg4,arg5,arg6,arg7); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__RegularLimit, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Limit__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  int64_t arg4 ;
  int64_t arg5 ;
  bool arg6 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  bool val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  operations_research::RegularLimit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Solver_Limit",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Limit" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_Limit" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_Limit" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_Limit" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Solver_Limit" "', argument " "5"" of type '" "int64_t""'");
  } 
  arg5 = static_cast< int64_t >(val5);
  ecode6 = SWIG_AsVal_bool(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "Solver_Limit" "', argument " "6"" of type '" "bool""'");
  } 
  arg6 = static_cast< bool >(val6);
  {
    try {
      result = (operations_research::RegularLimit *)(arg1)->MakeLimit(arg2,arg3,arg4,arg5,arg6); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__RegularLimit, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Limit__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  int64_t arg4 ;
  int64_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::RegularLimit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_Limit",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Limit" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_Limit" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_Limit" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_Limit" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Solver_Limit" "', argument " "5"" of type '" "int64_t""'");
  } 
  arg5 = static_cast< int64_t >(val5);
  {
    try {
      result = (operations_research::RegularLimit *)(arg1)->MakeLimit(arg2,arg3,arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__RegularLimit, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Limit__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::SearchLimit *arg2 = (operations_research::SearchLimit *) 0 ;
  operations_research::SearchLimit *arg3 = (operations_research::SearchLimit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::SearchLimit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_Limit",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Limit" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__SearchLimit, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Solver_Limit" "', argument " "2"" of type '" "operations_research::SearchLimit *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::SearchLimit * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_operations_research__SearchLimit, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Solver_Limit" "', argument " "3"" of type '" "operations_research::SearchLimit *""'"); 
  }
  arg3 = reinterpret_cast< operations_research::SearchLimit * >(argp3);
  {
    try {
      result = (operations_research::SearchLimit *)(arg1)->MakeLimit(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__SearchLimit, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Limit(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        bool ok = false;
        PyObject* const module = PyImport_ImportModule("ortools.constraint_solver.search_limit_pb2");
        if (module != nullptr) {
          PyObject* const dict = PyModule_GetDict(module);
          if (dict != nullptr) {
            PyObject* const clss = PyDict_GetItemString(dict, "RegularLimitParameters");
            if (clss != nullptr) {
              if (PyObject_IsInstance(argv[1], clss)) {
                ok = true;
              }
            }
          }
          Py_DECREF(module);
        }
        _v = ok ? 1 : 0;
      }
      if (_v) {
        return _wrap_Solver_Limit__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_operations_research__SearchLimit, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_operations_research__SearchLimit, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Solver_Limit__SWIG_7(self, args);
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_absl__Duration, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Solver_Limit__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Solver_Limit__SWIG_6(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_absl__Duration, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_Solver_Limit__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                return _wrap_Solver_Limit__SWIG_5(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_absl__Duration, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_Solver_Limit__SWIG_0(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                int res = SWIG_AsVal_bool(argv[5], NULL);
                _v = SWIG_CheckState(res);
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_bool(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_Solver_Limit__SWIG_4(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_Limit'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeLimit(absl::Duration,int64_t,int64_t,int64_t,bool,bool)\n"
    "    operations_research::Solver::MakeLimit(absl::Duration,int64_t,int64_t,int64_t,bool)\n"
    "    operations_research::Solver::MakeLimit(absl::Duration,int64_t,int64_t,int64_t)\n"
    "    operations_research::Solver::MakeLimit(operations_research::RegularLimitParameters const &)\n"
    "    operations_research::Solver::MakeLimit(int64_t,int64_t,int64_t,int64_t,bool,bool)\n"
    "    operations_research::Solver::MakeLimit(int64_t,int64_t,int64_t,int64_t,bool)\n"
    "    operations_research::Solver::MakeLimit(int64_t,int64_t,int64_t,int64_t)\n"
    "    operations_research::Solver::MakeLimit(operations_research::SearchLimit *,operations_research::SearchLimit *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_CustomLimit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::function< bool () > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::SearchLimit *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_CustomLimit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_CustomLimit" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    SharedPyPtr input(obj1);
    arg2 = [input]() {
      return InvokePythonCallableReturning<bool>(input.get()); 
    };
  }
  {
    try {
      result = (operations_research::SearchLimit *)(arg1)->MakeCustomLimit(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__SearchLimit, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_SearchLog__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::SearchMonitor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_SearchLog",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_SearchLog" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_SearchLog" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (operations_research::SearchMonitor *)(arg1)->MakeSearchLog(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__SearchMonitor, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_SearchLog__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int arg2 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::SearchMonitor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_SearchLog",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_SearchLog" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_SearchLog" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::SearchMonitor *)(arg1)->MakeSearchLog(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__SearchMonitor, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_SearchLog__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int arg2 ;
  SwigValueWrapper< std::function< std::string () > > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::SearchMonitor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_SearchLog",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_SearchLog" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_SearchLog" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SharedPyPtr input(obj2);
    arg3 = [input]() {
      return InvokePythonCallableReturning<std::string>(input.get()); 
    };
  }
  {
    try {
      result = (operations_research::SearchMonitor *)(arg1)->MakeSearchLog(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__SearchMonitor, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_SearchLog__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int arg2 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) 0 ;
  SwigValueWrapper< std::function< std::string () > > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::SearchMonitor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_SearchLog",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_SearchLog" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_SearchLog" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    SharedPyPtr input(obj3);
    arg4 = [input]() {
      return InvokePythonCallableReturning<std::string>(input.get()); 
    };
  }
  {
    try {
      result = (operations_research::SearchMonitor *)(arg1)->MakeSearchLog(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__SearchMonitor, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_SearchLog__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int arg2 ;
  SwigValueWrapper< std::vector< operations_research::IntVar * > > arg3 ;
  SwigValueWrapper< std::function< std::string () > > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< operations_research::IntVar * > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::SearchMonitor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_SearchLog",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_SearchLog" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_SearchLog" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg3 = std::move(temp3);
  }
  {
    SharedPyPtr input(obj3);
    arg4 = [input]() {
      return InvokePythonCallableReturning<std::string>(input.get()); 
    };
  }
  {
    try {
      result = (operations_research::SearchMonitor *)(arg1)->MakeSearchLog(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__SearchMonitor, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_SearchLog__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int arg2 ;
  operations_research::OptimizeVar *arg3 = (operations_research::OptimizeVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::SearchMonitor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_SearchLog",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_SearchLog" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_SearchLog" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_operations_research__OptimizeVar, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Solver_SearchLog" "', argument " "3"" of type '" "operations_research::OptimizeVar *""'"); 
  }
  arg3 = reinterpret_cast< operations_research::OptimizeVar * >(argp3);
  {
    try {
      result = (operations_research::SearchMonitor *)(arg1)->MakeSearchLog(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__SearchMonitor, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_SearchLog__SWIG_6(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int arg2 ;
  operations_research::OptimizeVar *arg3 = (operations_research::OptimizeVar *) 0 ;
  SwigValueWrapper< std::function< std::string () > > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::SearchMonitor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_SearchLog",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_SearchLog" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_SearchLog" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_operations_research__OptimizeVar, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Solver_SearchLog" "', argument " "3"" of type '" "operations_research::OptimizeVar *""'"); 
  }
  arg3 = reinterpret_cast< operations_research::OptimizeVar * >(argp3);
  {
    SharedPyPtr input(obj3);
    arg4 = [input]() {
      return InvokePythonCallableReturning<std::string>(input.get()); 
    };
  }
  {
    try {
      result = (operations_research::SearchMonitor *)(arg1)->MakeSearchLog(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__SearchMonitor, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_SearchLog__SWIG_7(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Solver::SearchLogParameters arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::SearchMonitor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_SearchLog",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_SearchLog" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__Solver__SearchLogParameters,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Solver_SearchLog" "', argument " "2"" of type '" "operations_research::Solver::SearchLogParameters""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_SearchLog" "', argument " "2"" of type '" "operations_research::Solver::SearchLogParameters""'");
    } else {
      operations_research::Solver::SearchLogParameters * temp = reinterpret_cast< operations_research::Solver::SearchLogParameters * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (operations_research::SearchMonitor *)(arg1)->MakeSearchLog(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__SearchMonitor, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_SearchLog(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_operations_research__Solver__SearchLogParameters, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Solver_SearchLog__SWIG_7(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Solver_SearchLog__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = PyCallable_Check(argv[2]);
        }
        if (_v) {
          return _wrap_Solver_SearchLog__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_operations_research__OptimizeVar, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Solver_SearchLog__SWIG_5(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = CanConvertToIntVar(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          return _wrap_Solver_SearchLog__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = CanConvertToIntVar(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          {
            _v = PyCallable_Check(argv[3]);
          }
          if (_v) {
            return _wrap_Solver_SearchLog__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_operations_research__OptimizeVar, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = PyCallable_Check(argv[3]);
          }
          if (_v) {
            return _wrap_Solver_SearchLog__SWIG_6(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            _v = PyCallable_Check(argv[3]);
          }
          if (_v) {
            return _wrap_Solver_SearchLog__SWIG_4(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_SearchLog'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeSearchLog(int)\n"
    "    operations_research::Solver::MakeSearchLog(int,operations_research::IntVar *)\n"
    "    operations_research::Solver::MakeSearchLog(int,std::function< std::string () >)\n"
    "    operations_research::Solver::MakeSearchLog(int,operations_research::IntVar *,std::function< std::string () >)\n"
    "    operations_research::Solver::MakeSearchLog(int,std::vector< operations_research::IntVar * >,std::function< std::string () >)\n"
    "    operations_research::Solver::MakeSearchLog(int,operations_research::OptimizeVar *)\n"
    "    operations_research::Solver::MakeSearchLog(int,operations_research::OptimizeVar *,std::function< std::string () >)\n"
    "    operations_research::Solver::MakeSearchLog(operations_research::Solver::SearchLogParameters)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_SearchTrace(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::SearchMonitor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_SearchTrace",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_SearchTrace" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Solver_SearchTrace" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_SearchTrace" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (operations_research::SearchMonitor *)(arg1)->MakeSearchTrace((std::string const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__SearchMonitor, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_PrintModelVisitor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::ModelVisitor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_PrintModelVisitor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_PrintModelVisitor" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    try {
      result = (operations_research::ModelVisitor *)(arg1)->MakePrintModelVisitor(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__ModelVisitor, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_StatisticsModelVisitor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::ModelVisitor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_StatisticsModelVisitor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_StatisticsModelVisitor" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    try {
      result = (operations_research::ModelVisitor *)(arg1)->MakeStatisticsModelVisitor(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__ModelVisitor, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_AssignVariableValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Decision *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_AssignVariableValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_AssignVariableValue" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_AssignVariableValue" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (operations_research::Decision *)(arg1)->MakeAssignVariableValue(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Decision, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_VariableLessOrEqualValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Decision *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_VariableLessOrEqualValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_VariableLessOrEqualValue" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_VariableLessOrEqualValue" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (operations_research::Decision *)(arg1)->MakeVariableLessOrEqualValue(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Decision, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_VariableGreaterOrEqualValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Decision *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_VariableGreaterOrEqualValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_VariableGreaterOrEqualValue" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_VariableGreaterOrEqualValue" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (operations_research::Decision *)(arg1)->MakeVariableGreaterOrEqualValue(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Decision, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_SplitVariableDomain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  int64_t arg3 ;
  bool arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Decision *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_SplitVariableDomain",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_SplitVariableDomain" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_SplitVariableDomain" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_SplitVariableDomain" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    try {
      result = (operations_research::Decision *)(arg1)->MakeSplitVariableDomain(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Decision, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_AssignVariableValueOrFail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Decision *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_AssignVariableValueOrFail",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_AssignVariableValueOrFail" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_AssignVariableValueOrFail" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (operations_research::Decision *)(arg1)->MakeAssignVariableValueOrFail(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Decision, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_AssignVariablesValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int64_t > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< int64_t > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Decision *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_AssignVariablesValues",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_AssignVariablesValues" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    try {
      result = (operations_research::Decision *)(arg1)->MakeAssignVariablesValues((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int64_t > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Decision, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_FailDecision(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::Decision *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_FailDecision",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_FailDecision" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    try {
      result = (operations_research::Decision *)(arg1)->MakeFailDecision(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Decision, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Decision(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  SwigValueWrapper< std::function< void (operations_research::Solver *) > > arg2 ;
  SwigValueWrapper< std::function< void (operations_research::Solver *) > > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Decision *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_Decision",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Decision" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    arg2 = [obj1](operations_research::Solver* s) {
      return PyFunctionSolverToVoid(obj1, s);
    };
  }
  {
    arg3 = [obj2](operations_research::Solver* s) {
      return PyFunctionSolverToVoid(obj2, s);
    };
  }
  {
    try {
      result = (operations_research::Decision *)(arg1)->MakeDecision(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Decision, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Compose(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::DecisionBuilder * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::DecisionBuilder * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_Compose",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Compose" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::DecisionBuilder*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::DecisionBuilder*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (operations_research::DecisionBuilder *)(arg1)->Compose((std::vector< operations_research::DecisionBuilder * > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DecisionBuilder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Try(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::DecisionBuilder * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::DecisionBuilder * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_Try",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Try" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::DecisionBuilder*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::DecisionBuilder*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (operations_research::DecisionBuilder *)(arg1)->Try((std::vector< operations_research::DecisionBuilder * > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DecisionBuilder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Phase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::Solver::IntVarStrategy arg3 ;
  operations_research::Solver::IntValueStrategy arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_Phase",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Phase" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_Phase" "', argument " "3"" of type '" "operations_research::Solver::IntVarStrategy""'");
  } 
  arg3 = static_cast< operations_research::Solver::IntVarStrategy >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_Phase" "', argument " "4"" of type '" "operations_research::Solver::IntValueStrategy""'");
  } 
  arg4 = static_cast< operations_research::Solver::IntValueStrategy >(val4);
  {
    try {
      result = (operations_research::DecisionBuilder *)(arg1)->MakePhase((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DecisionBuilder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_DefaultPhase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_DefaultPhase",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_DefaultPhase" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (operations_research::DecisionBuilder *)(arg1)->MakeDefaultPhase((std::vector< operations_research::IntVar * > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DecisionBuilder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_DefaultPhase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::DefaultPhaseParameters *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_DefaultPhase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_DefaultPhase" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_operations_research__DefaultPhaseParameters,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Solver_DefaultPhase" "', argument " "3"" of type '" "operations_research::DefaultPhaseParameters const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_DefaultPhase" "', argument " "3"" of type '" "operations_research::DefaultPhaseParameters const &""'"); 
  }
  arg3 = reinterpret_cast< operations_research::DefaultPhaseParameters * >(argp3);
  {
    try {
      result = (operations_research::DecisionBuilder *)(arg1)->MakeDefaultPhase((std::vector< operations_research::IntVar * > const &)*arg2,(operations_research::DefaultPhaseParameters const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DecisionBuilder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_DefaultPhase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        return _wrap_Solver_DefaultPhase__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_operations_research__DefaultPhaseParameters, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Solver_DefaultPhase__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_DefaultPhase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeDefaultPhase(std::vector< operations_research::IntVar * > const &)\n"
    "    operations_research::Solver::MakeDefaultPhase(std::vector< operations_research::IntVar * > const &,operations_research::DefaultPhaseParameters const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_ScheduleOrPostpone(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  int64_t arg3 ;
  int64_t *arg4 = (int64_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Decision *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_ScheduleOrPostpone",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_ScheduleOrPostpone" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_ScheduleOrPostpone" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Solver_ScheduleOrPostpone" "', argument " "4"" of type '" "int64_t *""'"); 
  }
  arg4 = reinterpret_cast< int64_t * >(argp4);
  {
    try {
      result = (operations_research::Decision *)(arg1)->MakeScheduleOrPostpone(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Decision, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_ScheduleOrExpedite(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  int64_t arg3 ;
  int64_t *arg4 = (int64_t *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Decision *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_ScheduleOrExpedite",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_ScheduleOrExpedite" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_ScheduleOrExpedite" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_long, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Solver_ScheduleOrExpedite" "', argument " "4"" of type '" "int64_t *""'"); 
  }
  arg4 = reinterpret_cast< int64_t * >(argp4);
  {
    try {
      result = (operations_research::Decision *)(arg1)->MakeScheduleOrExpedite(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Decision, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_RankFirstInterval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Decision *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_RankFirstInterval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_RankFirstInterval" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_RankFirstInterval" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (operations_research::Decision *)(arg1)->MakeRankFirstInterval(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Decision, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_RankLastInterval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Decision *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_RankLastInterval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_RankLastInterval" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_RankLastInterval" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (operations_research::Decision *)(arg1)->MakeRankLastInterval(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Decision, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Phase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntervalVar * > *arg2 = 0 ;
  operations_research::Solver::IntervalStrategy arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntervalVar * > temp2 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_Phase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Phase" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntervalVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntervalVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_Phase" "', argument " "3"" of type '" "operations_research::Solver::IntervalStrategy""'");
  } 
  arg3 = static_cast< operations_research::Solver::IntervalStrategy >(val3);
  {
    try {
      result = (operations_research::DecisionBuilder *)(arg1)->MakePhase((std::vector< operations_research::IntervalVar * > const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DecisionBuilder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Phase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::SequenceVar * > *arg2 = 0 ;
  operations_research::Solver::SequenceStrategy arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::SequenceVar * > temp2 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_Phase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Phase" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::SequenceVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::SequenceVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_Phase" "', argument " "3"" of type '" "operations_research::Solver::SequenceStrategy""'");
  } 
  arg3 = static_cast< operations_research::Solver::SequenceStrategy >(val3);
  {
    try {
      result = (operations_research::DecisionBuilder *)(arg1)->MakePhase((std::vector< operations_research::SequenceVar * > const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DecisionBuilder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Phase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntervalVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Solver_Phase__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToSequenceVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Solver_Phase__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Solver_Phase__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_Phase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakePhase(std::vector< operations_research::IntVar * > const &,operations_research::Solver::IntVarStrategy,operations_research::Solver::IntValueStrategy)\n"
    "    operations_research::Solver::MakePhase(std::vector< operations_research::IntervalVar * > const &,operations_research::Solver::IntervalStrategy)\n"
    "    operations_research::Solver::MakePhase(std::vector< operations_research::SequenceVar * > const &,operations_research::Solver::SequenceStrategy)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_DecisionBuilderFromAssignment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  operations_research::DecisionBuilder *arg3 = (operations_research::DecisionBuilder *) 0 ;
  std::vector< operations_research::IntVar * > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  std::vector< operations_research::IntVar * > temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_DecisionBuilderFromAssignment",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_DecisionBuilderFromAssignment" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Solver_DecisionBuilderFromAssignment" "', argument " "2"" of type '" "operations_research::Assignment *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    if (!vector_input_helper(obj3, &temp4, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg4 = &temp4;
  }
  {
    try {
      result = (operations_research::DecisionBuilder *)(arg1)->MakeDecisionBuilderFromAssignment(arg2,arg3,(std::vector< operations_research::IntVar * > const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DecisionBuilder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_ConstraintAdder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_ConstraintAdder",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_ConstraintAdder" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::DecisionBuilder *)(arg1)->MakeConstraintAdder(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DecisionBuilder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_SolveOnce(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) 0 ;
  std::vector< operations_research::SearchMonitor * > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::SearchMonitor * > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_SolveOnce",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_SolveOnce" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<operations_research::SearchMonitor*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::SearchMonitor*) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    try {
      result = (operations_research::DecisionBuilder *)(arg1)->MakeSolveOnce(arg2,(std::vector< operations_research::SearchMonitor * > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DecisionBuilder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_NestedOptimize__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) 0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) 0 ;
  bool arg4 ;
  int64_t arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_NestedOptimize",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_NestedOptimize" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Solver_NestedOptimize" "', argument " "3"" of type '" "operations_research::Assignment *""'"); 
  }
  arg3 = reinterpret_cast< operations_research::Assignment * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_NestedOptimize" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Solver_NestedOptimize" "', argument " "5"" of type '" "int64_t""'");
  } 
  arg5 = static_cast< int64_t >(val5);
  {
    try {
      result = (operations_research::DecisionBuilder *)(arg1)->MakeNestedOptimize(arg2,arg3,arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DecisionBuilder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_NestedOptimize__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) 0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) 0 ;
  bool arg4 ;
  int64_t arg5 ;
  operations_research::SearchMonitor *arg6 = (operations_research::SearchMonitor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Solver_NestedOptimize",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_NestedOptimize" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Solver_NestedOptimize" "', argument " "3"" of type '" "operations_research::Assignment *""'"); 
  }
  arg3 = reinterpret_cast< operations_research::Assignment * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_NestedOptimize" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Solver_NestedOptimize" "', argument " "5"" of type '" "int64_t""'");
  } 
  arg5 = static_cast< int64_t >(val5);
  {
    if (!PyObjAs(obj5, &arg6)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::DecisionBuilder *)(arg1)->MakeNestedOptimize(arg2,arg3,arg4,arg5,arg6); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DecisionBuilder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_NestedOptimize__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) 0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) 0 ;
  bool arg4 ;
  int64_t arg5 ;
  operations_research::SearchMonitor *arg6 = (operations_research::SearchMonitor *) 0 ;
  operations_research::SearchMonitor *arg7 = (operations_research::SearchMonitor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Solver_NestedOptimize",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_NestedOptimize" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Solver_NestedOptimize" "', argument " "3"" of type '" "operations_research::Assignment *""'"); 
  }
  arg3 = reinterpret_cast< operations_research::Assignment * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_NestedOptimize" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Solver_NestedOptimize" "', argument " "5"" of type '" "int64_t""'");
  } 
  arg5 = static_cast< int64_t >(val5);
  {
    if (!PyObjAs(obj5, &arg6)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj6, &arg7)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::DecisionBuilder *)(arg1)->MakeNestedOptimize(arg2,arg3,arg4,arg5,arg6,arg7); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DecisionBuilder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_NestedOptimize__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) 0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) 0 ;
  bool arg4 ;
  int64_t arg5 ;
  operations_research::SearchMonitor *arg6 = (operations_research::SearchMonitor *) 0 ;
  operations_research::SearchMonitor *arg7 = (operations_research::SearchMonitor *) 0 ;
  operations_research::SearchMonitor *arg8 = (operations_research::SearchMonitor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOO:Solver_NestedOptimize",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_NestedOptimize" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Solver_NestedOptimize" "', argument " "3"" of type '" "operations_research::Assignment *""'"); 
  }
  arg3 = reinterpret_cast< operations_research::Assignment * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_NestedOptimize" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Solver_NestedOptimize" "', argument " "5"" of type '" "int64_t""'");
  } 
  arg5 = static_cast< int64_t >(val5);
  {
    if (!PyObjAs(obj5, &arg6)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj6, &arg7)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj7, &arg8)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::DecisionBuilder *)(arg1)->MakeNestedOptimize(arg2,arg3,arg4,arg5,arg6,arg7,arg8); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DecisionBuilder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_NestedOptimize__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) 0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) 0 ;
  bool arg4 ;
  int64_t arg5 ;
  operations_research::SearchMonitor *arg6 = (operations_research::SearchMonitor *) 0 ;
  operations_research::SearchMonitor *arg7 = (operations_research::SearchMonitor *) 0 ;
  operations_research::SearchMonitor *arg8 = (operations_research::SearchMonitor *) 0 ;
  operations_research::SearchMonitor *arg9 = (operations_research::SearchMonitor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  PyObject * obj7 = 0 ;
  PyObject * obj8 = 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOOOO:Solver_NestedOptimize",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6,&obj7,&obj8)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_NestedOptimize" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Solver_NestedOptimize" "', argument " "3"" of type '" "operations_research::Assignment *""'"); 
  }
  arg3 = reinterpret_cast< operations_research::Assignment * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_NestedOptimize" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Solver_NestedOptimize" "', argument " "5"" of type '" "int64_t""'");
  } 
  arg5 = static_cast< int64_t >(val5);
  {
    if (!PyObjAs(obj5, &arg6)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj6, &arg7)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj7, &arg8)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj8, &arg9)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::DecisionBuilder *)(arg1)->MakeNestedOptimize(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DecisionBuilder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_NestedOptimize__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) 0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) 0 ;
  bool arg4 ;
  int64_t arg5 ;
  std::vector< operations_research::SearchMonitor * > *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  std::vector< operations_research::SearchMonitor * > temp6 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Solver_NestedOptimize",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_NestedOptimize" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Solver_NestedOptimize" "', argument " "3"" of type '" "operations_research::Assignment *""'"); 
  }
  arg3 = reinterpret_cast< operations_research::Assignment * >(argp3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_NestedOptimize" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Solver_NestedOptimize" "', argument " "5"" of type '" "int64_t""'");
  } 
  arg5 = static_cast< int64_t >(val5);
  {
    if (!vector_input_helper(obj5, &temp6, PyObjAs<operations_research::SearchMonitor*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::SearchMonitor*) expected");
      return NULL;
    }
    arg6 = &temp6;
  }
  {
    try {
      result = (operations_research::DecisionBuilder *)(arg1)->MakeNestedOptimize(arg2,arg3,arg4,arg5,(std::vector< operations_research::SearchMonitor * > const &)*arg6); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DecisionBuilder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_NestedOptimize(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[10] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 9) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToDecisionBuilder(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Solver_NestedOptimize__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToDecisionBuilder(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                _v = CanConvertToSearchMonitor(argv[5]);
                if (_v == 0) PyErr_Clear();
              }
              if (_v) {
                return _wrap_Solver_NestedOptimize__SWIG_1(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToDecisionBuilder(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                if (!PyTuple_Check(argv[5]) && !PyList_Check(argv[5])) {
                  _v = 0;
                } else {
                  const bool is_tuple = PyTuple_Check(argv[5]);
                  const size_t size = is_tuple ? PyTuple_Size(argv[5]) : PyList_Size(argv[5]);
                  size_t i = 0;
                  while (i < size && CanConvertToSearchMonitor(is_tuple ? PyTuple_GetItem(argv[5], i)
                      :PyList_GetItem(argv[5], i))) {
                    ++i;
                  }
                  _v = i == size;
                }
              }
              if (_v) {
                return _wrap_Solver_NestedOptimize__SWIG_5(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToDecisionBuilder(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                _v = CanConvertToSearchMonitor(argv[5]);
                if (_v == 0) PyErr_Clear();
              }
              if (_v) {
                {
                  _v = CanConvertToSearchMonitor(argv[6]);
                  if (_v == 0) PyErr_Clear();
                }
                if (_v) {
                  return _wrap_Solver_NestedOptimize__SWIG_2(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToDecisionBuilder(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                _v = CanConvertToSearchMonitor(argv[5]);
                if (_v == 0) PyErr_Clear();
              }
              if (_v) {
                {
                  _v = CanConvertToSearchMonitor(argv[6]);
                  if (_v == 0) PyErr_Clear();
                }
                if (_v) {
                  {
                    _v = CanConvertToSearchMonitor(argv[7]);
                    if (_v == 0) PyErr_Clear();
                  }
                  if (_v) {
                    return _wrap_Solver_NestedOptimize__SWIG_3(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToDecisionBuilder(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            int res = SWIG_AsVal_bool(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                _v = CanConvertToSearchMonitor(argv[5]);
                if (_v == 0) PyErr_Clear();
              }
              if (_v) {
                {
                  _v = CanConvertToSearchMonitor(argv[6]);
                  if (_v == 0) PyErr_Clear();
                }
                if (_v) {
                  {
                    _v = CanConvertToSearchMonitor(argv[7]);
                    if (_v == 0) PyErr_Clear();
                  }
                  if (_v) {
                    {
                      _v = CanConvertToSearchMonitor(argv[8]);
                      if (_v == 0) PyErr_Clear();
                    }
                    if (_v) {
                      return _wrap_Solver_NestedOptimize__SWIG_4(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_NestedOptimize'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeNestedOptimize(operations_research::DecisionBuilder *,operations_research::Assignment *,bool,int64_t)\n"
    "    operations_research::Solver::MakeNestedOptimize(operations_research::DecisionBuilder *,operations_research::Assignment *,bool,int64_t,operations_research::SearchMonitor *)\n"
    "    operations_research::Solver::MakeNestedOptimize(operations_research::DecisionBuilder *,operations_research::Assignment *,bool,int64_t,operations_research::SearchMonitor *,operations_research::SearchMonitor *)\n"
    "    operations_research::Solver::MakeNestedOptimize(operations_research::DecisionBuilder *,operations_research::Assignment *,bool,int64_t,operations_research::SearchMonitor *,operations_research::SearchMonitor *,operations_research::SearchMonitor *)\n"
    "    operations_research::Solver::MakeNestedOptimize(operations_research::DecisionBuilder *,operations_research::Assignment *,bool,int64_t,operations_research::SearchMonitor *,operations_research::SearchMonitor *,operations_research::SearchMonitor *,operations_research::SearchMonitor *)\n"
    "    operations_research::Solver::MakeNestedOptimize(operations_research::DecisionBuilder *,operations_research::Assignment *,bool,int64_t,std::vector< operations_research::SearchMonitor * > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_RestoreAssignment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_RestoreAssignment",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_RestoreAssignment" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Solver_RestoreAssignment" "', argument " "2"" of type '" "operations_research::Assignment *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  {
    try {
      result = (operations_research::DecisionBuilder *)(arg1)->MakeRestoreAssignment(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DecisionBuilder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_StoreAssignment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_StoreAssignment",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_StoreAssignment" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Solver_StoreAssignment" "', argument " "2"" of type '" "operations_research::Assignment *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  {
    try {
      result = (operations_research::DecisionBuilder *)(arg1)->MakeStoreAssignment(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DecisionBuilder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Operator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::Solver::LocalSearchOperators arg3 ;
  std::function< std::vector< int > const &(int,int) > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  int val3 ;
  int ecode3 = 0 ;
  void *argp4 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::LocalSearchOperator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_Operator",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Operator" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_Operator" "', argument " "3"" of type '" "operations_research::Solver::LocalSearchOperators""'");
  } 
  arg3 = static_cast< operations_research::Solver::LocalSearchOperators >(val3);
  {
    res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_std__functionT_std__vectorT_int_t_const_Rfint_intF_t,  0  | 0);
    if (!SWIG_IsOK(res4)) {
      SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Solver_Operator" "', argument " "4"" of type '" "std::function< std::vector< int > const &(int,int) >""'"); 
    }  
    if (!argp4) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_Operator" "', argument " "4"" of type '" "std::function< std::vector< int > const &(int,int) >""'");
    } else {
      std::function< std::vector< int > const &(int,int) > * temp = reinterpret_cast< std::function< std::vector< int > const &(int,int) > * >(argp4);
      arg4 = *temp;
      if (SWIG_IsNewObj(res4)) delete temp;
    }
  }
  {
    try {
      result = (operations_research::LocalSearchOperator *)(arg1)->MakeOperator((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__LocalSearchOperator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Operator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::Solver::LocalSearchOperators arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::LocalSearchOperator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_Operator",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Operator" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_Operator" "', argument " "3"" of type '" "operations_research::Solver::LocalSearchOperators""'");
  } 
  arg3 = static_cast< operations_research::Solver::LocalSearchOperators >(val3);
  {
    try {
      result = (operations_research::LocalSearchOperator *)(arg1)->MakeOperator((std::vector< operations_research::IntVar * > const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__LocalSearchOperator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Operator__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  operations_research::Solver::LocalSearchOperators arg4 ;
  std::function< std::vector< int > const &(int,int) > arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< operations_research::IntVar * > temp3 ;
  int val4 ;
  int ecode4 = 0 ;
  void *argp5 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::LocalSearchOperator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_Operator",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Operator" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_Operator" "', argument " "4"" of type '" "operations_research::Solver::LocalSearchOperators""'");
  } 
  arg4 = static_cast< operations_research::Solver::LocalSearchOperators >(val4);
  {
    res5 = SWIG_ConvertPtr(obj4, &argp5, SWIGTYPE_p_std__functionT_std__vectorT_int_t_const_Rfint_intF_t,  0  | 0);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Solver_Operator" "', argument " "5"" of type '" "std::function< std::vector< int > const &(int,int) >""'"); 
    }  
    if (!argp5) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_Operator" "', argument " "5"" of type '" "std::function< std::vector< int > const &(int,int) >""'");
    } else {
      std::function< std::vector< int > const &(int,int) > * temp = reinterpret_cast< std::function< std::vector< int > const &(int,int) > * >(argp5);
      arg5 = *temp;
      if (SWIG_IsNewObj(res5)) delete temp;
    }
  }
  {
    try {
      result = (operations_research::LocalSearchOperator *)(arg1)->MakeOperator((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3,arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__LocalSearchOperator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Operator__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  operations_research::Solver::LocalSearchOperators arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< operations_research::IntVar * > temp3 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::LocalSearchOperator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_Operator",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Operator" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_Operator" "', argument " "4"" of type '" "operations_research::Solver::LocalSearchOperators""'");
  } 
  arg4 = static_cast< operations_research::Solver::LocalSearchOperators >(val4);
  {
    try {
      result = (operations_research::LocalSearchOperator *)(arg1)->MakeOperator((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__LocalSearchOperator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Operator__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::Solver::IndexEvaluator3 arg3 ;
  operations_research::Solver::EvaluatorLocalSearchOperators arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::LocalSearchOperator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_Operator",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Operator" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    SharedPyPtr input(obj2);
    arg3 = [input](int64_t i, int64_t j, int64_t k) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "LLL", i, j, k);
    };
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_Operator" "', argument " "4"" of type '" "operations_research::Solver::EvaluatorLocalSearchOperators""'");
  } 
  arg4 = static_cast< operations_research::Solver::EvaluatorLocalSearchOperators >(val4);
  {
    try {
      result = (operations_research::LocalSearchOperator *)(arg1)->MakeOperator((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__LocalSearchOperator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Operator__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  operations_research::Solver::IndexEvaluator3 arg4 ;
  operations_research::Solver::EvaluatorLocalSearchOperators arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< operations_research::IntVar * > temp3 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::LocalSearchOperator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_Operator",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Operator" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    SharedPyPtr input(obj3);
    arg4 = [input](int64_t i, int64_t j, int64_t k) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "LLL", i, j, k);
    };
  }
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Solver_Operator" "', argument " "5"" of type '" "operations_research::Solver::EvaluatorLocalSearchOperators""'");
  } 
  arg5 = static_cast< operations_research::Solver::EvaluatorLocalSearchOperators >(val5);
  {
    try {
      result = (operations_research::LocalSearchOperator *)(arg1)->MakeOperator((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3,arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__LocalSearchOperator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Operator(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Solver_Operator__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Solver_Operator__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          _v = PyCallable_Check(argv[2]);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Solver_Operator__SWIG_4(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          int res = SWIG_ConvertPtr(argv[3], 0, SWIGTYPE_p_std__functionT_std__vectorT_int_t_const_Rfint_intF_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Solver_Operator__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            _v = PyCallable_Check(argv[3]);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_int(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_Solver_Operator__SWIG_5(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            int res = SWIG_ConvertPtr(argv[4], 0, SWIGTYPE_p_std__functionT_std__vectorT_int_t_const_Rfint_intF_t, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Solver_Operator__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_Operator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeOperator(std::vector< operations_research::IntVar * > const &,operations_research::Solver::LocalSearchOperators,std::function< std::vector< int > const &(int,int) >)\n"
    "    operations_research::Solver::MakeOperator(std::vector< operations_research::IntVar * > const &,operations_research::Solver::LocalSearchOperators)\n"
    "    operations_research::Solver::MakeOperator(std::vector< operations_research::IntVar * > const &,std::vector< operations_research::IntVar * > const &,operations_research::Solver::LocalSearchOperators,std::function< std::vector< int > const &(int,int) >)\n"
    "    operations_research::Solver::MakeOperator(std::vector< operations_research::IntVar * > const &,std::vector< operations_research::IntVar * > const &,operations_research::Solver::LocalSearchOperators)\n"
    "    operations_research::Solver::MakeOperator(std::vector< operations_research::IntVar * > const &,operations_research::Solver::IndexEvaluator3,operations_research::Solver::EvaluatorLocalSearchOperators)\n"
    "    operations_research::Solver::MakeOperator(std::vector< operations_research::IntVar * > const &,std::vector< operations_research::IntVar * > const &,operations_research::Solver::IndexEvaluator3,operations_research::Solver::EvaluatorLocalSearchOperators)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_RandomLnsOperator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::LocalSearchOperator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_RandomLnsOperator",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_RandomLnsOperator" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_RandomLnsOperator" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (operations_research::LocalSearchOperator *)(arg1)->MakeRandomLnsOperator((std::vector< operations_research::IntVar * > const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__LocalSearchOperator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_RandomLnsOperator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  int arg3 ;
  int32_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::LocalSearchOperator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_RandomLnsOperator",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_RandomLnsOperator" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_RandomLnsOperator" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_RandomLnsOperator" "', argument " "4"" of type '" "int32_t""'");
  } 
  arg4 = static_cast< int32_t >(val4);
  {
    try {
      result = (operations_research::LocalSearchOperator *)(arg1)->MakeRandomLnsOperator((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__LocalSearchOperator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_RandomLnsOperator(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Solver_RandomLnsOperator__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_int(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_Solver_RandomLnsOperator__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_RandomLnsOperator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeRandomLnsOperator(std::vector< operations_research::IntVar * > const &,int)\n"
    "    operations_research::Solver::MakeRandomLnsOperator(std::vector< operations_research::IntVar * > const &,int,int32_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_MoveTowardTargetOperator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Assignment *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::LocalSearchOperator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_MoveTowardTargetOperator",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_MoveTowardTargetOperator" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__Assignment,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Solver_MoveTowardTargetOperator" "', argument " "2"" of type '" "operations_research::Assignment const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Solver_MoveTowardTargetOperator" "', argument " "2"" of type '" "operations_research::Assignment const &""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  {
    try {
      result = (operations_research::LocalSearchOperator *)(arg1)->MakeMoveTowardTargetOperator((operations_research::Assignment const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__LocalSearchOperator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_MoveTowardTargetOperator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int64_t > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< int64_t > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::LocalSearchOperator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_MoveTowardTargetOperator",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_MoveTowardTargetOperator" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    try {
      result = (operations_research::LocalSearchOperator *)(arg1)->MakeMoveTowardTargetOperator((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int64_t > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__LocalSearchOperator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_MoveTowardTargetOperator(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_operations_research__Assignment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Solver_MoveTowardTargetOperator__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          return _wrap_Solver_MoveTowardTargetOperator__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_MoveTowardTargetOperator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeMoveTowardTargetOperator(operations_research::Assignment const &)\n"
    "    operations_research::Solver::MakeMoveTowardTargetOperator(std::vector< operations_research::IntVar * > const &,std::vector< int64_t > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_ConcatenateOperators__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::LocalSearchOperator * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::LocalSearchOperator * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::LocalSearchOperator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_ConcatenateOperators",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_ConcatenateOperators" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::LocalSearchOperator*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::LocalSearchOperator*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (operations_research::LocalSearchOperator *)(arg1)->ConcatenateOperators((std::vector< operations_research::LocalSearchOperator * > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__LocalSearchOperator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_ConcatenateOperators__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::LocalSearchOperator * > *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::LocalSearchOperator * > temp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::LocalSearchOperator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_ConcatenateOperators",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_ConcatenateOperators" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::LocalSearchOperator*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::LocalSearchOperator*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_ConcatenateOperators" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (operations_research::LocalSearchOperator *)(arg1)->ConcatenateOperators((std::vector< operations_research::LocalSearchOperator * > const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__LocalSearchOperator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_ConcatenateOperators__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::LocalSearchOperator * > *arg2 = 0 ;
  std::function< int64_t (int,int) > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::LocalSearchOperator * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::LocalSearchOperator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_ConcatenateOperators",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_ConcatenateOperators" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::LocalSearchOperator*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::LocalSearchOperator*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    SharedPyPtr input(obj2);
    arg3 = [input](int i, int j) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "ii", i, j);
    };
  }
  {
    try {
      result = (operations_research::LocalSearchOperator *)(arg1)->ConcatenateOperators((std::vector< operations_research::LocalSearchOperator * > const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__LocalSearchOperator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_ConcatenateOperators(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToLocalSearchOperator(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        return _wrap_Solver_ConcatenateOperators__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToLocalSearchOperator(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          _v = PyCallable_Check(argv[2]);
        }
        if (_v) {
          return _wrap_Solver_ConcatenateOperators__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToLocalSearchOperator(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Solver_ConcatenateOperators__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_ConcatenateOperators'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::ConcatenateOperators(std::vector< operations_research::LocalSearchOperator * > const &)\n"
    "    operations_research::Solver::ConcatenateOperators(std::vector< operations_research::LocalSearchOperator * > const &,bool)\n"
    "    operations_research::Solver::ConcatenateOperators(std::vector< operations_research::LocalSearchOperator * > const &,std::function< int64_t (int,int) >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_RandomConcatenateOperators__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::LocalSearchOperator * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::LocalSearchOperator * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::LocalSearchOperator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_RandomConcatenateOperators",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_RandomConcatenateOperators" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::LocalSearchOperator*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::LocalSearchOperator*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (operations_research::LocalSearchOperator *)(arg1)->RandomConcatenateOperators((std::vector< operations_research::LocalSearchOperator * > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__LocalSearchOperator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_RandomConcatenateOperators__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::LocalSearchOperator * > *arg2 = 0 ;
  int32_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::LocalSearchOperator * > temp2 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::LocalSearchOperator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_RandomConcatenateOperators",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_RandomConcatenateOperators" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::LocalSearchOperator*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::LocalSearchOperator*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_RandomConcatenateOperators" "', argument " "3"" of type '" "int32_t""'");
  } 
  arg3 = static_cast< int32_t >(val3);
  {
    try {
      result = (operations_research::LocalSearchOperator *)(arg1)->RandomConcatenateOperators((std::vector< operations_research::LocalSearchOperator * > const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__LocalSearchOperator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_RandomConcatenateOperators(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToLocalSearchOperator(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        return _wrap_Solver_RandomConcatenateOperators__SWIG_0(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToLocalSearchOperator(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_Solver_RandomConcatenateOperators__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_RandomConcatenateOperators'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::RandomConcatenateOperators(std::vector< operations_research::LocalSearchOperator * > const &)\n"
    "    operations_research::Solver::RandomConcatenateOperators(std::vector< operations_research::LocalSearchOperator * > const &,int32_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_NeighborhoodLimit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::LocalSearchOperator *arg2 = (operations_research::LocalSearchOperator *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::LocalSearchOperator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_NeighborhoodLimit",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_NeighborhoodLimit" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_NeighborhoodLimit" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (operations_research::LocalSearchOperator *)(arg1)->MakeNeighborhoodLimit(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__LocalSearchOperator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_LocalSearchPhase__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  operations_research::LocalSearchPhaseParameters *arg3 = (operations_research::LocalSearchPhaseParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_LocalSearchPhase",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_LocalSearchPhase" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Solver_LocalSearchPhase" "', argument " "2"" of type '" "operations_research::Assignment *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_operations_research__LocalSearchPhaseParameters, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Solver_LocalSearchPhase" "', argument " "3"" of type '" "operations_research::LocalSearchPhaseParameters *""'"); 
  }
  arg3 = reinterpret_cast< operations_research::LocalSearchPhaseParameters * >(argp3);
  {
    try {
      result = (operations_research::DecisionBuilder *)(arg1)->MakeLocalSearchPhase(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DecisionBuilder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_LocalSearchPhase__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::DecisionBuilder *arg3 = (operations_research::DecisionBuilder *) 0 ;
  operations_research::LocalSearchPhaseParameters *arg4 = (operations_research::LocalSearchPhaseParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_LocalSearchPhase",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_LocalSearchPhase" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_operations_research__LocalSearchPhaseParameters, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Solver_LocalSearchPhase" "', argument " "4"" of type '" "operations_research::LocalSearchPhaseParameters *""'"); 
  }
  arg4 = reinterpret_cast< operations_research::LocalSearchPhaseParameters * >(argp4);
  {
    try {
      result = (operations_research::DecisionBuilder *)(arg1)->MakeLocalSearchPhase((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DecisionBuilder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_LocalSearchPhase__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::DecisionBuilder *arg3 = (operations_research::DecisionBuilder *) 0 ;
  operations_research::DecisionBuilder *arg4 = (operations_research::DecisionBuilder *) 0 ;
  operations_research::LocalSearchPhaseParameters *arg5 = (operations_research::LocalSearchPhaseParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_LocalSearchPhase",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_LocalSearchPhase" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_operations_research__LocalSearchPhaseParameters, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Solver_LocalSearchPhase" "', argument " "5"" of type '" "operations_research::LocalSearchPhaseParameters *""'"); 
  }
  arg5 = reinterpret_cast< operations_research::LocalSearchPhaseParameters * >(argp5);
  {
    try {
      result = (operations_research::DecisionBuilder *)(arg1)->MakeLocalSearchPhase((std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DecisionBuilder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_LocalSearchPhase__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::SequenceVar * > *arg2 = 0 ;
  operations_research::DecisionBuilder *arg3 = (operations_research::DecisionBuilder *) 0 ;
  operations_research::LocalSearchPhaseParameters *arg4 = (operations_research::LocalSearchPhaseParameters *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::SequenceVar * > temp2 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_LocalSearchPhase",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_LocalSearchPhase" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::SequenceVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::SequenceVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_operations_research__LocalSearchPhaseParameters, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "Solver_LocalSearchPhase" "', argument " "4"" of type '" "operations_research::LocalSearchPhaseParameters *""'"); 
  }
  arg4 = reinterpret_cast< operations_research::LocalSearchPhaseParameters * >(argp4);
  {
    try {
      result = (operations_research::DecisionBuilder *)(arg1)->MakeLocalSearchPhase((std::vector< operations_research::SequenceVar * > const &)*arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DecisionBuilder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_LocalSearchPhase(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_operations_research__LocalSearchPhaseParameters, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_Solver_LocalSearchPhase__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          _v = CanConvertToDecisionBuilder(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_operations_research__LocalSearchPhaseParameters, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Solver_LocalSearchPhase__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToSequenceVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          _v = CanConvertToDecisionBuilder(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_operations_research__LocalSearchPhaseParameters, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_Solver_LocalSearchPhase__SWIG_3(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          _v = CanConvertToDecisionBuilder(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          {
            _v = CanConvertToDecisionBuilder(argv[3]);
            if (_v == 0) PyErr_Clear();
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_operations_research__LocalSearchPhaseParameters, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Solver_LocalSearchPhase__SWIG_2(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_LocalSearchPhase'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeLocalSearchPhase(operations_research::Assignment *,operations_research::LocalSearchPhaseParameters *)\n"
    "    operations_research::Solver::MakeLocalSearchPhase(std::vector< operations_research::IntVar * > const &,operations_research::DecisionBuilder *,operations_research::LocalSearchPhaseParameters *)\n"
    "    operations_research::Solver::MakeLocalSearchPhase(std::vector< operations_research::IntVar * > const &,operations_research::DecisionBuilder *,operations_research::DecisionBuilder *,operations_research::LocalSearchPhaseParameters *)\n"
    "    operations_research::Solver::MakeLocalSearchPhase(std::vector< operations_research::SequenceVar * > const &,operations_research::DecisionBuilder *,operations_research::LocalSearchPhaseParameters *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_LocalSearchPhaseParameters__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  operations_research::LocalSearchOperator *arg3 = (operations_research::LocalSearchOperator *) 0 ;
  operations_research::DecisionBuilder *arg4 = (operations_research::DecisionBuilder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::LocalSearchPhaseParameters *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_LocalSearchPhaseParameters",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_LocalSearchPhaseParameters" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::LocalSearchPhaseParameters *)(arg1)->MakeLocalSearchPhaseParameters(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__LocalSearchPhaseParameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_LocalSearchPhaseParameters__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  operations_research::LocalSearchOperator *arg3 = (operations_research::LocalSearchOperator *) 0 ;
  operations_research::DecisionBuilder *arg4 = (operations_research::DecisionBuilder *) 0 ;
  operations_research::RegularLimit *arg5 = (operations_research::RegularLimit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::LocalSearchPhaseParameters *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_LocalSearchPhaseParameters",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_LocalSearchPhaseParameters" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_operations_research__RegularLimit, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Solver_LocalSearchPhaseParameters" "', argument " "5"" of type '" "operations_research::RegularLimit *""'"); 
  }
  arg5 = reinterpret_cast< operations_research::RegularLimit * >(argp5);
  {
    try {
      result = (operations_research::LocalSearchPhaseParameters *)(arg1)->MakeLocalSearchPhaseParameters(arg2,arg3,arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__LocalSearchPhaseParameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_LocalSearchPhaseParameters__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  operations_research::LocalSearchOperator *arg3 = (operations_research::LocalSearchOperator *) 0 ;
  operations_research::DecisionBuilder *arg4 = (operations_research::DecisionBuilder *) 0 ;
  operations_research::RegularLimit *arg5 = (operations_research::RegularLimit *) 0 ;
  operations_research::LocalSearchFilterManager *arg6 = (operations_research::LocalSearchFilterManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  operations_research::LocalSearchPhaseParameters *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Solver_LocalSearchPhaseParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_LocalSearchPhaseParameters" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_operations_research__RegularLimit, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "Solver_LocalSearchPhaseParameters" "', argument " "5"" of type '" "operations_research::RegularLimit *""'"); 
  }
  arg5 = reinterpret_cast< operations_research::RegularLimit * >(argp5);
  {
    if (!PyObjAs(obj5, &arg6)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::LocalSearchPhaseParameters *)(arg1)->MakeLocalSearchPhaseParameters(arg2,arg3,arg4,arg5,arg6); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__LocalSearchPhaseParameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_LocalSearchPhaseParameters__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  operations_research::SolutionPool *arg3 = (operations_research::SolutionPool *) 0 ;
  operations_research::LocalSearchOperator *arg4 = (operations_research::LocalSearchOperator *) 0 ;
  operations_research::DecisionBuilder *arg5 = (operations_research::DecisionBuilder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::LocalSearchPhaseParameters *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_LocalSearchPhaseParameters",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_LocalSearchPhaseParameters" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_operations_research__SolutionPool, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Solver_LocalSearchPhaseParameters" "', argument " "3"" of type '" "operations_research::SolutionPool *""'"); 
  }
  arg3 = reinterpret_cast< operations_research::SolutionPool * >(argp3);
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj4, &arg5)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::LocalSearchPhaseParameters *)(arg1)->MakeLocalSearchPhaseParameters(arg2,arg3,arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__LocalSearchPhaseParameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_LocalSearchPhaseParameters__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  operations_research::SolutionPool *arg3 = (operations_research::SolutionPool *) 0 ;
  operations_research::LocalSearchOperator *arg4 = (operations_research::LocalSearchOperator *) 0 ;
  operations_research::DecisionBuilder *arg5 = (operations_research::DecisionBuilder *) 0 ;
  operations_research::RegularLimit *arg6 = (operations_research::RegularLimit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  operations_research::LocalSearchPhaseParameters *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:Solver_LocalSearchPhaseParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_LocalSearchPhaseParameters" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_operations_research__SolutionPool, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Solver_LocalSearchPhaseParameters" "', argument " "3"" of type '" "operations_research::SolutionPool *""'"); 
  }
  arg3 = reinterpret_cast< operations_research::SolutionPool * >(argp3);
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj4, &arg5)) SWIG_fail;
  }
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_operations_research__RegularLimit, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Solver_LocalSearchPhaseParameters" "', argument " "6"" of type '" "operations_research::RegularLimit *""'"); 
  }
  arg6 = reinterpret_cast< operations_research::RegularLimit * >(argp6);
  {
    try {
      result = (operations_research::LocalSearchPhaseParameters *)(arg1)->MakeLocalSearchPhaseParameters(arg2,arg3,arg4,arg5,arg6); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__LocalSearchPhaseParameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_LocalSearchPhaseParameters__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  operations_research::SolutionPool *arg3 = (operations_research::SolutionPool *) 0 ;
  operations_research::LocalSearchOperator *arg4 = (operations_research::LocalSearchOperator *) 0 ;
  operations_research::DecisionBuilder *arg5 = (operations_research::DecisionBuilder *) 0 ;
  operations_research::RegularLimit *arg6 = (operations_research::RegularLimit *) 0 ;
  operations_research::LocalSearchFilterManager *arg7 = (operations_research::LocalSearchFilterManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp6 = 0 ;
  int res6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  operations_research::LocalSearchPhaseParameters *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Solver_LocalSearchPhaseParameters",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_LocalSearchPhaseParameters" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_operations_research__SolutionPool, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "Solver_LocalSearchPhaseParameters" "', argument " "3"" of type '" "operations_research::SolutionPool *""'"); 
  }
  arg3 = reinterpret_cast< operations_research::SolutionPool * >(argp3);
  {
    if (!PyObjAs(obj3, &arg4)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj4, &arg5)) SWIG_fail;
  }
  res6 = SWIG_ConvertPtr(obj5, &argp6,SWIGTYPE_p_operations_research__RegularLimit, 0 |  0 );
  if (!SWIG_IsOK(res6)) {
    SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "Solver_LocalSearchPhaseParameters" "', argument " "6"" of type '" "operations_research::RegularLimit *""'"); 
  }
  arg6 = reinterpret_cast< operations_research::RegularLimit * >(argp6);
  {
    if (!PyObjAs(obj6, &arg7)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::LocalSearchPhaseParameters *)(arg1)->MakeLocalSearchPhaseParameters(arg2,arg3,arg4,arg5,arg6,arg7); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__LocalSearchPhaseParameters, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_LocalSearchPhaseParameters(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[8] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 7) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntVar(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          _v = CanConvertToLocalSearchOperator(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          {
            _v = CanConvertToDecisionBuilder(argv[3]);
            if (_v == 0) PyErr_Clear();
          }
          if (_v) {
            return _wrap_Solver_LocalSearchPhaseParameters__SWIG_0(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntVar(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          _v = CanConvertToLocalSearchOperator(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          {
            _v = CanConvertToDecisionBuilder(argv[3]);
            if (_v == 0) PyErr_Clear();
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_operations_research__RegularLimit, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              return _wrap_Solver_LocalSearchPhaseParameters__SWIG_1(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntVar(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_operations_research__SolutionPool, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = CanConvertToLocalSearchOperator(argv[3]);
            if (_v == 0) PyErr_Clear();
          }
          if (_v) {
            {
              _v = CanConvertToDecisionBuilder(argv[4]);
              if (_v == 0) PyErr_Clear();
            }
            if (_v) {
              return _wrap_Solver_LocalSearchPhaseParameters__SWIG_3(self, args);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntVar(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        {
          _v = CanConvertToLocalSearchOperator(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          {
            _v = CanConvertToDecisionBuilder(argv[3]);
            if (_v == 0) PyErr_Clear();
          }
          if (_v) {
            void *vptr = 0;
            int res = SWIG_ConvertPtr(argv[4], &vptr, SWIGTYPE_p_operations_research__RegularLimit, 0);
            _v = SWIG_CheckState(res);
            if (_v) {
              {
                _v = CanConvertToLocalSearchFilterManager(argv[5]);
                if (_v == 0) PyErr_Clear();
              }
              if (_v) {
                return _wrap_Solver_LocalSearchPhaseParameters__SWIG_2(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntVar(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_operations_research__SolutionPool, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = CanConvertToLocalSearchOperator(argv[3]);
            if (_v == 0) PyErr_Clear();
          }
          if (_v) {
            {
              _v = CanConvertToDecisionBuilder(argv[4]);
              if (_v == 0) PyErr_Clear();
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_operations_research__RegularLimit, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                return _wrap_Solver_LocalSearchPhaseParameters__SWIG_4(self, args);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntVar(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_operations_research__SolutionPool, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          {
            _v = CanConvertToLocalSearchOperator(argv[3]);
            if (_v == 0) PyErr_Clear();
          }
          if (_v) {
            {
              _v = CanConvertToDecisionBuilder(argv[4]);
              if (_v == 0) PyErr_Clear();
            }
            if (_v) {
              void *vptr = 0;
              int res = SWIG_ConvertPtr(argv[5], &vptr, SWIGTYPE_p_operations_research__RegularLimit, 0);
              _v = SWIG_CheckState(res);
              if (_v) {
                {
                  _v = CanConvertToLocalSearchFilterManager(argv[6]);
                  if (_v == 0) PyErr_Clear();
                }
                if (_v) {
                  return _wrap_Solver_LocalSearchPhaseParameters__SWIG_5(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_LocalSearchPhaseParameters'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeLocalSearchPhaseParameters(operations_research::IntVar *,operations_research::LocalSearchOperator *,operations_research::DecisionBuilder *)\n"
    "    operations_research::Solver::MakeLocalSearchPhaseParameters(operations_research::IntVar *,operations_research::LocalSearchOperator *,operations_research::DecisionBuilder *,operations_research::RegularLimit *)\n"
    "    operations_research::Solver::MakeLocalSearchPhaseParameters(operations_research::IntVar *,operations_research::LocalSearchOperator *,operations_research::DecisionBuilder *,operations_research::RegularLimit *,operations_research::LocalSearchFilterManager *)\n"
    "    operations_research::Solver::MakeLocalSearchPhaseParameters(operations_research::IntVar *,operations_research::SolutionPool *,operations_research::LocalSearchOperator *,operations_research::DecisionBuilder *)\n"
    "    operations_research::Solver::MakeLocalSearchPhaseParameters(operations_research::IntVar *,operations_research::SolutionPool *,operations_research::LocalSearchOperator *,operations_research::DecisionBuilder *,operations_research::RegularLimit *)\n"
    "    operations_research::Solver::MakeLocalSearchPhaseParameters(operations_research::IntVar *,operations_research::SolutionPool *,operations_research::LocalSearchOperator *,operations_research::DecisionBuilder *,operations_research::RegularLimit *,operations_research::LocalSearchFilterManager *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_TopProgressPercent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_TopProgressPercent",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_TopProgressPercent" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    try {
      result = (int)(arg1)->TopProgressPercent(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_SearchDepth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_SearchDepth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_SearchDepth" "', argument " "1"" of type '" "operations_research::Solver const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    try {
      result = (int)((operations_research::Solver const *)arg1)->SearchDepth(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_SearchLeftDepth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_SearchLeftDepth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_SearchLeftDepth" "', argument " "1"" of type '" "operations_research::Solver const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    try {
      result = (int)((operations_research::Solver const *)arg1)->SearchLeftDepth(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_SolveDepth(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_SolveDepth",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_SolveDepth" "', argument " "1"" of type '" "operations_research::Solver const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    try {
      result = (int)((operations_research::Solver const *)arg1)->SolveDepth(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Rand64(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_Rand64",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Rand64" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_Rand64" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (int64_t)(arg1)->Rand64(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Rand32(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int32_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_Rand32",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Rand32" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_Rand32" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  {
    try {
      result = (int32_t)(arg1)->Rand32(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_ReSeed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int32_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_ReSeed",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_ReSeed" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_ReSeed" "', argument " "2"" of type '" "int32_t""'");
  } 
  arg2 = static_cast< int32_t >(val2);
  {
    try {
      (arg1)->ReSeed(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_LocalSearchProfile(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_LocalSearchProfile",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_LocalSearchProfile" "', argument " "1"" of type '" "operations_research::Solver const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    try {
      result = ((operations_research::Solver const *)arg1)->LocalSearchProfile(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Constraints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_Constraints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Constraints" "', argument " "1"" of type '" "operations_research::Solver const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    try {
      result = (int)((operations_research::Solver const *)arg1)->constraints(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_Accept(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  operations_research::ModelVisitor *arg2 = (operations_research::ModelVisitor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Solver_Accept",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_Accept" "', argument " "1"" of type '" "operations_research::Solver const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__ModelVisitor, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Solver_Accept" "', argument " "2"" of type '" "operations_research::ModelVisitor *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::ModelVisitor * >(argp2);
  {
    try {
      ((operations_research::Solver const *)arg1)->Accept(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_FinishCurrentSearch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_FinishCurrentSearch",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_FinishCurrentSearch" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    try {
      (arg1)->FinishCurrentSearch(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_RestartCurrentSearch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_RestartCurrentSearch",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_RestartCurrentSearch" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    try {
      (arg1)->RestartCurrentSearch(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_ShouldFail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver_ShouldFail",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_ShouldFail" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    try {
      (arg1)->ShouldFail(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Solver___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver___str__" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    try {
      result = operations_research_Solver___str__(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_TreeNoCycle__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  operations_research::Solver::IndexFilter1 arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< operations_research::IntVar * > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_TreeNoCycle",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_TreeNoCycle" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    SharedPyPtr input(obj3);
    arg4 = [input](int64_t index) {
      return InvokePythonCallableReturning<bool>(input.get(), "(L)", index);
    };
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_Solver_TreeNoCycle__SWIG_0(arg1,(std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_TreeNoCycle__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< operations_research::IntVar * > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_TreeNoCycle",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_TreeNoCycle" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_Solver_TreeNoCycle__SWIG_0(arg1,(std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_TreeNoCycle(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          return _wrap_Solver_TreeNoCycle__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            _v = PyCallable_Check(argv[3]);
          }
          if (_v) {
            return _wrap_Solver_TreeNoCycle__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_TreeNoCycle'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::TreeNoCycle(std::vector< operations_research::IntVar * > const &,std::vector< operations_research::IntVar * > const &,operations_research::Solver::IndexFilter1)\n"
    "    operations_research::Solver::TreeNoCycle(std::vector< operations_research::IntVar * > const &,std::vector< operations_research::IntVar * > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_SearchLogWithCallback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  int arg2 ;
  SwigValueWrapper< std::function< std::string () > > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::SearchMonitor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_SearchLogWithCallback",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_SearchLogWithCallback" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_SearchLogWithCallback" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    SharedPyPtr input(obj2);
    arg3 = [input]() {
      return InvokePythonCallableReturning<std::string>(input.get()); 
    };
  }
  {
    try {
      result = (operations_research::SearchMonitor *)operations_research_Solver_SearchLogWithCallback(arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__SearchMonitor, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_ElementFunction(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::function< int64_t (int64_t) > arg2 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Solver_ElementFunction",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_ElementFunction" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    SharedPyPtr input(obj1);
    arg2 = [input](int64_t index) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "(L)", index);
    };
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntExpr *)operations_research_Solver_ElementFunction(arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_VarEvalValStrPhase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::function< int64_t (int64_t) > arg3 ;
  operations_research::Solver::IntValueStrategy arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_VarEvalValStrPhase",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_VarEvalValStrPhase" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    SharedPyPtr input(obj2);
    arg3 = [input](int64_t index) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "(L)", index);
    };
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_VarEvalValStrPhase" "', argument " "4"" of type '" "operations_research::Solver::IntValueStrategy""'");
  } 
  arg4 = static_cast< operations_research::Solver::IntValueStrategy >(val4);
  {
    try {
      result = (operations_research::DecisionBuilder *)operations_research_Solver_VarEvalValStrPhase(arg1,(std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DecisionBuilder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_VarStrValEvalPhase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::Solver::IntVarStrategy arg3 ;
  operations_research::Solver::IndexEvaluator2 arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_VarStrValEvalPhase",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_VarStrValEvalPhase" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_VarStrValEvalPhase" "', argument " "3"" of type '" "operations_research::Solver::IntVarStrategy""'");
  } 
  arg3 = static_cast< operations_research::Solver::IntVarStrategy >(val3);
  {
    SharedPyPtr input(obj3);
    arg4 = [input](int64_t i, int64_t j) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "LL", i, j);
    };
  }
  {
    try {
      result = (operations_research::DecisionBuilder *)operations_research_Solver_VarStrValEvalPhase(arg1,(std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DecisionBuilder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_VarEvalValEvalPhase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::function< int64_t (int64_t) > arg3 ;
  operations_research::Solver::IndexEvaluator2 arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_VarEvalValEvalPhase",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_VarEvalValEvalPhase" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    SharedPyPtr input(obj2);
    arg3 = [input](int64_t index) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "(L)", index);
    };
  }
  {
    SharedPyPtr input(obj3);
    arg4 = [input](int64_t i, int64_t j) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "LL", i, j);
    };
  }
  {
    try {
      result = (operations_research::DecisionBuilder *)operations_research_Solver_VarEvalValEvalPhase(arg1,(std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DecisionBuilder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_VarStrValEvalTieBreakPhase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::Solver::IntVarStrategy arg3 ;
  operations_research::Solver::IndexEvaluator2 arg4 ;
  std::function< int64_t (int64_t) > arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_VarStrValEvalTieBreakPhase",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_VarStrValEvalTieBreakPhase" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Solver_VarStrValEvalTieBreakPhase" "', argument " "3"" of type '" "operations_research::Solver::IntVarStrategy""'");
  } 
  arg3 = static_cast< operations_research::Solver::IntVarStrategy >(val3);
  {
    SharedPyPtr input(obj3);
    arg4 = [input](int64_t i, int64_t j) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "LL", i, j);
    };
  }
  {
    SharedPyPtr input(obj4);
    arg5 = [input](int64_t index) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "(L)", index);
    };
  }
  {
    try {
      result = (operations_research::DecisionBuilder *)operations_research_Solver_VarStrValEvalTieBreakPhase(arg1,(std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DecisionBuilder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_VarEvalValEvalTieBreakPhase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::function< int64_t (int64_t) > arg3 ;
  operations_research::Solver::IndexEvaluator2 arg4 ;
  std::function< int64_t (int64_t) > arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_VarEvalValEvalTieBreakPhase",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_VarEvalValEvalTieBreakPhase" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    SharedPyPtr input(obj2);
    arg3 = [input](int64_t index) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "(L)", index);
    };
  }
  {
    SharedPyPtr input(obj3);
    arg4 = [input](int64_t i, int64_t j) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "LL", i, j);
    };
  }
  {
    SharedPyPtr input(obj4);
    arg5 = [input](int64_t index) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "(L)", index);
    };
  }
  {
    try {
      result = (operations_research::DecisionBuilder *)operations_research_Solver_VarEvalValEvalTieBreakPhase(arg1,(std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DecisionBuilder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_EvalEvalStrPhase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::Solver::IndexEvaluator2 arg3 ;
  operations_research::Solver::EvaluatorStrategy arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_EvalEvalStrPhase",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_EvalEvalStrPhase" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    SharedPyPtr input(obj2);
    arg3 = [input](int64_t i, int64_t j) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "LL", i, j);
    };
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_EvalEvalStrPhase" "', argument " "4"" of type '" "operations_research::Solver::EvaluatorStrategy""'");
  } 
  arg4 = static_cast< operations_research::Solver::EvaluatorStrategy >(val4);
  {
    try {
      result = (operations_research::DecisionBuilder *)operations_research_Solver_EvalEvalStrPhase(arg1,(std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DecisionBuilder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_EvalEvalStrTieBreakPhase(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::Solver::IndexEvaluator2 arg3 ;
  operations_research::Solver::IndexEvaluator1 arg4 ;
  operations_research::Solver::EvaluatorStrategy arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Solver_EvalEvalStrTieBreakPhase",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_EvalEvalStrTieBreakPhase" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    SharedPyPtr input(obj2);
    arg3 = [input](int64_t i, int64_t j) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "LL", i, j);
    };
  }
  {
    SharedPyPtr input(obj3);
    arg4 = [input](int64_t index) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "(L)", index);
    };
  }
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Solver_EvalEvalStrTieBreakPhase" "', argument " "5"" of type '" "operations_research::Solver::EvaluatorStrategy""'");
  } 
  arg5 = static_cast< operations_research::Solver::EvaluatorStrategy >(val5);
  {
    try {
      result = (operations_research::DecisionBuilder *)operations_research_Solver_EvalEvalStrTieBreakPhase(arg1,(std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DecisionBuilder, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_GuidedLocalSearch__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  bool arg2 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  operations_research::Solver::IndexEvaluator2 arg4 ;
  int64_t arg5 ;
  std::vector< operations_research::IntVar * > *arg6 = 0 ;
  double arg7 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  std::vector< operations_research::IntVar * > temp6 ;
  double val7 ;
  int ecode7 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  PyObject * obj6 = 0 ;
  operations_research::SearchMonitor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOOO:Solver_GuidedLocalSearch",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_GuidedLocalSearch" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Solver_GuidedLocalSearch" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    SharedPyPtr input(obj3);
    arg4 = [input](int64_t i, int64_t j) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "LL", i, j);
    };
  }
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "Solver_GuidedLocalSearch" "', argument " "5"" of type '" "int64_t""'");
  } 
  arg5 = static_cast< int64_t >(val5);
  {
    if (!vector_input_helper(obj5, &temp6, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg6 = &temp6;
  }
  ecode7 = SWIG_AsVal_double(obj6, &val7);
  if (!SWIG_IsOK(ecode7)) {
    SWIG_exception_fail(SWIG_ArgError(ecode7), "in method '" "Solver_GuidedLocalSearch" "', argument " "7"" of type '" "double""'");
  } 
  arg7 = static_cast< double >(val7);
  {
    try {
      result = (operations_research::SearchMonitor *)operations_research_Solver_GuidedLocalSearch__SWIG_4(arg1,arg2,arg3,arg4,arg5,(std::vector< operations_research::IntVar * > const &)*arg6,arg7); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__SearchMonitor, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Solver_GuidedLocalSearch(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[10] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 9) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = CanConvertToIntVar(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          {
            _v = PyCallable_Check(argv[3]);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                if (!PyTuple_Check(argv[5]) && !PyList_Check(argv[5])) {
                  _v = 0;
                } else {
                  const bool is_tuple = PyTuple_Check(argv[5]);
                  const size_t size = is_tuple ? PyTuple_Size(argv[5]) : PyList_Size(argv[5]);
                  size_t i = 0;
                  while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[5], i)
                      :PyList_GetItem(argv[5], i))) {
                    ++i;
                  }
                  _v = i == size;
                }
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_Solver_GuidedLocalSearch__SWIG_1(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = CanConvertToIntVar(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          {
            _v = PyCallable_Check(argv[3]);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                if (!PyTuple_Check(argv[5]) && !PyList_Check(argv[5])) {
                  _v = 0;
                } else {
                  const bool is_tuple = PyTuple_Check(argv[5]);
                  const size_t size = is_tuple ? PyTuple_Size(argv[5]) : PyList_Size(argv[5]);
                  size_t i = 0;
                  while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[5], i)
                      :PyList_GetItem(argv[5], i))) {
                    ++i;
                  }
                  _v = i == size;
                }
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  return _wrap_Solver_GuidedLocalSearch__SWIG_4(self, args);
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = CanConvertToIntVar(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          {
            _v = PyCallable_Check(argv[3]);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                if (!PyTuple_Check(argv[5]) && !PyList_Check(argv[5])) {
                  _v = 0;
                } else {
                  const bool is_tuple = PyTuple_Check(argv[5]);
                  const size_t size = is_tuple ? PyTuple_Size(argv[5]) : PyList_Size(argv[5]);
                  size_t i = 0;
                  while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[5], i)
                      :PyList_GetItem(argv[5], i))) {
                    ++i;
                  }
                  _v = i == size;
                }
              }
              if (_v) {
                {
                  if (!PyTuple_Check(argv[6]) && !PyList_Check(argv[6])) {
                    _v = 0;
                  } else {
                    const bool is_tuple = PyTuple_Check(argv[6]);
                    const size_t size = is_tuple ? PyTuple_Size(argv[6]) : PyList_Size(argv[6]);
                    size_t i = 0;
                    while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[6], i)
                        :PyList_GetItem(argv[6], i))) {
                      ++i;
                    }
                    _v = i == size;
                  }
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_Solver_GuidedLocalSearch__SWIG_3(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = CanConvertToIntVar(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          {
            _v = PyCallable_Check(argv[3]);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                if (!PyTuple_Check(argv[5]) && !PyList_Check(argv[5])) {
                  _v = 0;
                } else {
                  const bool is_tuple = PyTuple_Check(argv[5]);
                  const size_t size = is_tuple ? PyTuple_Size(argv[5]) : PyList_Size(argv[5]);
                  size_t i = 0;
                  while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[5], i)
                      :PyList_GetItem(argv[5], i))) {
                    ++i;
                  }
                  _v = i == size;
                }
              }
              if (_v) {
                {
                  int res = SWIG_AsVal_double(argv[6], NULL);
                  _v = SWIG_CheckState(res);
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_bool(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    return _wrap_Solver_GuidedLocalSearch__SWIG_0(self, args);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 9) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_bool(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          _v = CanConvertToIntVar(argv[2]);
          if (_v == 0) PyErr_Clear();
        }
        if (_v) {
          {
            _v = PyCallable_Check(argv[3]);
          }
          if (_v) {
            {
              int res = SWIG_AsVal_long(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              {
                if (!PyTuple_Check(argv[5]) && !PyList_Check(argv[5])) {
                  _v = 0;
                } else {
                  const bool is_tuple = PyTuple_Check(argv[5]);
                  const size_t size = is_tuple ? PyTuple_Size(argv[5]) : PyList_Size(argv[5]);
                  size_t i = 0;
                  while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[5], i)
                      :PyList_GetItem(argv[5], i))) {
                    ++i;
                  }
                  _v = i == size;
                }
              }
              if (_v) {
                {
                  if (!PyTuple_Check(argv[6]) && !PyList_Check(argv[6])) {
                    _v = 0;
                  } else {
                    const bool is_tuple = PyTuple_Check(argv[6]);
                    const size_t size = is_tuple ? PyTuple_Size(argv[6]) : PyList_Size(argv[6]);
                    size_t i = 0;
                    while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[6], i)
                        :PyList_GetItem(argv[6], i))) {
                      ++i;
                    }
                    _v = i == size;
                  }
                }
                if (_v) {
                  {
                    int res = SWIG_AsVal_double(argv[7], NULL);
                    _v = SWIG_CheckState(res);
                  }
                  if (_v) {
                    {
                      int res = SWIG_AsVal_bool(argv[8], NULL);
                      _v = SWIG_CheckState(res);
                    }
                    if (_v) {
                      return _wrap_Solver_GuidedLocalSearch__SWIG_2(self, args);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Solver_GuidedLocalSearch'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Solver::MakeGuidedLocalSearch(bool,operations_research::IntVar *,operations_research::Solver::IndexEvaluator2,int64_t,std::vector< operations_research::IntVar * > const &,double,bool)\n"
    "    operations_research::Solver::MakeGuidedLocalSearch(bool,operations_research::IntVar *,operations_research::Solver::IndexEvaluator2,int64_t,std::vector< operations_research::IntVar * > const &,double)\n"
    "    operations_research::Solver::MakeGuidedLocalSearch(bool,operations_research::IntVar *,operations_research::Solver::IndexEvaluator3,int64_t,std::vector< operations_research::IntVar * > const &,std::vector< operations_research::IntVar * > const &,double,bool)\n"
    "    operations_research::Solver::MakeGuidedLocalSearch(bool,operations_research::IntVar *,operations_research::Solver::IndexEvaluator3,int64_t,std::vector< operations_research::IntVar * > const &,std::vector< operations_research::IntVar * > const &,double)\n"
    "    operations_research::Solver::GuidedLocalSearch(bool,operations_research::IntVar *const,operations_research::Solver::IndexEvaluator2,int64_t,std::vector< operations_research::IntVar * > const &,double)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Solver_SumObjectiveFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Solver *arg1 = (operations_research::Solver *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  operations_research::Solver::IndexEvaluator2 arg3 ;
  operations_research::Solver::LocalSearchFilterBound arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::LocalSearchFilter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Solver_SumObjectiveFilter",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Solver_SumObjectiveFilter" "', argument " "1"" of type '" "operations_research::Solver *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Solver * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    SharedPyPtr input(obj2);
    arg3 = [input](int64_t i, int64_t j) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "LL", i, j);
    };
  }
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Solver_SumObjectiveFilter" "', argument " "4"" of type '" "operations_research::Solver::LocalSearchFilterBound""'");
  } 
  arg4 = static_cast< operations_research::Solver::LocalSearchFilterBound >(val4);
  {
    try {
      result = (operations_research::LocalSearchFilter *)operations_research_Solver_SumObjectiveFilter(arg1,(std::vector< operations_research::IntVar * > const &)*arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__LocalSearchFilter, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Solver_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__Solver, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___lshift____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  operations_research::Solver *arg2 = (operations_research::Solver *) (operations_research::Solver *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "operations_research::Solver const *const""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Solver * >(argp2);
  {
    try {
      result = (std::ostream *) &operations_research::operator <<(*arg1,(operations_research::Solver const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BaseObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject * obj0 = 0 ;
  operations_research::BaseObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_BaseObject",&obj0)) SWIG_fail;
  arg1 = obj0;
  {
    try {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (operations_research::BaseObject *)new SwigDirector_BaseObject(arg1); 
      } else {
        result = (operations_research::BaseObject *)new operations_research::BaseObject(); 
      }
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__BaseObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BaseObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BaseObject *arg1 = (operations_research::BaseObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BaseObject",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BaseObject, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BaseObject" "', argument " "1"" of type '" "operations_research::BaseObject *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BaseObject * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseObject_DebugString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BaseObject *arg1 = (operations_research::BaseObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseObject_DebugString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BaseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseObject_DebugString" "', argument " "1"" of type '" "operations_research::BaseObject const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BaseObject * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          result = ((operations_research::BaseObject const *)arg1)->operations_research::BaseObject::DebugString();
        } else {
          result = ((operations_research::BaseObject const *)arg1)->DebugString();
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseObject___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BaseObject *arg1 = (operations_research::BaseObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseObject___str__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BaseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseObject___str__" "', argument " "1"" of type '" "operations_research::BaseObject *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BaseObject * >(argp1);
  {
    try {
      result = operations_research_BaseObject___str__(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseObject___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BaseObject *arg1 = (operations_research::BaseObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseObject___repr__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BaseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseObject___repr__" "', argument " "1"" of type '" "operations_research::BaseObject *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BaseObject * >(argp1);
  {
    try {
      result = operations_research_BaseObject___repr__(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_BaseObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BaseObject *arg1 = (operations_research::BaseObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:disown_BaseObject",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BaseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_BaseObject" "', argument " "1"" of type '" "operations_research::BaseObject *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BaseObject * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BaseObject_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__BaseObject, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___lshift____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  operations_research::BaseObject *arg2 = (operations_research::BaseObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__BaseObject, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "operations_research::BaseObject const *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::BaseObject * >(argp2);
  {
    try {
      result = (std::ostream *) &operations_research::operator <<(*arg1,(operations_research::BaseObject const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_PropagationBaseObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  operations_research::Solver *arg2 = (operations_research::Solver *) (operations_research::Solver *)0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::PropagationBaseObject *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_PropagationBaseObject",&obj0,&obj1)) SWIG_fail;
  arg1 = obj0;
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_PropagationBaseObject" "', argument " "2"" of type '" "operations_research::Solver *const""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Solver * >(argp2);
  {
    try {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (operations_research::PropagationBaseObject *)new SwigDirector_PropagationBaseObject(arg1,arg2); 
      } else {
        result = (operations_research::PropagationBaseObject *)new operations_research::PropagationBaseObject(arg2); 
      }
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__PropagationBaseObject, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PropagationBaseObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::PropagationBaseObject *arg1 = (operations_research::PropagationBaseObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PropagationBaseObject",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__PropagationBaseObject, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PropagationBaseObject" "', argument " "1"" of type '" "operations_research::PropagationBaseObject *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::PropagationBaseObject * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PropagationBaseObject_DebugString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::PropagationBaseObject *arg1 = (operations_research::PropagationBaseObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PropagationBaseObject_DebugString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__PropagationBaseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropagationBaseObject_DebugString" "', argument " "1"" of type '" "operations_research::PropagationBaseObject const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::PropagationBaseObject * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          result = ((operations_research::PropagationBaseObject const *)arg1)->operations_research::PropagationBaseObject::DebugString();
        } else {
          result = ((operations_research::PropagationBaseObject const *)arg1)->DebugString();
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PropagationBaseObject_solver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::PropagationBaseObject *arg1 = (operations_research::PropagationBaseObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::Solver *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PropagationBaseObject_solver",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__PropagationBaseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropagationBaseObject_solver" "', argument " "1"" of type '" "operations_research::PropagationBaseObject const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::PropagationBaseObject * >(argp1);
  {
    try {
      result = (operations_research::Solver *)((operations_research::PropagationBaseObject const *)arg1)->solver(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PropagationBaseObject_Name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::PropagationBaseObject *arg1 = (operations_research::PropagationBaseObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PropagationBaseObject_Name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__PropagationBaseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PropagationBaseObject_Name" "', argument " "1"" of type '" "operations_research::PropagationBaseObject const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::PropagationBaseObject * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          result = ((operations_research::PropagationBaseObject const *)arg1)->operations_research::PropagationBaseObject::name();
        } else {
          result = ((operations_research::PropagationBaseObject const *)arg1)->name();
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_PropagationBaseObject(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::PropagationBaseObject *arg1 = (operations_research::PropagationBaseObject *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:disown_PropagationBaseObject",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__PropagationBaseObject, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_PropagationBaseObject" "', argument " "1"" of type '" "operations_research::PropagationBaseObject *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::PropagationBaseObject * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PropagationBaseObject_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__PropagationBaseObject, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Decision(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject * obj0 = 0 ;
  operations_research::Decision *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Decision",&obj0)) SWIG_fail;
  arg1 = obj0;
  {
    try {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (operations_research::Decision *)new SwigDirector_Decision(arg1); 
      } else {
        SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor"); 
        SWIG_fail;
      }
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Decision, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Decision(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Decision *arg1 = (operations_research::Decision *) 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Decision",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Decision_ApplyWrapper(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Decision *arg1 = (operations_research::Decision *) 0 ;
  operations_research::Solver *arg2 = (operations_research::Solver *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Decision_ApplyWrapper",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Decision_ApplyWrapper" "', argument " "2"" of type '" "operations_research::Solver *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Solver * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("operations_research::Decision::Apply");
        } else {
          (arg1)->Apply(arg2);
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Decision_RefuteWrapper(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Decision *arg1 = (operations_research::Decision *) 0 ;
  operations_research::Solver *arg2 = (operations_research::Solver *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Decision_RefuteWrapper",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Decision_RefuteWrapper" "', argument " "2"" of type '" "operations_research::Solver *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Solver * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("operations_research::Decision::Refute");
        } else {
          (arg1)->Refute(arg2);
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Decision_DebugString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Decision *arg1 = (operations_research::Decision *) 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Decision_DebugString",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          result = ((operations_research::Decision const *)arg1)->operations_research::Decision::DebugString();
        } else {
          result = ((operations_research::Decision const *)arg1)->DebugString();
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Decision___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Decision *arg1 = (operations_research::Decision *) 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Decision___repr__",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = operations_research_Decision___repr__(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Decision___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Decision *arg1 = (operations_research::Decision *) 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Decision___str__",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = operations_research_Decision___str__(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_Decision(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Decision *arg1 = (operations_research::Decision *) 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:disown_Decision",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Decision_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__Decision, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_DecisionBuilder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject * obj0 = 0 ;
  operations_research::DecisionBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_DecisionBuilder",&obj0)) SWIG_fail;
  arg1 = obj0;
  {
    try {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (operations_research::DecisionBuilder *)new SwigDirector_DecisionBuilder(arg1); 
      } else {
        SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor"); 
        SWIG_fail;
      }
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DecisionBuilder, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_DecisionBuilder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::DecisionBuilder *arg1 = (operations_research::DecisionBuilder *) 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_DecisionBuilder",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionBuilder_NextWrapper(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::DecisionBuilder *arg1 = (operations_research::DecisionBuilder *) 0 ;
  operations_research::Solver *arg2 = (operations_research::Solver *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  operations_research::Decision *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DecisionBuilder_NextWrapper",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "DecisionBuilder_NextWrapper" "', argument " "2"" of type '" "operations_research::Solver *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Solver * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("operations_research::DecisionBuilder::Next");
        } else {
          result = (operations_research::Decision *)(arg1)->Next(arg2);
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Decision, 0 |  0 );
  }
  if (director) {
    SWIG_AcquirePtr(resultobj, director->swig_release_ownership(SWIG_as_voidptr(result)));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionBuilder_DebugString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::DecisionBuilder *arg1 = (operations_research::DecisionBuilder *) 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionBuilder_DebugString",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          result = ((operations_research::DecisionBuilder const *)arg1)->operations_research::DecisionBuilder::DebugString();
        } else {
          result = ((operations_research::DecisionBuilder const *)arg1)->DebugString();
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionBuilder___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::DecisionBuilder *arg1 = (operations_research::DecisionBuilder *) 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionBuilder___repr__",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = operations_research_DecisionBuilder___repr__(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DecisionBuilder___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::DecisionBuilder *arg1 = (operations_research::DecisionBuilder *) 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DecisionBuilder___str__",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = operations_research_DecisionBuilder___str__(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_DecisionBuilder(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::DecisionBuilder *arg1 = (operations_research::DecisionBuilder *) 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:disown_DecisionBuilder",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DecisionBuilder_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__DecisionBuilder, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Demon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  PyObject * obj0 = 0 ;
  operations_research::Demon *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_Demon",&obj0)) SWIG_fail;
  arg1 = obj0;
  {
    try {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (operations_research::Demon *)new SwigDirector_Demon(arg1); 
      } else {
        SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor"); 
        SWIG_fail;
      }
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Demon, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Demon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Demon *arg1 = (operations_research::Demon *) 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Demon",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Demon_RunWrapper(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Demon *arg1 = (operations_research::Demon *) 0 ;
  operations_research::Solver *arg2 = (operations_research::Solver *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Demon_RunWrapper",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Demon_RunWrapper" "', argument " "2"" of type '" "operations_research::Solver *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Solver * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("operations_research::Demon::Run");
        } else {
          (arg1)->Run(arg2);
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Demon_Priority(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Demon *arg1 = (operations_research::Demon *) 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  operations_research::Solver::DemonPriority result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Demon_Priority",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          result = (operations_research::Solver::DemonPriority)((operations_research::Demon const *)arg1)->operations_research::Demon::priority();
        } else {
          result = (operations_research::Solver::DemonPriority)((operations_research::Demon const *)arg1)->priority();
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Demon_DebugString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Demon *arg1 = (operations_research::Demon *) 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Demon_DebugString",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          result = ((operations_research::Demon const *)arg1)->operations_research::Demon::DebugString();
        } else {
          result = ((operations_research::Demon const *)arg1)->DebugString();
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Demon_Inhibit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Demon *arg1 = (operations_research::Demon *) 0 ;
  operations_research::Solver *arg2 = (operations_research::Solver *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Demon_Inhibit",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Demon_Inhibit" "', argument " "2"" of type '" "operations_research::Solver *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Solver * >(argp2);
  {
    try {
      (arg1)->inhibit(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Demon_Desinhibit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Demon *arg1 = (operations_research::Demon *) 0 ;
  operations_research::Solver *arg2 = (operations_research::Solver *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Demon_Desinhibit",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Demon_Desinhibit" "', argument " "2"" of type '" "operations_research::Solver *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Solver * >(argp2);
  {
    try {
      (arg1)->desinhibit(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_Demon(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Demon *arg1 = (operations_research::Demon *) 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:disown_Demon",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Demon_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__Demon, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_Constraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  operations_research::Solver *arg2 = (operations_research::Solver *) (operations_research::Solver *)0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_Constraint",&obj0,&obj1)) SWIG_fail;
  arg1 = obj0;
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_Constraint" "', argument " "2"" of type '" "operations_research::Solver *const""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Solver * >(argp2);
  {
    try {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (operations_research::Constraint *)new SwigDirector_Constraint(arg1,arg2); 
      } else {
        SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor"); 
        SWIG_fail;
      }
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_Constraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_Constraint",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint_Post(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Constraint_Post",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("operations_research::Constraint::Post");
        } else {
          (arg1)->Post();
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint_InitialPropagateWrapper(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Constraint_InitialPropagateWrapper",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("operations_research::Constraint::InitialPropagate");
        } else {
          (arg1)->InitialPropagate();
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint_DebugString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Constraint_DebugString",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          result = ((operations_research::Constraint const *)arg1)->operations_research::Constraint::DebugString();
        } else {
          result = ((operations_research::Constraint const *)arg1)->DebugString();
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint_Var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Constraint_Var",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          result = (operations_research::IntVar *)(arg1)->operations_research::Constraint::Var();
        } else {
          result = (operations_research::IntVar *)(arg1)->Var();
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  if (director) {
    SWIG_AcquirePtr(resultobj, director->swig_release_ownership(SWIG_as_voidptr(result)));
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Constraint___repr__",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = operations_research_Constraint___repr__(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Constraint___str__",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = operations_research_Constraint___str__(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___add____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint___add__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntExpr *)operations_research_Constraint___add____SWIG_0(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___add____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint___add__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntExpr *)operations_research_Constraint___add____SWIG_1(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___add____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint___add__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Constraint___add__" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::IntExpr *)operations_research_Constraint___add____SWIG_2(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___add__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToConstraint(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_Constraint___add____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToConstraint(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToConstraint(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_Constraint___add____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToConstraint(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Constraint___add____SWIG_2(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Constraint___radd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint___radd__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Constraint___radd__" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::IntExpr *)operations_research_Constraint___radd__(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint___sub__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntExpr *)operations_research_Constraint___sub____SWIG_0(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint___sub__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntExpr *)operations_research_Constraint___sub____SWIG_1(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___sub____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint___sub__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Constraint___sub__" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::IntExpr *)operations_research_Constraint___sub____SWIG_2(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___sub__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToConstraint(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_Constraint___sub____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToConstraint(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToConstraint(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_Constraint___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToConstraint(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Constraint___sub____SWIG_2(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Constraint___rsub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint___rsub__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Constraint___rsub__" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::IntExpr *)operations_research_Constraint___rsub__(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint___mul__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntExpr *)operations_research_Constraint___mul____SWIG_0(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint___mul__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntExpr *)operations_research_Constraint___mul____SWIG_1(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___mul____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint___mul__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Constraint___mul__" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::IntExpr *)operations_research_Constraint___mul____SWIG_2(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___mul__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToConstraint(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_Constraint___mul____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToConstraint(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToConstraint(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_Constraint___mul____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToConstraint(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Constraint___mul____SWIG_2(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Constraint___rmul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint___rmul__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Constraint___rmul__" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::IntExpr *)operations_research_Constraint___rmul__(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___floordiv__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint___floordiv__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Constraint___floordiv__" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::IntExpr *)operations_research_Constraint___floordiv__(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  PyObject * obj0 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Constraint___neg__",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntExpr *)operations_research_Constraint___neg__(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___abs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  PyObject * obj0 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Constraint___abs__",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntExpr *)operations_research_Constraint___abs__(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint_Square(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  PyObject * obj0 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Constraint_Square",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntExpr *)operations_research_Constraint_Square(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint___eq__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Constraint___eq__" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::Constraint *)operations_research_Constraint___eq____SWIG_0(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint___ne__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Constraint___ne__" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::Constraint *)operations_research_Constraint___ne____SWIG_0(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___ge____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint___ge__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Constraint___ge__" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::Constraint *)operations_research_Constraint___ge____SWIG_0(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___gt____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint___gt__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Constraint___gt__" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::Constraint *)operations_research_Constraint___gt____SWIG_0(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___le____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint___le__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Constraint___le__" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::Constraint *)operations_research_Constraint___le____SWIG_0(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___lt____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint___lt__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Constraint___lt__" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::Constraint *)operations_research_Constraint___lt____SWIG_0(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint___eq__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_Constraint___eq____SWIG_1(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint___ne__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_Constraint___ne____SWIG_1(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___ge____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint___ge__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_Constraint___ge____SWIG_1(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___gt____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint___gt__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_Constraint___gt____SWIG_1(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___le____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint___le__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_Constraint___le____SWIG_1(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___lt____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint___lt__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_Constraint___lt____SWIG_1(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___eq____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint___eq__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_Constraint___eq____SWIG_2(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToConstraint(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_Constraint___eq____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToConstraint(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToConstraint(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_Constraint___eq____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToConstraint(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Constraint___eq____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Constraint___ne____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint___ne__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_Constraint___ne____SWIG_2(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToConstraint(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_Constraint___ne____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToConstraint(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToConstraint(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_Constraint___ne____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToConstraint(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Constraint___ne____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Constraint___ge____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint___ge__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_Constraint___ge____SWIG_2(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___ge__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToConstraint(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_Constraint___ge____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToConstraint(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToConstraint(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_Constraint___ge____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToConstraint(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Constraint___ge____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Constraint___gt____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint___gt__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_Constraint___gt____SWIG_2(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___gt__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToConstraint(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_Constraint___gt____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToConstraint(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToConstraint(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_Constraint___gt____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToConstraint(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Constraint___gt____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Constraint___le____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint___le__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_Constraint___le____SWIG_2(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___le__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToConstraint(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_Constraint___le____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToConstraint(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToConstraint(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_Constraint___le____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToConstraint(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Constraint___le____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Constraint___lt____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint___lt__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_Constraint___lt____SWIG_2(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint___lt__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToConstraint(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_Constraint___lt____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToConstraint(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToConstraint(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_Constraint___lt____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToConstraint(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_Constraint___lt____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Constraint_MapTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint_MapTo",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_Constraint_MapTo(arg1,(std::vector< operations_research::IntVar * > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint_IndexOf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  std::vector< int64_t > *arg2 = 0 ;
  std::vector< int64_t > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint_IndexOf",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (operations_research::IntExpr *)operations_research_Constraint_IndexOf__SWIG_0(arg1,(std::vector< long > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint_IndexOf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Constraint_IndexOf",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (operations_research::IntExpr *)operations_research_Constraint_IndexOf__SWIG_1(arg1,(std::vector< operations_research::IntVar * > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Constraint_IndexOf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToConstraint(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        return _wrap_Constraint_IndexOf__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToConstraint(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        return _wrap_Constraint_IndexOf__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Constraint_IndexOf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Constraint::IndexOf(std::vector< int64_t > const &)\n"
    "    operations_research::Constraint::IndexOf(std::vector< operations_research::IntVar * > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_disown_Constraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Constraint *arg1 = (operations_research::Constraint *) 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:disown_Constraint",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Constraint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__Constraint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SearchMonitor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  operations_research::Solver *arg2 = (operations_research::Solver *) (operations_research::Solver *)0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::SearchMonitor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SearchMonitor",&obj0,&obj1)) SWIG_fail;
  arg1 = obj0;
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SearchMonitor" "', argument " "2"" of type '" "operations_research::Solver *const""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Solver * >(argp2);
  {
    try {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (operations_research::SearchMonitor *)new SwigDirector_SearchMonitor(arg1,arg2); 
      } else {
        result = (operations_research::SearchMonitor *)new operations_research::SearchMonitor(arg2); 
      }
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__SearchMonitor, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SearchMonitor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SearchMonitor",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SearchMonitor_EnterSearch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SearchMonitor_EnterSearch",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          (arg1)->operations_research::SearchMonitor::EnterSearch();
        } else {
          (arg1)->EnterSearch();
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SearchMonitor_RestartSearch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SearchMonitor_RestartSearch",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          (arg1)->operations_research::SearchMonitor::RestartSearch();
        } else {
          (arg1)->RestartSearch();
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SearchMonitor_ExitSearch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SearchMonitor_ExitSearch",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          (arg1)->operations_research::SearchMonitor::ExitSearch();
        } else {
          (arg1)->ExitSearch();
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SearchMonitor_BeginNextDecision(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SearchMonitor_BeginNextDecision",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          (arg1)->operations_research::SearchMonitor::BeginNextDecision(arg2);
        } else {
          (arg1)->BeginNextDecision(arg2);
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SearchMonitor_EndNextDecision(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) 0 ;
  operations_research::Decision *arg3 = (operations_research::Decision *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SearchMonitor_EndNextDecision",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          (arg1)->operations_research::SearchMonitor::EndNextDecision(arg2,arg3);
        } else {
          (arg1)->EndNextDecision(arg2,arg3);
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SearchMonitor_ApplyDecision(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  operations_research::Decision *arg2 = (operations_research::Decision *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SearchMonitor_ApplyDecision",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          (arg1)->operations_research::SearchMonitor::ApplyDecision(arg2);
        } else {
          (arg1)->ApplyDecision(arg2);
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SearchMonitor_RefuteDecision(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  operations_research::Decision *arg2 = (operations_research::Decision *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SearchMonitor_RefuteDecision",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          (arg1)->operations_research::SearchMonitor::RefuteDecision(arg2);
        } else {
          (arg1)->RefuteDecision(arg2);
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SearchMonitor_AfterDecision(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  operations_research::Decision *arg2 = (operations_research::Decision *) 0 ;
  bool arg3 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SearchMonitor_AfterDecision",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "SearchMonitor_AfterDecision" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          (arg1)->operations_research::SearchMonitor::AfterDecision(arg2,arg3);
        } else {
          (arg1)->AfterDecision(arg2,arg3);
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SearchMonitor_BeginFail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SearchMonitor_BeginFail",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          (arg1)->operations_research::SearchMonitor::BeginFail();
        } else {
          (arg1)->BeginFail();
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SearchMonitor_EndFail(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SearchMonitor_EndFail",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          (arg1)->operations_research::SearchMonitor::EndFail();
        } else {
          (arg1)->EndFail();
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SearchMonitor_BeginInitialPropagation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SearchMonitor_BeginInitialPropagation",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          (arg1)->operations_research::SearchMonitor::BeginInitialPropagation();
        } else {
          (arg1)->BeginInitialPropagation();
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SearchMonitor_EndInitialPropagation(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SearchMonitor_EndInitialPropagation",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          (arg1)->operations_research::SearchMonitor::EndInitialPropagation();
        } else {
          (arg1)->EndInitialPropagation();
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SearchMonitor_AcceptSolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SearchMonitor_AcceptSolution",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          result = (bool)(arg1)->operations_research::SearchMonitor::AcceptSolution();
        } else {
          result = (bool)(arg1)->AcceptSolution();
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SearchMonitor_AtSolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SearchMonitor_AtSolution",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          result = (bool)(arg1)->operations_research::SearchMonitor::AtSolution();
        } else {
          result = (bool)(arg1)->AtSolution();
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SearchMonitor_NoMoreSolutions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SearchMonitor_NoMoreSolutions",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          (arg1)->operations_research::SearchMonitor::NoMoreSolutions();
        } else {
          (arg1)->NoMoreSolutions();
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SearchMonitor_LocalOptimum(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SearchMonitor_LocalOptimum",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          result = (bool)(arg1)->operations_research::SearchMonitor::LocalOptimum();
        } else {
          result = (bool)(arg1)->LocalOptimum();
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SearchMonitor_AcceptDelta(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SearchMonitor_AcceptDelta",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SearchMonitor_AcceptDelta" "', argument " "2"" of type '" "operations_research::Assignment *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SearchMonitor_AcceptDelta" "', argument " "3"" of type '" "operations_research::Assignment *""'"); 
  }
  arg3 = reinterpret_cast< operations_research::Assignment * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          result = (bool)(arg1)->operations_research::SearchMonitor::AcceptDelta(arg2,arg3);
        } else {
          result = (bool)(arg1)->AcceptDelta(arg2,arg3);
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SearchMonitor_AcceptNeighbor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SearchMonitor_AcceptNeighbor",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          (arg1)->operations_research::SearchMonitor::AcceptNeighbor();
        } else {
          (arg1)->AcceptNeighbor();
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SearchMonitor_ProgressPercent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SearchMonitor_ProgressPercent",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          result = (int)(arg1)->operations_research::SearchMonitor::ProgressPercent();
        } else {
          result = (int)(arg1)->ProgressPercent();
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SearchMonitor_solver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  PyObject * obj0 = 0 ;
  operations_research::Solver *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SearchMonitor_solver",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Solver *)((operations_research::SearchMonitor const *)arg1)->solver(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SearchMonitor___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SearchMonitor___repr__",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = operations_research_SearchMonitor___repr__(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SearchMonitor___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SearchMonitor___str__",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = operations_research_SearchMonitor___str__(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_SearchMonitor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SearchMonitor *arg1 = (operations_research::SearchMonitor *) 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:disown_SearchMonitor",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SearchMonitor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__SearchMonitor, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IntExpr_Min(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntExpr_Min",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::IntExpr const *)arg1)->Min(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr_SetMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr_SetMin",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntExpr_SetMin" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetMin(arg2);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      // IMPORTANT: the type and message of the exception raised matter,
      // because they are caught by the python overrides of some CP classes.
      // See the occurrences of the "PyExc_Exception" string below.
      PyErr_SetString(PyExc_Exception, "CP Solver fail");
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr_Max(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntExpr_Max",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::IntExpr const *)arg1)->Max(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr_SetMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr_SetMax",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntExpr_SetMax" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetMax(arg2);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      // IMPORTANT: the type and message of the exception raised matter,
      // because they are caught by the python overrides of some CP classes.
      // See the occurrences of the "PyExc_Exception" string below.
      PyErr_SetString(PyExc_Exception, "CP Solver fail");
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr_SetRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntExpr_SetRange",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntExpr_SetRange" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntExpr_SetRange" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetRange(arg2,arg3);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      // IMPORTANT: the type and message of the exception raised matter,
      // because they are caught by the python overrides of some CP classes.
      // See the occurrences of the "PyExc_Exception" string below.
      PyErr_SetString(PyExc_Exception, "CP Solver fail");
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr_SetValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr_SetValue",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntExpr_SetValue" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetValue(arg2);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      // IMPORTANT: the type and message of the exception raised matter,
      // because they are caught by the python overrides of some CP classes.
      // See the occurrences of the "PyExc_Exception" string below.
      PyErr_SetString(PyExc_Exception, "CP Solver fail");
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr_Bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntExpr_Bound",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (bool)((operations_research::IntExpr const *)arg1)->Bound(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr_IsVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntExpr_IsVar",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (bool)((operations_research::IntExpr const *)arg1)->IsVar(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr_Var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  PyObject * obj0 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntExpr_Var",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntVar *)(arg1)->Var(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr_VarWithName(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  std::string *arg2 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr_VarWithName",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntExpr_VarWithName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntExpr_VarWithName" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (operations_research::IntVar *)(arg1)->VarWithName((std::string const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr_WhenRange__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr_WhenRange",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->WhenRange(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr_WhenRange__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  operations_research::Solver::Closure arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr_WhenRange",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    SharedPyPtr input(obj1);
    arg2 = [input]() {
      return InvokePythonCallableReturning<void>(input.get()); 
    };
  }
  {
    try {
      (arg1)->WhenRange(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr_WhenRange(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToDemon(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_IntExpr_WhenRange__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]);
      }
      if (_v) {
        return _wrap_IntExpr_WhenRange__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntExpr_WhenRange'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::IntExpr::WhenRange(operations_research::Demon *)\n"
    "    operations_research::IntExpr::WhenRange(operations_research::Solver::Closure)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntExpr___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntExpr___repr__",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = operations_research_IntExpr___repr__(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntExpr___str__",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = operations_research_IntExpr___str__(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___add____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___add__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntExpr *)operations_research_IntExpr___add____SWIG_0(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___add____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___add__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntExpr *)operations_research_IntExpr___add____SWIG_1(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___add____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___add__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntExpr___add__" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::IntExpr *)operations_research_IntExpr___add____SWIG_2(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___add__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_IntExpr___add____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToConstraint(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_IntExpr___add____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IntExpr___add____SWIG_2(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_IntExpr___radd__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___radd__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntExpr___radd__" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::IntExpr *)operations_research_IntExpr___radd__(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___sub____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___sub__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntExpr *)operations_research_IntExpr___sub____SWIG_0(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___sub____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___sub__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntExpr *)operations_research_IntExpr___sub____SWIG_1(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___sub____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___sub__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntExpr___sub__" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::IntExpr *)operations_research_IntExpr___sub____SWIG_2(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___sub__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_IntExpr___sub____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToConstraint(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_IntExpr___sub____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IntExpr___sub____SWIG_2(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_IntExpr___rsub__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___rsub__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntExpr___rsub__" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::IntExpr *)operations_research_IntExpr___rsub__(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___mul____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___mul__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntExpr *)operations_research_IntExpr___mul____SWIG_0(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___mul____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___mul__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntExpr *)operations_research_IntExpr___mul____SWIG_1(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___mul____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___mul__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntExpr___mul__" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::IntExpr *)operations_research_IntExpr___mul____SWIG_2(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___mul__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_IntExpr___mul____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToConstraint(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_IntExpr___mul____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IntExpr___mul____SWIG_2(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_IntExpr___rmul__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___rmul__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntExpr___rmul__" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::IntExpr *)operations_research_IntExpr___rmul__(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___floordiv____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___floordiv__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntExpr___floordiv__" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::IntExpr *)operations_research_IntExpr___floordiv____SWIG_0(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___floordiv____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___floordiv__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntExpr *)operations_research_IntExpr___floordiv____SWIG_1(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___floordiv__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_IntExpr___floordiv____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IntExpr___floordiv____SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntExpr___floordiv__'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::IntExpr::__floordiv__(int64_t)\n"
    "    operations_research::IntExpr::__floordiv__(operations_research::IntExpr *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntExpr___mod____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___mod__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntExpr___mod__" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::IntExpr *)operations_research_IntExpr___mod____SWIG_0(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___mod____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___mod__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntExpr *)operations_research_IntExpr___mod____SWIG_1(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___mod__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_IntExpr___mod____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IntExpr___mod____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_IntExpr___neg__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  PyObject * obj0 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntExpr___neg__",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntExpr *)operations_research_IntExpr___neg__(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___abs__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  PyObject * obj0 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntExpr___abs__",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntExpr *)operations_research_IntExpr___abs__(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr_Square(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  PyObject * obj0 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntExpr_Square",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntExpr *)operations_research_IntExpr_Square(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___eq____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___eq__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntExpr___eq__" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntExpr___eq____SWIG_0(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___ne____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___ne__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntExpr___ne__" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntExpr___ne____SWIG_0(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___ge____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___ge__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntExpr___ge__" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntExpr___ge____SWIG_0(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___gt____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___gt__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntExpr___gt__" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntExpr___gt____SWIG_0(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___le____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___le__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntExpr___le__" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntExpr___le____SWIG_0(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___lt____SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___lt__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntExpr___lt__" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntExpr___lt____SWIG_0(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___eq____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___eq__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntExpr___eq____SWIG_1(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___ne____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___ne__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntExpr___ne____SWIG_1(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___ge____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___ge__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntExpr___ge____SWIG_1(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___gt____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___gt__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntExpr___gt____SWIG_1(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___le____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___le__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntExpr___le____SWIG_1(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___lt____SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  operations_research::IntExpr *arg2 = (operations_research::IntExpr *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___lt__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntExpr___lt____SWIG_1(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___eq____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___eq__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntExpr___eq____SWIG_2(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___eq__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_IntExpr___eq____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToConstraint(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_IntExpr___eq____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IntExpr___eq____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_IntExpr___ne____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___ne__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntExpr___ne____SWIG_2(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___ne__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_IntExpr___ne____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToConstraint(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_IntExpr___ne____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IntExpr___ne____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_IntExpr___ge____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___ge__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntExpr___ge____SWIG_2(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___ge__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_IntExpr___ge____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToConstraint(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_IntExpr___ge____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IntExpr___ge____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_IntExpr___gt____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___gt__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntExpr___gt____SWIG_2(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___gt__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_IntExpr___gt____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToConstraint(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_IntExpr___gt____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IntExpr___gt____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_IntExpr___le____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___le__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntExpr___le____SWIG_2(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___le__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_IntExpr___le____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToConstraint(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_IntExpr___le____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IntExpr___le____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_IntExpr___lt____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  operations_research::Constraint *arg2 = (operations_research::Constraint *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr___lt__",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntExpr___lt____SWIG_2(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr___lt__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToIntExpr(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_IntExpr___lt____SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToConstraint(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_IntExpr___lt____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_IntExpr___lt____SWIG_0(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_IntExpr_MapTo(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr_MapTo",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntExpr_MapTo(arg1,(std::vector< operations_research::IntVar * > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr_IndexOf__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  std::vector< int64_t > *arg2 = 0 ;
  std::vector< int64_t > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr_IndexOf",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (operations_research::IntExpr *)operations_research_IntExpr_IndexOf__SWIG_0(arg1,(std::vector< long > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr_IndexOf__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr_IndexOf",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (operations_research::IntExpr *)operations_research_IntExpr_IndexOf__SWIG_1(arg1,(std::vector< operations_research::IntVar * > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr_IndexOf(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        return _wrap_IntExpr_IndexOf__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntExpr(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        return _wrap_IntExpr_IndexOf__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntExpr_IndexOf'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::IntExpr::IndexOf(std::vector< int64_t > const &)\n"
    "    operations_research::IntExpr::IndexOf(std::vector< operations_research::IntVar * > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntExpr_IsMember(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  std::vector< int64_t > *arg2 = 0 ;
  std::vector< int64_t > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr_IsMember",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (operations_research::IntVar *)operations_research_IntExpr_IsMember(arg1,(std::vector< long > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr_Member(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  std::vector< int64_t > *arg2 = 0 ;
  std::vector< int64_t > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntExpr_Member",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntExpr_Member(arg1,(std::vector< long > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntExpr_NotMember(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntExpr *arg1 = (operations_research::IntExpr *) 0 ;
  std::vector< int64_t > *arg2 = 0 ;
  std::vector< int64_t > *arg3 = 0 ;
  std::vector< int64_t > temp2 ;
  std::vector< int64_t > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntExpr_NotMember",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntExpr_NotMember(arg1,(std::vector< long > const &)*arg2,(std::vector< long > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IntExpr_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__IntExpr, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IntVarIterator_Init(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarIterator *arg1 = (operations_research::IntVarIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVarIterator_Init",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarIterator_Init" "', argument " "1"" of type '" "operations_research::IntVarIterator *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarIterator * >(argp1);
  {
    try {
      (arg1)->Init(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarIterator_Ok(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarIterator *arg1 = (operations_research::IntVarIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVarIterator_Ok",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarIterator_Ok" "', argument " "1"" of type '" "operations_research::IntVarIterator const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarIterator * >(argp1);
  {
    try {
      result = (bool)((operations_research::IntVarIterator const *)arg1)->Ok(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarIterator_Value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarIterator *arg1 = (operations_research::IntVarIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVarIterator_Value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarIterator_Value" "', argument " "1"" of type '" "operations_research::IntVarIterator const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarIterator * >(argp1);
  {
    try {
      result = (int64_t)((operations_research::IntVarIterator const *)arg1)->Value(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarIterator_Next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarIterator *arg1 = (operations_research::IntVarIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVarIterator_Next",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarIterator_Next" "', argument " "1"" of type '" "operations_research::IntVarIterator *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarIterator * >(argp1);
  {
    try {
      (arg1)->Next(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarIterator_DebugString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarIterator *arg1 = (operations_research::IntVarIterator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVarIterator_DebugString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarIterator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarIterator_DebugString" "', argument " "1"" of type '" "operations_research::IntVarIterator const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarIterator * >(argp1);
  {
    try {
      result = ((operations_research::IntVarIterator const *)arg1)->DebugString(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IntVarIterator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__IntVarIterator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IntVar_IsVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVar_IsVar",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (bool)((operations_research::IntVar const *)arg1)->IsVar(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVar_Var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  PyObject * obj0 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVar_Var",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntVar *)(arg1)->Var(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVar_Value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVar_Value",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::IntVar const *)arg1)->Value(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVar_RemoveValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVar_RemoveValue",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVar_RemoveValue" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->RemoveValue(arg2);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      // IMPORTANT: the type and message of the exception raised matter,
      // because they are caught by the python overrides of some CP classes.
      // See the occurrences of the "PyExc_Exception" string below.
      PyErr_SetString(PyExc_Exception, "CP Solver fail");
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVar_RemoveInterval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntVar_RemoveInterval",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVar_RemoveInterval" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVar_RemoveInterval" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      (arg1)->RemoveInterval(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVar_RemoveValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  std::vector< int64_t > *arg2 = 0 ;
  std::vector< int64_t > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVar_RemoveValues",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->RemoveValues((std::vector< int64_t > const &)*arg2);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      // IMPORTANT: the type and message of the exception raised matter,
      // because they are caught by the python overrides of some CP classes.
      // See the occurrences of the "PyExc_Exception" string below.
      PyErr_SetString(PyExc_Exception, "CP Solver fail");
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVar_SetValues(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  std::vector< int64_t > *arg2 = 0 ;
  std::vector< int64_t > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVar_SetValues",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      (arg1)->SetValues((std::vector< int64_t > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVar_WhenBound__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVar_WhenBound",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->WhenBound(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVar_WhenBound__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  operations_research::Solver::Closure arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVar_WhenBound",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    SharedPyPtr input(obj1);
    arg2 = [input]() {
      return InvokePythonCallableReturning<void>(input.get()); 
    };
  }
  {
    try {
      (arg1)->WhenBound(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVar_WhenBound(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntVar(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToDemon(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_IntVar_WhenBound__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntVar(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]);
      }
      if (_v) {
        return _wrap_IntVar_WhenBound__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntVar_WhenBound'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::IntVar::WhenBound(operations_research::Demon *)\n"
    "    operations_research::IntVar::WhenBound(operations_research::Solver::Closure)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntVar_WhenDomain__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVar_WhenDomain",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->WhenDomain(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVar_WhenDomain__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  operations_research::Solver::Closure arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVar_WhenDomain",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    SharedPyPtr input(obj1);
    arg2 = [input]() {
      return InvokePythonCallableReturning<void>(input.get()); 
    };
  }
  {
    try {
      (arg1)->WhenDomain(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVar_WhenDomain(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntVar(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToDemon(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_IntVar_WhenDomain__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntVar(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]);
      }
      if (_v) {
        return _wrap_IntVar_WhenDomain__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntVar_WhenDomain'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::IntVar::WhenDomain(operations_research::Demon *)\n"
    "    operations_research::IntVar::WhenDomain(operations_research::Solver::Closure)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntVar_Size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  PyObject * obj0 = 0 ;
  uint64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVar_Size",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (uint64_t)((operations_research::IntVar const *)arg1)->Size(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVar_Contains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVar_Contains",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVar_Contains" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (bool)((operations_research::IntVar const *)arg1)->Contains(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVar_HoleIteratorAux(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  bool arg2 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntVarIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVar_HoleIteratorAux",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVar_HoleIteratorAux" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (operations_research::IntVarIterator *)((operations_research::IntVar const *)arg1)->MakeHoleIterator(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVarIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVar_DomainIteratorAux(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  bool arg2 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntVarIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVar_DomainIteratorAux",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVar_DomainIteratorAux" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (operations_research::IntVarIterator *)((operations_research::IntVar const *)arg1)->MakeDomainIterator(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVarIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVar_OldMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVar_OldMin",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::IntVar const *)arg1)->OldMin(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVar_OldMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVar_OldMax",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::IntVar const *)arg1)->OldMax(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVar___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVar___repr__",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = operations_research_IntVar___repr__(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVar___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVar *arg1 = (operations_research::IntVar *) 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVar___str__",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = operations_research_IntVar___str__(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IntVar_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__IntVar, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SolutionCollector_DebugString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SolutionCollector_DebugString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SolutionCollector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolutionCollector_DebugString" "', argument " "1"" of type '" "operations_research::SolutionCollector const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SolutionCollector * >(argp1);
  {
    try {
      result = ((operations_research::SolutionCollector const *)arg1)->DebugString(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolutionCollector_Add__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SolutionCollector_Add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SolutionCollector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolutionCollector_Add" "', argument " "1"" of type '" "operations_research::SolutionCollector *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SolutionCollector * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->Add(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolutionCollector_Add__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SolutionCollector_Add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SolutionCollector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolutionCollector_Add" "', argument " "1"" of type '" "operations_research::SolutionCollector *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SolutionCollector * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      (arg1)->Add((std::vector< operations_research::IntVar * > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolutionCollector_Add__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SolutionCollector_Add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SolutionCollector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolutionCollector_Add" "', argument " "1"" of type '" "operations_research::SolutionCollector *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SolutionCollector * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->Add(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolutionCollector_Add__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  std::vector< operations_research::IntervalVar * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntervalVar * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SolutionCollector_Add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SolutionCollector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolutionCollector_Add" "', argument " "1"" of type '" "operations_research::SolutionCollector *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SolutionCollector * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntervalVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntervalVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      (arg1)->Add((std::vector< operations_research::IntervalVar * > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolutionCollector_Add__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SolutionCollector_Add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SolutionCollector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolutionCollector_Add" "', argument " "1"" of type '" "operations_research::SolutionCollector *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SolutionCollector * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->Add(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolutionCollector_Add__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  std::vector< operations_research::SequenceVar * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::SequenceVar * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SolutionCollector_Add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SolutionCollector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolutionCollector_Add" "', argument " "1"" of type '" "operations_research::SolutionCollector *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SolutionCollector * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::SequenceVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::SequenceVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      (arg1)->Add((std::vector< operations_research::SequenceVar * > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolutionCollector_Add(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__SolutionCollector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntVar(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_SolutionCollector_Add__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__SolutionCollector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        return _wrap_SolutionCollector_Add__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__SolutionCollector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntervalVar(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_SolutionCollector_Add__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__SolutionCollector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntervalVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        return _wrap_SolutionCollector_Add__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__SolutionCollector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToSequenceVar(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_SolutionCollector_Add__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__SolutionCollector, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToSequenceVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        return _wrap_SolutionCollector_Add__SWIG_5(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'SolutionCollector_Add'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::SolutionCollector::Add(operations_research::IntVar *)\n"
    "    operations_research::SolutionCollector::Add(std::vector< operations_research::IntVar * > const &)\n"
    "    operations_research::SolutionCollector::Add(operations_research::IntervalVar *)\n"
    "    operations_research::SolutionCollector::Add(std::vector< operations_research::IntervalVar * > const &)\n"
    "    operations_research::SolutionCollector::Add(operations_research::SequenceVar *)\n"
    "    operations_research::SolutionCollector::Add(std::vector< operations_research::SequenceVar * > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_SolutionCollector_AddObjective(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SolutionCollector_AddObjective",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SolutionCollector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolutionCollector_AddObjective" "', argument " "1"" of type '" "operations_research::SolutionCollector *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SolutionCollector * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->AddObjective(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolutionCollector_EnterSearch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SolutionCollector_EnterSearch",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SolutionCollector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolutionCollector_EnterSearch" "', argument " "1"" of type '" "operations_research::SolutionCollector *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SolutionCollector * >(argp1);
  {
    try {
      (arg1)->EnterSearch(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolutionCollector_SolutionCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SolutionCollector_SolutionCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SolutionCollector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolutionCollector_SolutionCount" "', argument " "1"" of type '" "operations_research::SolutionCollector const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SolutionCollector * >(argp1);
  {
    try {
      result = (int)((operations_research::SolutionCollector const *)arg1)->solution_count(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolutionCollector_Solution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::Assignment *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SolutionCollector_Solution",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SolutionCollector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolutionCollector_Solution" "', argument " "1"" of type '" "operations_research::SolutionCollector const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SolutionCollector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolutionCollector_Solution" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (operations_research::Assignment *)((operations_research::SolutionCollector const *)arg1)->solution(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolutionCollector_WallTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SolutionCollector_WallTime",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SolutionCollector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolutionCollector_WallTime" "', argument " "1"" of type '" "operations_research::SolutionCollector const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SolutionCollector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolutionCollector_WallTime" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int64_t)((operations_research::SolutionCollector const *)arg1)->wall_time(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolutionCollector_Branches(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SolutionCollector_Branches",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SolutionCollector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolutionCollector_Branches" "', argument " "1"" of type '" "operations_research::SolutionCollector const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SolutionCollector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolutionCollector_Branches" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int64_t)((operations_research::SolutionCollector const *)arg1)->branches(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolutionCollector_Failures(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SolutionCollector_Failures",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SolutionCollector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolutionCollector_Failures" "', argument " "1"" of type '" "operations_research::SolutionCollector const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SolutionCollector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolutionCollector_Failures" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int64_t)((operations_research::SolutionCollector const *)arg1)->failures(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolutionCollector_ObjectiveValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SolutionCollector_ObjectiveValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SolutionCollector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolutionCollector_ObjectiveValue" "', argument " "1"" of type '" "operations_research::SolutionCollector const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SolutionCollector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolutionCollector_ObjectiveValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int64_t)((operations_research::SolutionCollector const *)arg1)->objective_value(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolutionCollector_Value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  int arg2 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SolutionCollector_Value",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SolutionCollector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolutionCollector_Value" "', argument " "1"" of type '" "operations_research::SolutionCollector const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SolutionCollector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolutionCollector_Value" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::SolutionCollector const *)arg1)->Value(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolutionCollector_StartValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  int arg2 ;
  operations_research::IntervalVar *arg3 = (operations_research::IntervalVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SolutionCollector_StartValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SolutionCollector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolutionCollector_StartValue" "', argument " "1"" of type '" "operations_research::SolutionCollector const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SolutionCollector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolutionCollector_StartValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::SolutionCollector const *)arg1)->StartValue(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolutionCollector_EndValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  int arg2 ;
  operations_research::IntervalVar *arg3 = (operations_research::IntervalVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SolutionCollector_EndValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SolutionCollector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolutionCollector_EndValue" "', argument " "1"" of type '" "operations_research::SolutionCollector const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SolutionCollector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolutionCollector_EndValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::SolutionCollector const *)arg1)->EndValue(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolutionCollector_DurationValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  int arg2 ;
  operations_research::IntervalVar *arg3 = (operations_research::IntervalVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SolutionCollector_DurationValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SolutionCollector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolutionCollector_DurationValue" "', argument " "1"" of type '" "operations_research::SolutionCollector const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SolutionCollector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolutionCollector_DurationValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::SolutionCollector const *)arg1)->DurationValue(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolutionCollector_PerformedValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  int arg2 ;
  operations_research::IntervalVar *arg3 = (operations_research::IntervalVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SolutionCollector_PerformedValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SolutionCollector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolutionCollector_PerformedValue" "', argument " "1"" of type '" "operations_research::SolutionCollector const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SolutionCollector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolutionCollector_PerformedValue" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::SolutionCollector const *)arg1)->PerformedValue(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolutionCollector_ForwardSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  int arg2 ;
  operations_research::SequenceVar *arg3 = (operations_research::SequenceVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SolutionCollector_ForwardSequence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SolutionCollector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolutionCollector_ForwardSequence" "', argument " "1"" of type '" "operations_research::SolutionCollector const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SolutionCollector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolutionCollector_ForwardSequence" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    try {
      result = (std::vector< int > *) &((operations_research::SolutionCollector const *)arg1)->ForwardSequence(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    resultobj = vector_output_helper(result, &PyInt_FromLong);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolutionCollector_BackwardSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  int arg2 ;
  operations_research::SequenceVar *arg3 = (operations_research::SequenceVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SolutionCollector_BackwardSequence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SolutionCollector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolutionCollector_BackwardSequence" "', argument " "1"" of type '" "operations_research::SolutionCollector const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SolutionCollector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolutionCollector_BackwardSequence" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    try {
      result = (std::vector< int > *) &((operations_research::SolutionCollector const *)arg1)->BackwardSequence(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    resultobj = vector_output_helper(result, &PyInt_FromLong);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SolutionCollector_Unperformed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SolutionCollector *arg1 = (operations_research::SolutionCollector *) 0 ;
  int arg2 ;
  operations_research::SequenceVar *arg3 = (operations_research::SequenceVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:SolutionCollector_Unperformed",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SolutionCollector, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolutionCollector_Unperformed" "', argument " "1"" of type '" "operations_research::SolutionCollector const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SolutionCollector * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SolutionCollector_Unperformed" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    try {
      result = (std::vector< int > *) &((operations_research::SolutionCollector const *)arg1)->Unperformed(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    resultobj = vector_output_helper(result, &PyInt_FromLong);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SolutionCollector_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__SolutionCollector, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_OptimizeVar_Best(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::OptimizeVar *arg1 = (operations_research::OptimizeVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OptimizeVar_Best",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__OptimizeVar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVar_Best" "', argument " "1"" of type '" "operations_research::OptimizeVar const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::OptimizeVar * >(argp1);
  {
    try {
      result = (int64_t)((operations_research::OptimizeVar const *)arg1)->best(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVar_BeginNextDecision(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::OptimizeVar *arg1 = (operations_research::OptimizeVar *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OptimizeVar_BeginNextDecision",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__OptimizeVar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVar_BeginNextDecision" "', argument " "1"" of type '" "operations_research::OptimizeVar *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::OptimizeVar * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->BeginNextDecision(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVar_RefuteDecision(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::OptimizeVar *arg1 = (operations_research::OptimizeVar *) 0 ;
  operations_research::Decision *arg2 = (operations_research::Decision *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:OptimizeVar_RefuteDecision",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__OptimizeVar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVar_RefuteDecision" "', argument " "1"" of type '" "operations_research::OptimizeVar *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::OptimizeVar * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->RefuteDecision(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVar_AtSolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::OptimizeVar *arg1 = (operations_research::OptimizeVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OptimizeVar_AtSolution",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__OptimizeVar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVar_AtSolution" "', argument " "1"" of type '" "operations_research::OptimizeVar *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::OptimizeVar * >(argp1);
  {
    try {
      result = (bool)(arg1)->AtSolution(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVar_AcceptSolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::OptimizeVar *arg1 = (operations_research::OptimizeVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OptimizeVar_AcceptSolution",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__OptimizeVar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVar_AcceptSolution" "', argument " "1"" of type '" "operations_research::OptimizeVar *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::OptimizeVar * >(argp1);
  {
    try {
      result = (bool)(arg1)->AcceptSolution(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_OptimizeVar_DebugString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::OptimizeVar *arg1 = (operations_research::OptimizeVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:OptimizeVar_DebugString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__OptimizeVar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "OptimizeVar_DebugString" "', argument " "1"" of type '" "operations_research::OptimizeVar const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::OptimizeVar * >(argp1);
  {
    try {
      result = ((operations_research::OptimizeVar const *)arg1)->DebugString(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_OptimizeVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::OptimizeVar *arg1 = (operations_research::OptimizeVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_OptimizeVar",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__OptimizeVar, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_OptimizeVar" "', argument " "1"" of type '" "operations_research::OptimizeVar *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::OptimizeVar * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *OptimizeVar_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__OptimizeVar, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_SearchLimit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SearchLimit *arg1 = (operations_research::SearchLimit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SearchLimit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SearchLimit, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SearchLimit" "', argument " "1"" of type '" "operations_research::SearchLimit *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SearchLimit * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SearchLimit_Crossed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SearchLimit *arg1 = (operations_research::SearchLimit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SearchLimit_Crossed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SearchLimit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SearchLimit_Crossed" "', argument " "1"" of type '" "operations_research::SearchLimit const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SearchLimit * >(argp1);
  {
    try {
      result = (bool)((operations_research::SearchLimit const *)arg1)->crossed(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SearchLimit_Check(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SearchLimit *arg1 = (operations_research::SearchLimit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SearchLimit_Check",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SearchLimit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SearchLimit_Check" "', argument " "1"" of type '" "operations_research::SearchLimit *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SearchLimit * >(argp1);
  {
    try {
      result = (bool)(arg1)->Check(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SearchLimit_Init(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SearchLimit *arg1 = (operations_research::SearchLimit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SearchLimit_Init",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SearchLimit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SearchLimit_Init" "', argument " "1"" of type '" "operations_research::SearchLimit *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SearchLimit * >(argp1);
  {
    try {
      (arg1)->Init(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SearchLimit_EnterSearch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SearchLimit *arg1 = (operations_research::SearchLimit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SearchLimit_EnterSearch",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SearchLimit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SearchLimit_EnterSearch" "', argument " "1"" of type '" "operations_research::SearchLimit *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SearchLimit * >(argp1);
  {
    try {
      (arg1)->EnterSearch(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SearchLimit_BeginNextDecision(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SearchLimit *arg1 = (operations_research::SearchLimit *) 0 ;
  operations_research::DecisionBuilder *arg2 = (operations_research::DecisionBuilder *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SearchLimit_BeginNextDecision",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SearchLimit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SearchLimit_BeginNextDecision" "', argument " "1"" of type '" "operations_research::SearchLimit *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SearchLimit * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->BeginNextDecision(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SearchLimit_RefuteDecision(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SearchLimit *arg1 = (operations_research::SearchLimit *) 0 ;
  operations_research::Decision *arg2 = (operations_research::Decision *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SearchLimit_RefuteDecision",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SearchLimit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SearchLimit_RefuteDecision" "', argument " "1"" of type '" "operations_research::SearchLimit *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SearchLimit * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->RefuteDecision(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SearchLimit_DebugString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SearchLimit *arg1 = (operations_research::SearchLimit *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SearchLimit_DebugString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SearchLimit, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SearchLimit_DebugString" "', argument " "1"" of type '" "operations_research::SearchLimit const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SearchLimit * >(argp1);
  {
    try {
      result = ((operations_research::SearchLimit const *)arg1)->DebugString(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SearchLimit_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__SearchLimit, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IntervalVar_StartMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVar_StartMin",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::IntervalVar const *)arg1)->StartMin(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_StartMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVar_StartMax",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::IntervalVar const *)arg1)->StartMax(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_SetStartMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_SetStartMin",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVar_SetStartMin" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetStartMin(arg2);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      // IMPORTANT: the type and message of the exception raised matter,
      // because they are caught by the python overrides of some CP classes.
      // See the occurrences of the "PyExc_Exception" string below.
      PyErr_SetString(PyExc_Exception, "CP Solver fail");
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_SetStartMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_SetStartMax",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVar_SetStartMax" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetStartMax(arg2);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      // IMPORTANT: the type and message of the exception raised matter,
      // because they are caught by the python overrides of some CP classes.
      // See the occurrences of the "PyExc_Exception" string below.
      PyErr_SetString(PyExc_Exception, "CP Solver fail");
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_SetStartRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntervalVar_SetStartRange",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVar_SetStartRange" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntervalVar_SetStartRange" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetStartRange(arg2,arg3);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      // IMPORTANT: the type and message of the exception raised matter,
      // because they are caught by the python overrides of some CP classes.
      // See the occurrences of the "PyExc_Exception" string below.
      PyErr_SetString(PyExc_Exception, "CP Solver fail");
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_OldStartMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVar_OldStartMin",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::IntervalVar const *)arg1)->OldStartMin(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_OldStartMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVar_OldStartMax",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::IntervalVar const *)arg1)->OldStartMax(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_WhenStartRange__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_WhenStartRange",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->WhenStartRange(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_WhenStartRange__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::Solver::Closure arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_WhenStartRange",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    SharedPyPtr input(obj1);
    arg2 = [input]() {
      return InvokePythonCallableReturning<void>(input.get()); 
    };
  }
  {
    try {
      (arg1)->WhenStartRange(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_WhenStartRange(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntervalVar(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToDemon(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_IntervalVar_WhenStartRange__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntervalVar(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]);
      }
      if (_v) {
        return _wrap_IntervalVar_WhenStartRange__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntervalVar_WhenStartRange'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::IntervalVar::WhenStartRange(operations_research::Demon *)\n"
    "    operations_research::IntervalVar::WhenStartRange(operations_research::Solver::Closure)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntervalVar_WhenStartBound__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_WhenStartBound",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->WhenStartBound(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_WhenStartBound__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::Solver::Closure arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_WhenStartBound",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    SharedPyPtr input(obj1);
    arg2 = [input]() {
      return InvokePythonCallableReturning<void>(input.get()); 
    };
  }
  {
    try {
      (arg1)->WhenStartBound(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_WhenStartBound(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntervalVar(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToDemon(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_IntervalVar_WhenStartBound__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntervalVar(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]);
      }
      if (_v) {
        return _wrap_IntervalVar_WhenStartBound__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntervalVar_WhenStartBound'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::IntervalVar::WhenStartBound(operations_research::Demon *)\n"
    "    operations_research::IntervalVar::WhenStartBound(operations_research::Solver::Closure)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntervalVar_DurationMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVar_DurationMin",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::IntervalVar const *)arg1)->DurationMin(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_DurationMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVar_DurationMax",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::IntervalVar const *)arg1)->DurationMax(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_SetDurationMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_SetDurationMin",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVar_SetDurationMin" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetDurationMin(arg2);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      // IMPORTANT: the type and message of the exception raised matter,
      // because they are caught by the python overrides of some CP classes.
      // See the occurrences of the "PyExc_Exception" string below.
      PyErr_SetString(PyExc_Exception, "CP Solver fail");
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_SetDurationMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_SetDurationMax",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVar_SetDurationMax" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetDurationMax(arg2);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      // IMPORTANT: the type and message of the exception raised matter,
      // because they are caught by the python overrides of some CP classes.
      // See the occurrences of the "PyExc_Exception" string below.
      PyErr_SetString(PyExc_Exception, "CP Solver fail");
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_SetDurationRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntervalVar_SetDurationRange",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVar_SetDurationRange" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntervalVar_SetDurationRange" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetDurationRange(arg2,arg3);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      // IMPORTANT: the type and message of the exception raised matter,
      // because they are caught by the python overrides of some CP classes.
      // See the occurrences of the "PyExc_Exception" string below.
      PyErr_SetString(PyExc_Exception, "CP Solver fail");
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_OldDurationMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVar_OldDurationMin",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::IntervalVar const *)arg1)->OldDurationMin(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_OldDurationMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVar_OldDurationMax",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::IntervalVar const *)arg1)->OldDurationMax(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_WhenDurationRange__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_WhenDurationRange",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->WhenDurationRange(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_WhenDurationRange__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::Solver::Closure arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_WhenDurationRange",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    SharedPyPtr input(obj1);
    arg2 = [input]() {
      return InvokePythonCallableReturning<void>(input.get()); 
    };
  }
  {
    try {
      (arg1)->WhenDurationRange(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_WhenDurationRange(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntervalVar(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToDemon(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_IntervalVar_WhenDurationRange__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntervalVar(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]);
      }
      if (_v) {
        return _wrap_IntervalVar_WhenDurationRange__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntervalVar_WhenDurationRange'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::IntervalVar::WhenDurationRange(operations_research::Demon *)\n"
    "    operations_research::IntervalVar::WhenDurationRange(operations_research::Solver::Closure)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntervalVar_WhenDurationBound__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_WhenDurationBound",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->WhenDurationBound(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_WhenDurationBound__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::Solver::Closure arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_WhenDurationBound",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    SharedPyPtr input(obj1);
    arg2 = [input]() {
      return InvokePythonCallableReturning<void>(input.get()); 
    };
  }
  {
    try {
      (arg1)->WhenDurationBound(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_WhenDurationBound(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntervalVar(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToDemon(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_IntervalVar_WhenDurationBound__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntervalVar(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]);
      }
      if (_v) {
        return _wrap_IntervalVar_WhenDurationBound__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntervalVar_WhenDurationBound'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::IntervalVar::WhenDurationBound(operations_research::Demon *)\n"
    "    operations_research::IntervalVar::WhenDurationBound(operations_research::Solver::Closure)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntervalVar_EndMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVar_EndMin",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::IntervalVar const *)arg1)->EndMin(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_EndMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVar_EndMax",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::IntervalVar const *)arg1)->EndMax(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_SetEndMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_SetEndMin",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVar_SetEndMin" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetEndMin(arg2);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      // IMPORTANT: the type and message of the exception raised matter,
      // because they are caught by the python overrides of some CP classes.
      // See the occurrences of the "PyExc_Exception" string below.
      PyErr_SetString(PyExc_Exception, "CP Solver fail");
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_SetEndMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_SetEndMax",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVar_SetEndMax" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetEndMax(arg2);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      // IMPORTANT: the type and message of the exception raised matter,
      // because they are caught by the python overrides of some CP classes.
      // See the occurrences of the "PyExc_Exception" string below.
      PyErr_SetString(PyExc_Exception, "CP Solver fail");
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_SetEndRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntervalVar_SetEndRange",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVar_SetEndRange" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntervalVar_SetEndRange" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetEndRange(arg2,arg3);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      // IMPORTANT: the type and message of the exception raised matter,
      // because they are caught by the python overrides of some CP classes.
      // See the occurrences of the "PyExc_Exception" string below.
      PyErr_SetString(PyExc_Exception, "CP Solver fail");
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_OldEndMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVar_OldEndMin",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::IntervalVar const *)arg1)->OldEndMin(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_OldEndMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVar_OldEndMax",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::IntervalVar const *)arg1)->OldEndMax(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_WhenEndRange__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_WhenEndRange",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->WhenEndRange(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_WhenEndRange__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::Solver::Closure arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_WhenEndRange",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    SharedPyPtr input(obj1);
    arg2 = [input]() {
      return InvokePythonCallableReturning<void>(input.get()); 
    };
  }
  {
    try {
      (arg1)->WhenEndRange(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_WhenEndRange(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntervalVar(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToDemon(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_IntervalVar_WhenEndRange__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntervalVar(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]);
      }
      if (_v) {
        return _wrap_IntervalVar_WhenEndRange__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntervalVar_WhenEndRange'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::IntervalVar::WhenEndRange(operations_research::Demon *)\n"
    "    operations_research::IntervalVar::WhenEndRange(operations_research::Solver::Closure)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntervalVar_WhenEndBound__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_WhenEndBound",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->WhenEndBound(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_WhenEndBound__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::Solver::Closure arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_WhenEndBound",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    SharedPyPtr input(obj1);
    arg2 = [input]() {
      return InvokePythonCallableReturning<void>(input.get()); 
    };
  }
  {
    try {
      (arg1)->WhenEndBound(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_WhenEndBound(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntervalVar(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToDemon(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_IntervalVar_WhenEndBound__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntervalVar(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]);
      }
      if (_v) {
        return _wrap_IntervalVar_WhenEndBound__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntervalVar_WhenEndBound'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::IntervalVar::WhenEndBound(operations_research::Demon *)\n"
    "    operations_research::IntervalVar::WhenEndBound(operations_research::Solver::Closure)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntervalVar_MustBePerformed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVar_MustBePerformed",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (bool)((operations_research::IntervalVar const *)arg1)->MustBePerformed(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_MayBePerformed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVar_MayBePerformed",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (bool)((operations_research::IntervalVar const *)arg1)->MayBePerformed(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_CannotBePerformed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVar_CannotBePerformed",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (bool)((operations_research::IntervalVar const *)arg1)->CannotBePerformed(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_IsPerformedBound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVar_IsPerformedBound",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (bool)((operations_research::IntervalVar const *)arg1)->IsPerformedBound(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_SetPerformed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  bool arg2 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_SetPerformed",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVar_SetPerformed" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetPerformed(arg2);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      // IMPORTANT: the type and message of the exception raised matter,
      // because they are caught by the python overrides of some CP classes.
      // See the occurrences of the "PyExc_Exception" string below.
      PyErr_SetString(PyExc_Exception, "CP Solver fail");
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_WasPerformedBound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVar_WasPerformedBound",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (bool)((operations_research::IntervalVar const *)arg1)->WasPerformedBound(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_WhenPerformedBound__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_WhenPerformedBound",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->WhenPerformedBound(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_WhenPerformedBound__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::Solver::Closure arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_WhenPerformedBound",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    SharedPyPtr input(obj1);
    arg2 = [input]() {
      return InvokePythonCallableReturning<void>(input.get()); 
    };
  }
  {
    try {
      (arg1)->WhenPerformedBound(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_WhenPerformedBound(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntervalVar(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToDemon(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_IntervalVar_WhenPerformedBound__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntervalVar(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]);
      }
      if (_v) {
        return _wrap_IntervalVar_WhenPerformedBound__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntervalVar_WhenPerformedBound'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::IntervalVar::WhenPerformedBound(operations_research::Demon *)\n"
    "    operations_research::IntervalVar::WhenPerformedBound(operations_research::Solver::Closure)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntervalVar_WhenAnything__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_WhenAnything",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->WhenAnything(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_WhenAnything__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::Solver::Closure arg2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_WhenAnything",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    SharedPyPtr input(obj1);
    arg2 = [input]() {
      return InvokePythonCallableReturning<void>(input.get()); 
    };
  }
  {
    try {
      (arg1)->WhenAnything(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_WhenAnything(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntervalVar(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = CanConvertToDemon(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_IntervalVar_WhenAnything__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = CanConvertToIntervalVar(argv[0]);
      if (_v == 0) PyErr_Clear();
    }
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]);
      }
      if (_v) {
        return _wrap_IntervalVar_WhenAnything__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'IntervalVar_WhenAnything'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::IntervalVar::WhenAnything(operations_research::Demon *)\n"
    "    operations_research::IntervalVar::WhenAnything(operations_research::Solver::Closure)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_IntervalVar_StartExpr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  PyObject * obj0 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVar_StartExpr",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntExpr *)(arg1)->StartExpr(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_DurationExpr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  PyObject * obj0 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVar_DurationExpr",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntExpr *)(arg1)->DurationExpr(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_EndExpr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  PyObject * obj0 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVar_EndExpr",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntExpr *)(arg1)->EndExpr(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_PerformedExpr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  PyObject * obj0 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVar_PerformedExpr",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntExpr *)(arg1)->PerformedExpr(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_SafeStartExpr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_SafeStartExpr",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVar_SafeStartExpr" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::IntExpr *)(arg1)->SafeStartExpr(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_SafeDurationExpr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_SafeDurationExpr",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVar_SafeDurationExpr" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::IntExpr *)(arg1)->SafeDurationExpr(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_SafeEndExpr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntExpr *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_SafeEndExpr",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVar_SafeEndExpr" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::IntExpr *)(arg1)->SafeEndExpr(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntExpr, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_EndsAfterEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_EndsAfterEnd",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntervalVar_EndsAfterEnd(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_EndsAfterEndWithDelay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  int64_t arg3 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntervalVar_EndsAfterEndWithDelay",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntervalVar_EndsAfterEndWithDelay" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntervalVar_EndsAfterEndWithDelay(arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_EndsAfterStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_EndsAfterStart",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntervalVar_EndsAfterStart(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_EndsAfterStartWithDelay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  int64_t arg3 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntervalVar_EndsAfterStartWithDelay",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntervalVar_EndsAfterStartWithDelay" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntervalVar_EndsAfterStartWithDelay(arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_EndsAtEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_EndsAtEnd",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntervalVar_EndsAtEnd(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_EndsAtEndWithDelay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  int64_t arg3 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntervalVar_EndsAtEndWithDelay",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntervalVar_EndsAtEndWithDelay" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntervalVar_EndsAtEndWithDelay(arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_EndsAtStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_EndsAtStart",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntervalVar_EndsAtStart(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_EndsAtStartWithDelay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  int64_t arg3 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntervalVar_EndsAtStartWithDelay",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntervalVar_EndsAtStartWithDelay" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntervalVar_EndsAtStartWithDelay(arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_StartsAfterEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_StartsAfterEnd",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntervalVar_StartsAfterEnd(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_StartsAfterEndWithDelay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  int64_t arg3 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntervalVar_StartsAfterEndWithDelay",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntervalVar_StartsAfterEndWithDelay" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntervalVar_StartsAfterEndWithDelay(arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_StartsAfterStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_StartsAfterStart",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntervalVar_StartsAfterStart(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_StartsAfterStartWithDelay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  int64_t arg3 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntervalVar_StartsAfterStartWithDelay",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntervalVar_StartsAfterStartWithDelay" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntervalVar_StartsAfterStartWithDelay(arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_StartsAtEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_StartsAtEnd",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntervalVar_StartsAtEnd(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_StartsAtEndWithDelay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  int64_t arg3 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntervalVar_StartsAtEndWithDelay",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntervalVar_StartsAtEndWithDelay" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntervalVar_StartsAtEndWithDelay(arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_StartsAtStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_StartsAtStart",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntervalVar_StartsAtStart(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_StartsAtStartWithDelay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  int64_t arg3 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntervalVar_StartsAtStartWithDelay",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntervalVar_StartsAtStartWithDelay" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntervalVar_StartsAtStartWithDelay(arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_StaysInSync(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_StaysInSync",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntervalVar_StaysInSync(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_StaysInSyncWithDelay(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  int64_t arg3 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntervalVar_StaysInSyncWithDelay",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntervalVar_StaysInSyncWithDelay" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntervalVar_StaysInSyncWithDelay(arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_EndsAfter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_EndsAfter",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVar_EndsAfter" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntervalVar_EndsAfter(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_EndsAt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_EndsAt",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVar_EndsAt" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntervalVar_EndsAt(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_EndsBefore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_EndsBefore",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVar_EndsBefore" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntervalVar_EndsBefore(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_StartsAfter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_StartsAfter",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVar_StartsAfter" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntervalVar_StartsAfter(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_StartsAt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_StartsAt",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVar_StartsAt" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntervalVar_StartsAt(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_StartsBefore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_StartsBefore",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVar_StartsBefore" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntervalVar_StartsBefore(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_CrossesDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_CrossesDate",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVar_CrossesDate" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntervalVar_CrossesDate(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar_AvoidsDate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  int64_t arg2 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::Constraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVar_AvoidsDate",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVar_AvoidsDate" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::Constraint *)operations_research_IntervalVar_AvoidsDate(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Constraint, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVar___repr__",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = operations_research_IntervalVar___repr__(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVar___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVar *arg1 = (operations_research::IntervalVar *) 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVar___str__",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = operations_research_IntervalVar___str__(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IntervalVar_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__IntervalVar, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SequenceVar_DebugString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SequenceVar *arg1 = (operations_research::SequenceVar *) 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SequenceVar_DebugString",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = ((operations_research::SequenceVar const *)arg1)->DebugString(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SequenceVar_RankFirst(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SequenceVar *arg1 = (operations_research::SequenceVar *) 0 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SequenceVar_RankFirst",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SequenceVar_RankFirst" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->RankFirst(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SequenceVar_RankNotFirst(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SequenceVar *arg1 = (operations_research::SequenceVar *) 0 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SequenceVar_RankNotFirst",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SequenceVar_RankNotFirst" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->RankNotFirst(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SequenceVar_RankLast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SequenceVar *arg1 = (operations_research::SequenceVar *) 0 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SequenceVar_RankLast",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SequenceVar_RankLast" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->RankLast(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SequenceVar_RankNotLast(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SequenceVar *arg1 = (operations_research::SequenceVar *) 0 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SequenceVar_RankNotLast",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SequenceVar_RankNotLast" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->RankNotLast(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SequenceVar_Interval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SequenceVar *arg1 = (operations_research::SequenceVar *) 0 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntervalVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SequenceVar_Interval",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SequenceVar_Interval" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (operations_research::IntervalVar *)((operations_research::SequenceVar const *)arg1)->Interval(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntervalVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SequenceVar_Next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SequenceVar *arg1 = (operations_research::SequenceVar *) 0 ;
  int arg2 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SequenceVar_Next",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SequenceVar_Next" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (operations_research::IntVar *)((operations_research::SequenceVar const *)arg1)->Next(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SequenceVar_Size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SequenceVar *arg1 = (operations_research::SequenceVar *) 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SequenceVar_Size",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::SequenceVar const *)arg1)->size(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SequenceVar___repr__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SequenceVar *arg1 = (operations_research::SequenceVar *) 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SequenceVar___repr__",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = operations_research_SequenceVar___repr__(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SequenceVar___str__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SequenceVar *arg1 = (operations_research::SequenceVar *) 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SequenceVar___str__",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = operations_research_SequenceVar___str__(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SequenceVar_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__SequenceVar, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_AssignmentElement_Activate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::AssignmentElement *arg1 = (operations_research::AssignmentElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AssignmentElement_Activate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__AssignmentElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssignmentElement_Activate" "', argument " "1"" of type '" "operations_research::AssignmentElement *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::AssignmentElement * >(argp1);
  {
    try {
      (arg1)->Activate(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssignmentElement_Deactivate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::AssignmentElement *arg1 = (operations_research::AssignmentElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AssignmentElement_Deactivate",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__AssignmentElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssignmentElement_Deactivate" "', argument " "1"" of type '" "operations_research::AssignmentElement *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::AssignmentElement * >(argp1);
  {
    try {
      (arg1)->Deactivate(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_AssignmentElement_Activated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::AssignmentElement *arg1 = (operations_research::AssignmentElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:AssignmentElement_Activated",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__AssignmentElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "AssignmentElement_Activated" "', argument " "1"" of type '" "operations_research::AssignmentElement const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::AssignmentElement * >(argp1);
  {
    try {
      result = (bool)((operations_research::AssignmentElement const *)arg1)->Activated(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_AssignmentElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::AssignmentElement *arg1 = (operations_research::AssignmentElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_AssignmentElement",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__AssignmentElement, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_AssignmentElement" "', argument " "1"" of type '" "operations_research::AssignmentElement *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::AssignmentElement * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *AssignmentElement_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__AssignmentElement, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IntVarElement_Var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarElement *arg1 = (operations_research::IntVarElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVarElement_Var",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarElement_Var" "', argument " "1"" of type '" "operations_research::IntVarElement const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarElement * >(argp1);
  {
    try {
      result = (operations_research::IntVar *)((operations_research::IntVarElement const *)arg1)->Var(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarElement_Min(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarElement *arg1 = (operations_research::IntVarElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVarElement_Min",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarElement_Min" "', argument " "1"" of type '" "operations_research::IntVarElement const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarElement * >(argp1);
  {
    try {
      result = (int64_t)((operations_research::IntVarElement const *)arg1)->Min(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarElement_SetMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarElement *arg1 = (operations_research::IntVarElement *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVarElement_SetMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarElement_SetMin" "', argument " "1"" of type '" "operations_research::IntVarElement *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarElement * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVarElement_SetMin" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      (arg1)->SetMin(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarElement_Max(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarElement *arg1 = (operations_research::IntVarElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVarElement_Max",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarElement_Max" "', argument " "1"" of type '" "operations_research::IntVarElement const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarElement * >(argp1);
  {
    try {
      result = (int64_t)((operations_research::IntVarElement const *)arg1)->Max(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarElement_SetMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarElement *arg1 = (operations_research::IntVarElement *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVarElement_SetMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarElement_SetMax" "', argument " "1"" of type '" "operations_research::IntVarElement *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarElement * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVarElement_SetMax" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      (arg1)->SetMax(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarElement_Value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarElement *arg1 = (operations_research::IntVarElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVarElement_Value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarElement_Value" "', argument " "1"" of type '" "operations_research::IntVarElement const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarElement * >(argp1);
  {
    try {
      result = (int64_t)((operations_research::IntVarElement const *)arg1)->Value(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarElement_Bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarElement *arg1 = (operations_research::IntVarElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVarElement_Bound",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarElement_Bound" "', argument " "1"" of type '" "operations_research::IntVarElement const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarElement * >(argp1);
  {
    try {
      result = (bool)((operations_research::IntVarElement const *)arg1)->Bound(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarElement_SetRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarElement *arg1 = (operations_research::IntVarElement *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntVarElement_SetRange",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarElement_SetRange" "', argument " "1"" of type '" "operations_research::IntVarElement *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarElement * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVarElement_SetRange" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVarElement_SetRange" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      (arg1)->SetRange(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarElement_SetValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarElement *arg1 = (operations_research::IntVarElement *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVarElement_SetValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarElement_SetValue" "', argument " "1"" of type '" "operations_research::IntVarElement *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarElement * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVarElement_SetValue" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      (arg1)->SetValue(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarElement___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarElement *arg1 = (operations_research::IntVarElement *) 0 ;
  operations_research::IntVarElement *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVarElement___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarElement___eq__" "', argument " "1"" of type '" "operations_research::IntVarElement const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarElement * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__IntVarElement,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntVarElement___eq__" "', argument " "2"" of type '" "operations_research::IntVarElement const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntVarElement___eq__" "', argument " "2"" of type '" "operations_research::IntVarElement const &""'"); 
  }
  arg2 = reinterpret_cast< operations_research::IntVarElement * >(argp2);
  {
    try {
      result = (bool)((operations_research::IntVarElement const *)arg1)->operator ==((operations_research::IntVarElement const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarElement___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarElement *arg1 = (operations_research::IntVarElement *) 0 ;
  operations_research::IntVarElement *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVarElement___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarElement___ne__" "', argument " "1"" of type '" "operations_research::IntVarElement const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarElement * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__IntVarElement,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntVarElement___ne__" "', argument " "2"" of type '" "operations_research::IntVarElement const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntVarElement___ne__" "', argument " "2"" of type '" "operations_research::IntVarElement const &""'"); 
  }
  arg2 = reinterpret_cast< operations_research::IntVarElement * >(argp2);
  {
    try {
      result = (bool)((operations_research::IntVarElement const *)arg1)->operator !=((operations_research::IntVarElement const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IntVarElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarElement *arg1 = (operations_research::IntVarElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IntVarElement",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarElement, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntVarElement" "', argument " "1"" of type '" "operations_research::IntVarElement *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarElement * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IntVarElement_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__IntVarElement, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IntervalVarElement_Var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::IntervalVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVarElement_Var",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntervalVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarElement_Var" "', argument " "1"" of type '" "operations_research::IntervalVarElement const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntervalVarElement * >(argp1);
  {
    try {
      result = (operations_research::IntervalVar *)((operations_research::IntervalVarElement const *)arg1)->Var(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntervalVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarElement_StartMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVarElement_StartMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntervalVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarElement_StartMin" "', argument " "1"" of type '" "operations_research::IntervalVarElement const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntervalVarElement * >(argp1);
  {
    try {
      result = (int64_t)((operations_research::IntervalVarElement const *)arg1)->StartMin(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarElement_StartMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVarElement_StartMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntervalVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarElement_StartMax" "', argument " "1"" of type '" "operations_research::IntervalVarElement const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntervalVarElement * >(argp1);
  {
    try {
      result = (int64_t)((operations_research::IntervalVarElement const *)arg1)->StartMax(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarElement_StartValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVarElement_StartValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntervalVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarElement_StartValue" "', argument " "1"" of type '" "operations_research::IntervalVarElement const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntervalVarElement * >(argp1);
  {
    try {
      result = (int64_t)((operations_research::IntervalVarElement const *)arg1)->StartValue(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarElement_DurationMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVarElement_DurationMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntervalVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarElement_DurationMin" "', argument " "1"" of type '" "operations_research::IntervalVarElement const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntervalVarElement * >(argp1);
  {
    try {
      result = (int64_t)((operations_research::IntervalVarElement const *)arg1)->DurationMin(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarElement_DurationMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVarElement_DurationMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntervalVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarElement_DurationMax" "', argument " "1"" of type '" "operations_research::IntervalVarElement const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntervalVarElement * >(argp1);
  {
    try {
      result = (int64_t)((operations_research::IntervalVarElement const *)arg1)->DurationMax(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarElement_DurationValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVarElement_DurationValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntervalVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarElement_DurationValue" "', argument " "1"" of type '" "operations_research::IntervalVarElement const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntervalVarElement * >(argp1);
  {
    try {
      result = (int64_t)((operations_research::IntervalVarElement const *)arg1)->DurationValue(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarElement_EndMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVarElement_EndMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntervalVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarElement_EndMin" "', argument " "1"" of type '" "operations_research::IntervalVarElement const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntervalVarElement * >(argp1);
  {
    try {
      result = (int64_t)((operations_research::IntervalVarElement const *)arg1)->EndMin(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarElement_EndMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVarElement_EndMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntervalVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarElement_EndMax" "', argument " "1"" of type '" "operations_research::IntervalVarElement const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntervalVarElement * >(argp1);
  {
    try {
      result = (int64_t)((operations_research::IntervalVarElement const *)arg1)->EndMax(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarElement_EndValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVarElement_EndValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntervalVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarElement_EndValue" "', argument " "1"" of type '" "operations_research::IntervalVarElement const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntervalVarElement * >(argp1);
  {
    try {
      result = (int64_t)((operations_research::IntervalVarElement const *)arg1)->EndValue(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarElement_PerformedMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVarElement_PerformedMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntervalVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarElement_PerformedMin" "', argument " "1"" of type '" "operations_research::IntervalVarElement const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntervalVarElement * >(argp1);
  {
    try {
      result = (int64_t)((operations_research::IntervalVarElement const *)arg1)->PerformedMin(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarElement_PerformedMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVarElement_PerformedMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntervalVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarElement_PerformedMax" "', argument " "1"" of type '" "operations_research::IntervalVarElement const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntervalVarElement * >(argp1);
  {
    try {
      result = (int64_t)((operations_research::IntervalVarElement const *)arg1)->PerformedMax(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarElement_PerformedValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVarElement_PerformedValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntervalVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarElement_PerformedValue" "', argument " "1"" of type '" "operations_research::IntervalVarElement const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntervalVarElement * >(argp1);
  {
    try {
      result = (int64_t)((operations_research::IntervalVarElement const *)arg1)->PerformedValue(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarElement_SetStartMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVarElement_SetStartMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntervalVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarElement_SetStartMin" "', argument " "1"" of type '" "operations_research::IntervalVarElement *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntervalVarElement * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVarElement_SetStartMin" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      (arg1)->SetStartMin(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarElement_SetStartMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVarElement_SetStartMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntervalVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarElement_SetStartMax" "', argument " "1"" of type '" "operations_research::IntervalVarElement *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntervalVarElement * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVarElement_SetStartMax" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      (arg1)->SetStartMax(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarElement_SetStartRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntervalVarElement_SetStartRange",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntervalVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarElement_SetStartRange" "', argument " "1"" of type '" "operations_research::IntervalVarElement *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntervalVarElement * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVarElement_SetStartRange" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntervalVarElement_SetStartRange" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      (arg1)->SetStartRange(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarElement_SetStartValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVarElement_SetStartValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntervalVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarElement_SetStartValue" "', argument " "1"" of type '" "operations_research::IntervalVarElement *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntervalVarElement * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVarElement_SetStartValue" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      (arg1)->SetStartValue(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarElement_SetDurationMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVarElement_SetDurationMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntervalVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarElement_SetDurationMin" "', argument " "1"" of type '" "operations_research::IntervalVarElement *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntervalVarElement * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVarElement_SetDurationMin" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      (arg1)->SetDurationMin(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarElement_SetDurationMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVarElement_SetDurationMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntervalVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarElement_SetDurationMax" "', argument " "1"" of type '" "operations_research::IntervalVarElement *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntervalVarElement * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVarElement_SetDurationMax" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      (arg1)->SetDurationMax(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarElement_SetDurationRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntervalVarElement_SetDurationRange",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntervalVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarElement_SetDurationRange" "', argument " "1"" of type '" "operations_research::IntervalVarElement *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntervalVarElement * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVarElement_SetDurationRange" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntervalVarElement_SetDurationRange" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      (arg1)->SetDurationRange(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarElement_SetDurationValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVarElement_SetDurationValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntervalVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarElement_SetDurationValue" "', argument " "1"" of type '" "operations_research::IntervalVarElement *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntervalVarElement * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVarElement_SetDurationValue" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      (arg1)->SetDurationValue(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarElement_SetEndMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVarElement_SetEndMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntervalVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarElement_SetEndMin" "', argument " "1"" of type '" "operations_research::IntervalVarElement *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntervalVarElement * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVarElement_SetEndMin" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      (arg1)->SetEndMin(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarElement_SetEndMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVarElement_SetEndMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntervalVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarElement_SetEndMax" "', argument " "1"" of type '" "operations_research::IntervalVarElement *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntervalVarElement * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVarElement_SetEndMax" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      (arg1)->SetEndMax(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarElement_SetEndRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntervalVarElement_SetEndRange",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntervalVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarElement_SetEndRange" "', argument " "1"" of type '" "operations_research::IntervalVarElement *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntervalVarElement * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVarElement_SetEndRange" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntervalVarElement_SetEndRange" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      (arg1)->SetEndRange(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarElement_SetEndValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVarElement_SetEndValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntervalVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarElement_SetEndValue" "', argument " "1"" of type '" "operations_research::IntervalVarElement *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntervalVarElement * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVarElement_SetEndValue" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      (arg1)->SetEndValue(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarElement_SetPerformedMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVarElement_SetPerformedMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntervalVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarElement_SetPerformedMin" "', argument " "1"" of type '" "operations_research::IntervalVarElement *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntervalVarElement * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVarElement_SetPerformedMin" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      (arg1)->SetPerformedMin(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarElement_SetPerformedMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVarElement_SetPerformedMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntervalVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarElement_SetPerformedMax" "', argument " "1"" of type '" "operations_research::IntervalVarElement *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntervalVarElement * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVarElement_SetPerformedMax" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      (arg1)->SetPerformedMax(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarElement_SetPerformedRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntervalVarElement_SetPerformedRange",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntervalVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarElement_SetPerformedRange" "', argument " "1"" of type '" "operations_research::IntervalVarElement *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntervalVarElement * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVarElement_SetPerformedRange" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntervalVarElement_SetPerformedRange" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      (arg1)->SetPerformedRange(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarElement_SetPerformedValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVarElement_SetPerformedValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntervalVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarElement_SetPerformedValue" "', argument " "1"" of type '" "operations_research::IntervalVarElement *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntervalVarElement * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVarElement_SetPerformedValue" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      (arg1)->SetPerformedValue(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarElement___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  operations_research::IntervalVarElement *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVarElement___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntervalVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarElement___eq__" "', argument " "1"" of type '" "operations_research::IntervalVarElement const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntervalVarElement * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__IntervalVarElement,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntervalVarElement___eq__" "', argument " "2"" of type '" "operations_research::IntervalVarElement const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntervalVarElement___eq__" "', argument " "2"" of type '" "operations_research::IntervalVarElement const &""'"); 
  }
  arg2 = reinterpret_cast< operations_research::IntervalVarElement * >(argp2);
  {
    try {
      result = (bool)((operations_research::IntervalVarElement const *)arg1)->operator ==((operations_research::IntervalVarElement const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarElement___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  operations_research::IntervalVarElement *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVarElement___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntervalVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarElement___ne__" "', argument " "1"" of type '" "operations_research::IntervalVarElement const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntervalVarElement * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__IntervalVarElement,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntervalVarElement___ne__" "', argument " "2"" of type '" "operations_research::IntervalVarElement const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntervalVarElement___ne__" "', argument " "2"" of type '" "operations_research::IntervalVarElement const &""'"); 
  }
  arg2 = reinterpret_cast< operations_research::IntervalVarElement * >(argp2);
  {
    try {
      result = (bool)((operations_research::IntervalVarElement const *)arg1)->operator !=((operations_research::IntervalVarElement const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IntervalVarElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntervalVarElement *arg1 = (operations_research::IntervalVarElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IntervalVarElement",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntervalVarElement, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntervalVarElement" "', argument " "1"" of type '" "operations_research::IntervalVarElement *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntervalVarElement * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IntervalVarElement_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__IntervalVarElement, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SequenceVarElement_Var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SequenceVarElement *arg1 = (operations_research::SequenceVarElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::SequenceVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SequenceVarElement_Var",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SequenceVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SequenceVarElement_Var" "', argument " "1"" of type '" "operations_research::SequenceVarElement const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SequenceVarElement * >(argp1);
  {
    try {
      result = (operations_research::SequenceVar *)((operations_research::SequenceVarElement const *)arg1)->Var(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__SequenceVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SequenceVarElement_ForwardSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SequenceVarElement *arg1 = (operations_research::SequenceVarElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SequenceVarElement_ForwardSequence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SequenceVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SequenceVarElement_ForwardSequence" "', argument " "1"" of type '" "operations_research::SequenceVarElement const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SequenceVarElement * >(argp1);
  {
    try {
      result = (std::vector< int > *) &((operations_research::SequenceVarElement const *)arg1)->ForwardSequence(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    resultobj = vector_output_helper(result, &PyInt_FromLong);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SequenceVarElement_BackwardSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SequenceVarElement *arg1 = (operations_research::SequenceVarElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SequenceVarElement_BackwardSequence",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SequenceVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SequenceVarElement_BackwardSequence" "', argument " "1"" of type '" "operations_research::SequenceVarElement const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SequenceVarElement * >(argp1);
  {
    try {
      result = (std::vector< int > *) &((operations_research::SequenceVarElement const *)arg1)->BackwardSequence(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    resultobj = vector_output_helper(result, &PyInt_FromLong);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SequenceVarElement_Unperformed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SequenceVarElement *arg1 = (operations_research::SequenceVarElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SequenceVarElement_Unperformed",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SequenceVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SequenceVarElement_Unperformed" "', argument " "1"" of type '" "operations_research::SequenceVarElement const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SequenceVarElement * >(argp1);
  {
    try {
      result = (std::vector< int > *) &((operations_research::SequenceVarElement const *)arg1)->Unperformed(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    resultobj = vector_output_helper(result, &PyInt_FromLong);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SequenceVarElement_SetSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SequenceVarElement *arg1 = (operations_research::SequenceVarElement *) 0 ;
  std::vector< int > *arg2 = 0 ;
  std::vector< int > *arg3 = 0 ;
  std::vector< int > *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > temp2 ;
  std::vector< int > temp3 ;
  std::vector< int > temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SequenceVarElement_SetSequence",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SequenceVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SequenceVarElement_SetSequence" "', argument " "1"" of type '" "operations_research::SequenceVarElement *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SequenceVarElement * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    if (!vector_input_helper(obj3, &temp4, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg4 = &temp4;
  }
  {
    try {
      (arg1)->SetSequence((std::vector< int > const &)*arg2,(std::vector< int > const &)*arg3,(std::vector< int > const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SequenceVarElement_SetForwardSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SequenceVarElement *arg1 = (operations_research::SequenceVarElement *) 0 ;
  std::vector< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SequenceVarElement_SetForwardSequence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SequenceVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SequenceVarElement_SetForwardSequence" "', argument " "1"" of type '" "operations_research::SequenceVarElement *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SequenceVarElement * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      (arg1)->SetForwardSequence((std::vector< int > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SequenceVarElement_SetBackwardSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SequenceVarElement *arg1 = (operations_research::SequenceVarElement *) 0 ;
  std::vector< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SequenceVarElement_SetBackwardSequence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SequenceVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SequenceVarElement_SetBackwardSequence" "', argument " "1"" of type '" "operations_research::SequenceVarElement *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SequenceVarElement * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      (arg1)->SetBackwardSequence((std::vector< int > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SequenceVarElement_SetUnperformed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SequenceVarElement *arg1 = (operations_research::SequenceVarElement *) 0 ;
  std::vector< int > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SequenceVarElement_SetUnperformed",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SequenceVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SequenceVarElement_SetUnperformed" "', argument " "1"" of type '" "operations_research::SequenceVarElement *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SequenceVarElement * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      (arg1)->SetUnperformed((std::vector< int > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SequenceVarElement___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SequenceVarElement *arg1 = (operations_research::SequenceVarElement *) 0 ;
  operations_research::SequenceVarElement *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SequenceVarElement___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SequenceVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SequenceVarElement___eq__" "', argument " "1"" of type '" "operations_research::SequenceVarElement const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SequenceVarElement * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__SequenceVarElement,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SequenceVarElement___eq__" "', argument " "2"" of type '" "operations_research::SequenceVarElement const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SequenceVarElement___eq__" "', argument " "2"" of type '" "operations_research::SequenceVarElement const &""'"); 
  }
  arg2 = reinterpret_cast< operations_research::SequenceVarElement * >(argp2);
  {
    try {
      result = (bool)((operations_research::SequenceVarElement const *)arg1)->operator ==((operations_research::SequenceVarElement const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SequenceVarElement___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SequenceVarElement *arg1 = (operations_research::SequenceVarElement *) 0 ;
  operations_research::SequenceVarElement *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SequenceVarElement___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SequenceVarElement, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SequenceVarElement___ne__" "', argument " "1"" of type '" "operations_research::SequenceVarElement const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SequenceVarElement * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__SequenceVarElement,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SequenceVarElement___ne__" "', argument " "2"" of type '" "operations_research::SequenceVarElement const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SequenceVarElement___ne__" "', argument " "2"" of type '" "operations_research::SequenceVarElement const &""'"); 
  }
  arg2 = reinterpret_cast< operations_research::SequenceVarElement * >(argp2);
  {
    try {
      result = (bool)((operations_research::SequenceVarElement const *)arg1)->operator !=((operations_research::SequenceVarElement const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SequenceVarElement(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SequenceVarElement *arg1 = (operations_research::SequenceVarElement *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SequenceVarElement",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SequenceVarElement, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SequenceVarElement" "', argument " "1"" of type '" "operations_research::SequenceVarElement *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SequenceVarElement * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SequenceVarElement_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__SequenceVarElement, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_Assignment_Clear(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Assignment_Clear",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_Clear" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    try {
      (arg1)->Clear(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_Empty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Assignment_Empty",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_Empty" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    try {
      result = (bool)((operations_research::Assignment const *)arg1)->Empty(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_Size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Assignment_Size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_Size" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    try {
      result = (int)((operations_research::Assignment const *)arg1)->Size(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_NumIntVars(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Assignment_NumIntVars",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_NumIntVars" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    try {
      result = (int)((operations_research::Assignment const *)arg1)->NumIntVars(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_NumIntervalVars(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Assignment_NumIntervalVars",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_NumIntervalVars" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    try {
      result = (int)((operations_research::Assignment const *)arg1)->NumIntervalVars(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_NumSequenceVars(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Assignment_NumSequenceVars",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_NumSequenceVars" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    try {
      result = (int)((operations_research::Assignment const *)arg1)->NumSequenceVars(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_Store(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Assignment_Store",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_Store" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    try {
      (arg1)->Store(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_Restore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Assignment_Restore",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_Restore" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    try {
      (arg1)->Restore(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_Load__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_Load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_Load" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Assignment_Load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Assignment_Load" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)(arg1)->Load((std::string const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_Load__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::AssignmentProto *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_Load",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_Load" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    arg2 = new operations_research::AssignmentProto;
    PyObject* const pyresult = PyObject_CallMethod(
      obj1, const_cast<char*>("SerializeToString"), nullptr);
    if (pyresult != nullptr) {
      char* buffer = nullptr;
      Py_ssize_t length = 0;
      int result = PyString_AsStringAndSize(pyresult, &buffer, &length);
      if (buffer != nullptr) {
        arg2->ParseFromArray(buffer, length);
      }
      Py_DECREF(pyresult);
    }
  }
  {
    try {
      (arg1)->Load((operations_research::AssignmentProto const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  {
    delete arg2;
  }
  return resultobj;
fail:
  {
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_Load(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        bool ok = false;
        PyObject* const module = PyImport_ImportModule("ortools.constraint_solver.assignment_pb2");
        if (module != nullptr) {
          PyObject* const dict = PyModule_GetDict(module);
          if (dict != nullptr) {
            PyObject* const clss = PyDict_GetItemString(dict, "AssignmentProto");
            if (clss != nullptr) {
              if (PyObject_IsInstance(argv[1], clss)) {
                ok = true;
              }
            }
          }
          Py_DECREF(module);
        }
        _v = ok ? 1 : 0;
      }
      if (_v) {
        return _wrap_Assignment_Load__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Assignment_Load__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Assignment_Load'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Assignment::Load(std::string const &)\n"
    "    operations_research::Assignment::Load(operations_research::AssignmentProto const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Assignment_Save__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_Save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_Save" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Assignment_Save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Assignment_Save" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)((operations_research::Assignment const *)arg1)->Save((std::string const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_Save__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::AssignmentProto *arg2 = (operations_research::AssignmentProto *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_Save",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_Save" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    arg2 = new operations_research::AssignmentProto;
    PyObject* const pyresult = PyObject_CallMethod(
      obj1, const_cast<char*>("SerializeToString"), nullptr);
    if (pyresult != nullptr) {
      char* buffer = nullptr;
      Py_ssize_t length = 0;
      int result = PyString_AsStringAndSize(pyresult, &buffer, &length);
      if (buffer != nullptr) {
        arg2->ParseFromArray(buffer, length);
      }
      Py_DECREF(pyresult);
    }
  }
  {
    try {
      ((operations_research::Assignment const *)arg1)->Save(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  {
    std::string encoded_protobuf;
    arg2->SerializeToString(&encoded_protobuf);
    
    PyObject* const python_encoded_protobuf =
    PyBytes_FromStringAndSize(encoded_protobuf.c_str(),
      encoded_protobuf.size());
    
    
    
    
    
    if (python_encoded_protobuf != nullptr) {
      PyObject* const result = PyObject_CallMethod(
        obj1, const_cast<char*>("ParseFromString"),
        const_cast<char*>("(O)"), python_encoded_protobuf);
      Py_DECREF(python_encoded_protobuf);
      if (result != nullptr) {
        Py_DECREF(result); 
      }
    }
  }
  {
    delete arg2;
  }
  return resultobj;
fail:
  {
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_Save(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        bool ok = false;
        PyObject* const module = PyImport_ImportModule("ortools.constraint_solver.assignment_pb2");
        if (module != nullptr) {
          PyObject* const dict = PyModule_GetDict(module);
          if (dict != nullptr) {
            PyObject* const clss = PyDict_GetItemString(dict, "AssignmentProto");
            if (clss != nullptr) {
              if (PyObject_IsInstance(argv[1], clss)) {
                ok = true;
              }
            }
          }
          Py_DECREF(module);
        }
        _v = ok ? 1 : 0;
      }
      if (_v) {
        return _wrap_Assignment_Save__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_Assignment_Save__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Assignment_Save'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Assignment::Save(std::string const &) const\n"
    "    operations_research::Assignment::Save(operations_research::AssignmentProto *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Assignment_AddObjective(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_AddObjective",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_AddObjective" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->AddObjective(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_Objective(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Assignment_Objective",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_Objective" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    try {
      result = (operations_research::IntVar *)((operations_research::Assignment const *)arg1)->Objective(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_HasObjective(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Assignment_HasObjective",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_HasObjective" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    try {
      result = (bool)((operations_research::Assignment const *)arg1)->HasObjective(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_ObjectiveMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Assignment_ObjectiveMin",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_ObjectiveMin" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    try {
      result = (int64_t)((operations_research::Assignment const *)arg1)->ObjectiveMin(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_ObjectiveMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Assignment_ObjectiveMax",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_ObjectiveMax" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    try {
      result = (int64_t)((operations_research::Assignment const *)arg1)->ObjectiveMax(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_ObjectiveValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Assignment_ObjectiveValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_ObjectiveValue" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    try {
      result = (int64_t)((operations_research::Assignment const *)arg1)->ObjectiveValue(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_ObjectiveBound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Assignment_ObjectiveBound",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_ObjectiveBound" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    try {
      result = (bool)((operations_research::Assignment const *)arg1)->ObjectiveBound(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_SetObjectiveMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_SetObjectiveMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_SetObjectiveMin" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Assignment_SetObjectiveMin" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      (arg1)->SetObjectiveMin(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_SetObjectiveMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_SetObjectiveMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_SetObjectiveMax" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Assignment_SetObjectiveMax" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      (arg1)->SetObjectiveMax(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_SetObjectiveValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_SetObjectiveValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_SetObjectiveValue" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Assignment_SetObjectiveValue" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      (arg1)->SetObjectiveValue(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_SetObjectiveRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Assignment_SetObjectiveRange",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_SetObjectiveRange" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "Assignment_SetObjectiveRange" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Assignment_SetObjectiveRange" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      (arg1)->SetObjectiveRange(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_Add__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntVarElement *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_Add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_Add" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntVarElement *)(arg1)->Add(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVarElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_Add__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_Add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_Add" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      (arg1)->Add((std::vector< operations_research::IntVar * > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_Min(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_Min",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_Min" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::Assignment const *)arg1)->Min((operations_research::IntVar const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_Max(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_Max",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_Max" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::Assignment const *)arg1)->Max((operations_research::IntVar const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_Value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_Value",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_Value" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::Assignment const *)arg1)->Value((operations_research::IntVar const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_Bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_Bound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_Bound" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (bool)((operations_research::Assignment const *)arg1)->Bound((operations_research::IntVar const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_SetMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Assignment_SetMin",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_SetMin" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Assignment_SetMin" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      (arg1)->SetMin((operations_research::IntVar const *)arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_SetMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Assignment_SetMax",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_SetMax" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Assignment_SetMax" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      (arg1)->SetMax((operations_research::IntVar const *)arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_SetRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  int64_t arg3 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Assignment_SetRange",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_SetRange" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Assignment_SetRange" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Assignment_SetRange" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      (arg1)->SetRange((operations_research::IntVar const *)arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_SetValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Assignment_SetValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_SetValue" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Assignment_SetValue" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      (arg1)->SetValue((operations_research::IntVar const *)arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_Add__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntervalVarElement *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_Add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_Add" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::IntervalVarElement *)(arg1)->Add(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntervalVarElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_Add__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  std::vector< operations_research::IntervalVar * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntervalVar * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_Add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_Add" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntervalVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntervalVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      (arg1)->Add((std::vector< operations_research::IntervalVar * > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_StartMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_StartMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_StartMin" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::Assignment const *)arg1)->StartMin((operations_research::IntervalVar const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_StartMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_StartMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_StartMax" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::Assignment const *)arg1)->StartMax((operations_research::IntervalVar const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_StartValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_StartValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_StartValue" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::Assignment const *)arg1)->StartValue((operations_research::IntervalVar const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_DurationMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_DurationMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_DurationMin" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::Assignment const *)arg1)->DurationMin((operations_research::IntervalVar const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_DurationMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_DurationMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_DurationMax" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::Assignment const *)arg1)->DurationMax((operations_research::IntervalVar const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_DurationValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_DurationValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_DurationValue" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::Assignment const *)arg1)->DurationValue((operations_research::IntervalVar const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_EndMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_EndMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_EndMin" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::Assignment const *)arg1)->EndMin((operations_research::IntervalVar const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_EndMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_EndMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_EndMax" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::Assignment const *)arg1)->EndMax((operations_research::IntervalVar const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_EndValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_EndValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_EndValue" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::Assignment const *)arg1)->EndValue((operations_research::IntervalVar const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_PerformedMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_PerformedMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_PerformedMin" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::Assignment const *)arg1)->PerformedMin((operations_research::IntervalVar const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_PerformedMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_PerformedMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_PerformedMax" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::Assignment const *)arg1)->PerformedMax((operations_research::IntervalVar const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_PerformedValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_PerformedValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_PerformedValue" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)((operations_research::Assignment const *)arg1)->PerformedValue((operations_research::IntervalVar const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_SetStartMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Assignment_SetStartMin",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_SetStartMin" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Assignment_SetStartMin" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      (arg1)->SetStartMin((operations_research::IntervalVar const *)arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_SetStartMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Assignment_SetStartMax",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_SetStartMax" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Assignment_SetStartMax" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      (arg1)->SetStartMax((operations_research::IntervalVar const *)arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_SetStartRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  int64_t arg3 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Assignment_SetStartRange",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_SetStartRange" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Assignment_SetStartRange" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Assignment_SetStartRange" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      (arg1)->SetStartRange((operations_research::IntervalVar const *)arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_SetStartValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Assignment_SetStartValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_SetStartValue" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Assignment_SetStartValue" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      (arg1)->SetStartValue((operations_research::IntervalVar const *)arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_SetDurationMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Assignment_SetDurationMin",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_SetDurationMin" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Assignment_SetDurationMin" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      (arg1)->SetDurationMin((operations_research::IntervalVar const *)arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_SetDurationMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Assignment_SetDurationMax",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_SetDurationMax" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Assignment_SetDurationMax" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      (arg1)->SetDurationMax((operations_research::IntervalVar const *)arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_SetDurationRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  int64_t arg3 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Assignment_SetDurationRange",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_SetDurationRange" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Assignment_SetDurationRange" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Assignment_SetDurationRange" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      (arg1)->SetDurationRange((operations_research::IntervalVar const *)arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_SetDurationValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Assignment_SetDurationValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_SetDurationValue" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Assignment_SetDurationValue" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      (arg1)->SetDurationValue((operations_research::IntervalVar const *)arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_SetEndMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Assignment_SetEndMin",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_SetEndMin" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Assignment_SetEndMin" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      (arg1)->SetEndMin((operations_research::IntervalVar const *)arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_SetEndMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Assignment_SetEndMax",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_SetEndMax" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Assignment_SetEndMax" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      (arg1)->SetEndMax((operations_research::IntervalVar const *)arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_SetEndRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  int64_t arg3 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Assignment_SetEndRange",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_SetEndRange" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Assignment_SetEndRange" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Assignment_SetEndRange" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      (arg1)->SetEndRange((operations_research::IntervalVar const *)arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_SetEndValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Assignment_SetEndValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_SetEndValue" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Assignment_SetEndValue" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      (arg1)->SetEndValue((operations_research::IntervalVar const *)arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_SetPerformedMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Assignment_SetPerformedMin",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_SetPerformedMin" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Assignment_SetPerformedMin" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      (arg1)->SetPerformedMin((operations_research::IntervalVar const *)arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_SetPerformedMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Assignment_SetPerformedMax",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_SetPerformedMax" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Assignment_SetPerformedMax" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      (arg1)->SetPerformedMax((operations_research::IntervalVar const *)arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_SetPerformedRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  int64_t arg3 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:Assignment_SetPerformedRange",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_SetPerformedRange" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Assignment_SetPerformedRange" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "Assignment_SetPerformedRange" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      (arg1)->SetPerformedRange((operations_research::IntervalVar const *)arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_SetPerformedValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Assignment_SetPerformedValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_SetPerformedValue" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "Assignment_SetPerformedValue" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      (arg1)->SetPerformedValue((operations_research::IntervalVar const *)arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_Add__SWIG_4(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::SequenceVarElement *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_Add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_Add" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (operations_research::SequenceVarElement *)(arg1)->Add(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__SequenceVarElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_Add__SWIG_5(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  std::vector< operations_research::SequenceVar * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::SequenceVar * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_Add",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_Add" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::SequenceVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::SequenceVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      (arg1)->Add((std::vector< operations_research::SequenceVar * > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_Add(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntVar(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_Assignment_Add__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        return _wrap_Assignment_Add__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntervalVar(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_Assignment_Add__SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntervalVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        return _wrap_Assignment_Add__SWIG_3(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToSequenceVar(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_Assignment_Add__SWIG_4(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToSequenceVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        return _wrap_Assignment_Add__SWIG_5(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Assignment_Add'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Assignment::Add(operations_research::IntVar *)\n"
    "    operations_research::Assignment::Add(std::vector< operations_research::IntVar * > const &)\n"
    "    operations_research::Assignment::Add(operations_research::IntervalVar *)\n"
    "    operations_research::Assignment::Add(std::vector< operations_research::IntervalVar * > const &)\n"
    "    operations_research::Assignment::Add(operations_research::SequenceVar *)\n"
    "    operations_research::Assignment::Add(std::vector< operations_research::SequenceVar * > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Assignment_ForwardSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_ForwardSequence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_ForwardSequence" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (std::vector< int > *) &((operations_research::Assignment const *)arg1)->ForwardSequence((operations_research::SequenceVar const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    resultobj = vector_output_helper(result, &PyInt_FromLong);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_BackwardSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_BackwardSequence",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_BackwardSequence" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (std::vector< int > *) &((operations_research::Assignment const *)arg1)->BackwardSequence((operations_research::SequenceVar const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    resultobj = vector_output_helper(result, &PyInt_FromLong);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_Unperformed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_Unperformed",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_Unperformed" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (std::vector< int > *) &((operations_research::Assignment const *)arg1)->Unperformed((operations_research::SequenceVar const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    resultobj = vector_output_helper(result, &PyInt_FromLong);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_SetSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) 0 ;
  std::vector< int > *arg3 = 0 ;
  std::vector< int > *arg4 = 0 ;
  std::vector< int > *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > temp3 ;
  std::vector< int > temp4 ;
  std::vector< int > temp5 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:Assignment_SetSequence",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_SetSequence" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    if (!vector_input_helper(obj3, &temp4, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg4 = &temp4;
  }
  {
    if (!vector_input_helper(obj4, &temp5, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg5 = &temp5;
  }
  {
    try {
      (arg1)->SetSequence((operations_research::SequenceVar const *)arg2,(std::vector< int > const &)*arg3,(std::vector< int > const &)*arg4,(std::vector< int > const &)*arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_SetForwardSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) 0 ;
  std::vector< int > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Assignment_SetForwardSequence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_SetForwardSequence" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    try {
      (arg1)->SetForwardSequence((operations_research::SequenceVar const *)arg2,(std::vector< int > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_SetBackwardSequence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) 0 ;
  std::vector< int > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Assignment_SetBackwardSequence",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_SetBackwardSequence" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    try {
      (arg1)->SetBackwardSequence((operations_research::SequenceVar const *)arg2,(std::vector< int > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_SetUnperformed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) 0 ;
  std::vector< int > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Assignment_SetUnperformed",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_SetUnperformed" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    try {
      (arg1)->SetUnperformed((operations_research::SequenceVar const *)arg2,(std::vector< int > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_Activate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_Activate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_Activate" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->Activate((operations_research::IntVar const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_Deactivate__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_Deactivate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_Deactivate" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->Deactivate((operations_research::IntVar const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_Activated__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_Activated",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_Activated" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (bool)((operations_research::Assignment const *)arg1)->Activated((operations_research::IntVar const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_Activate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_Activate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_Activate" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->Activate((operations_research::IntervalVar const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_Deactivate__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_Deactivate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_Deactivate" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->Deactivate((operations_research::IntervalVar const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_Activated__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_Activated",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_Activated" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (bool)((operations_research::Assignment const *)arg1)->Activated((operations_research::IntervalVar const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_Activate__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_Activate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_Activate" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->Activate((operations_research::SequenceVar const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_Activate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntVar(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_Assignment_Activate__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntervalVar(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_Assignment_Activate__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToSequenceVar(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_Assignment_Activate__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Assignment_Activate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Assignment::Activate(operations_research::IntVar const *)\n"
    "    operations_research::Assignment::Activate(operations_research::IntervalVar const *)\n"
    "    operations_research::Assignment::Activate(operations_research::SequenceVar const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Assignment_Deactivate__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_Deactivate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_Deactivate" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->Deactivate((operations_research::SequenceVar const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_Deactivate(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntVar(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_Assignment_Deactivate__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntervalVar(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_Assignment_Deactivate__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToSequenceVar(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_Assignment_Deactivate__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Assignment_Deactivate'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Assignment::Deactivate(operations_research::IntVar const *)\n"
    "    operations_research::Assignment::Deactivate(operations_research::IntervalVar const *)\n"
    "    operations_research::Assignment::Deactivate(operations_research::SequenceVar const *)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Assignment_Activated__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment_Activated",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_Activated" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (bool)((operations_research::Assignment const *)arg1)->Activated((operations_research::SequenceVar const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_Activated(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntVar(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_Assignment_Activated__SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToIntervalVar(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_Assignment_Activated__SWIG_1(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = CanConvertToSequenceVar(argv[1]);
        if (_v == 0) PyErr_Clear();
      }
      if (_v) {
        return _wrap_Assignment_Activated__SWIG_2(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Assignment_Activated'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Assignment::Activated(operations_research::IntVar const *) const\n"
    "    operations_research::Assignment::Activated(operations_research::IntervalVar const *) const\n"
    "    operations_research::Assignment::Activated(operations_research::SequenceVar const *) const\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Assignment_DebugString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Assignment_DebugString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_DebugString" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    try {
      result = ((operations_research::Assignment const *)arg1)->DebugString(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_IntVarContainer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::Assignment::IntContainer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Assignment_IntVarContainer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_IntVarContainer" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    try {
      result = (operations_research::Assignment::IntContainer *) &((operations_research::Assignment const *)arg1)->IntVarContainer(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__IntVar_operations_research__IntVarElement_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_MutableIntVarContainer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::Assignment::IntContainer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Assignment_MutableIntVarContainer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_MutableIntVarContainer" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    try {
      result = (operations_research::Assignment::IntContainer *)(arg1)->MutableIntVarContainer(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__IntVar_operations_research__IntVarElement_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_IntervalVarContainer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::Assignment::IntervalContainer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Assignment_IntervalVarContainer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_IntervalVarContainer" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    try {
      result = (operations_research::Assignment::IntervalContainer *) &((operations_research::Assignment const *)arg1)->IntervalVarContainer(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__IntervalVar_operations_research__IntervalVarElement_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_MutableIntervalVarContainer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::Assignment::IntervalContainer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Assignment_MutableIntervalVarContainer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_MutableIntervalVarContainer" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    try {
      result = (operations_research::Assignment::IntervalContainer *)(arg1)->MutableIntervalVarContainer(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__IntervalVar_operations_research__IntervalVarElement_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_SequenceVarContainer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::Assignment::SequenceContainer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Assignment_SequenceVarContainer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_SequenceVarContainer" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    try {
      result = (operations_research::Assignment::SequenceContainer *) &((operations_research::Assignment const *)arg1)->SequenceVarContainer(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__SequenceVar_operations_research__SequenceVarElement_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment_MutableSequenceVarContainer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::Assignment::SequenceContainer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Assignment_MutableSequenceVarContainer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment_MutableSequenceVarContainer" "', argument " "1"" of type '" "operations_research::Assignment *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  {
    try {
      result = (operations_research::Assignment::SequenceContainer *)(arg1)->MutableSequenceVarContainer(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__SequenceVar_operations_research__SequenceVarElement_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::Assignment *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment___eq__" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__Assignment,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Assignment___eq__" "', argument " "2"" of type '" "operations_research::Assignment const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Assignment___eq__" "', argument " "2"" of type '" "operations_research::Assignment const &""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  {
    try {
      result = (bool)((operations_research::Assignment const *)arg1)->operator ==((operations_research::Assignment const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Assignment___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Assignment *arg1 = (operations_research::Assignment *) 0 ;
  operations_research::Assignment *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Assignment___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Assignment___ne__" "', argument " "1"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Assignment * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__Assignment,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "Assignment___ne__" "', argument " "2"" of type '" "operations_research::Assignment const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "Assignment___ne__" "', argument " "2"" of type '" "operations_research::Assignment const &""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  {
    try {
      result = (bool)((operations_research::Assignment const *)arg1)->operator !=((operations_research::Assignment const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Assignment_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__Assignment, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap___lshift____SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  std::ostream *arg1 = 0 ;
  operations_research::Assignment *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::ostream *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:__lshift__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__ostream,  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "1"" of type '" "std::ostream &""'"); 
  }
  arg1 = reinterpret_cast< std::ostream * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__Assignment,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "__lshift__" "', argument " "2"" of type '" "operations_research::Assignment const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "__lshift__" "', argument " "2"" of type '" "operations_research::Assignment const &""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  {
    try {
      result = (std::ostream *) &operations_research::operator <<(*arg1,(operations_research::Assignment const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__ostream, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap___lshift__(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_operations_research__Solver, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_0(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_operations_research__Assignment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_2(self, args);
      }
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_std__ostream, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_operations_research__BaseObject, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap___lshift____SWIG_1(self, args);
      }
    }
  }
  
fail:
  Py_INCREF(Py_NotImplemented);
  return Py_NotImplemented;
}


SWIGINTERN PyObject *_wrap_Pack_AddWeightedSumLessOrEqualConstantDimension__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  std::vector< int64_t > *arg2 = 0 ;
  std::vector< int64_t > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int64_t > temp2 ;
  std::vector< int64_t > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Pack_AddWeightedSumLessOrEqualConstantDimension",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Pack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pack_AddWeightedSumLessOrEqualConstantDimension" "', argument " "1"" of type '" "operations_research::Pack *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Pack * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    try {
      (arg1)->AddWeightedSumLessOrEqualConstantDimension((std::vector< int64_t > const &)*arg2,(std::vector< int64_t > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pack_AddWeightedSumLessOrEqualConstantDimension__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  operations_research::Solver::IndexEvaluator1 arg2 ;
  std::vector< int64_t > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int64_t > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Pack_AddWeightedSumLessOrEqualConstantDimension",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Pack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pack_AddWeightedSumLessOrEqualConstantDimension" "', argument " "1"" of type '" "operations_research::Pack *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Pack * >(argp1);
  {
    SharedPyPtr input(obj1);
    arg2 = [input](int64_t index) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "(L)", index);
    };
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    try {
      (arg1)->AddWeightedSumLessOrEqualConstantDimension(arg2,(std::vector< int64_t > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pack_AddWeightedSumLessOrEqualConstantDimension__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  operations_research::Solver::IndexEvaluator2 arg2 ;
  std::vector< int64_t > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int64_t > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Pack_AddWeightedSumLessOrEqualConstantDimension",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Pack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pack_AddWeightedSumLessOrEqualConstantDimension" "', argument " "1"" of type '" "operations_research::Pack *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Pack * >(argp1);
  {
    SharedPyPtr input(obj1);
    arg2 = [input](int64_t i, int64_t j) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "LL", i, j);
    };
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    try {
      (arg1)->AddWeightedSumLessOrEqualConstantDimension(arg2,(std::vector< int64_t > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pack_AddWeightedSumLessOrEqualConstantDimension(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Pack, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          return _wrap_Pack_AddWeightedSumLessOrEqualConstantDimension__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Pack, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]);
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          return _wrap_Pack_AddWeightedSumLessOrEqualConstantDimension__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Pack, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]);
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          return _wrap_Pack_AddWeightedSumLessOrEqualConstantDimension__SWIG_2(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Pack_AddWeightedSumLessOrEqualConstantDimension'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Pack::AddWeightedSumLessOrEqualConstantDimension(std::vector< int64_t > const &,std::vector< int64_t > const &)\n"
    "    operations_research::Pack::AddWeightedSumLessOrEqualConstantDimension(operations_research::Solver::IndexEvaluator1,std::vector< int64_t > const &)\n"
    "    operations_research::Pack::AddWeightedSumLessOrEqualConstantDimension(operations_research::Solver::IndexEvaluator2,std::vector< int64_t > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Pack_AddWeightedSumEqualVarDimension__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  std::vector< int64_t > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int64_t > temp2 ;
  std::vector< operations_research::IntVar * > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Pack_AddWeightedSumEqualVarDimension",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Pack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pack_AddWeightedSumEqualVarDimension" "', argument " "1"" of type '" "operations_research::Pack *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Pack * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    try {
      (arg1)->AddWeightedSumEqualVarDimension((std::vector< int64_t > const &)*arg2,(std::vector< operations_research::IntVar * > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pack_AddWeightedSumEqualVarDimension__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  operations_research::Solver::IndexEvaluator2 arg2 ;
  std::vector< operations_research::IntVar * > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Pack_AddWeightedSumEqualVarDimension",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Pack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pack_AddWeightedSumEqualVarDimension" "', argument " "1"" of type '" "operations_research::Pack *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Pack * >(argp1);
  {
    SharedPyPtr input(obj1);
    arg2 = [input](int64_t i, int64_t j) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "LL", i, j);
    };
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    try {
      (arg1)->AddWeightedSumEqualVarDimension(arg2,(std::vector< operations_research::IntVar * > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pack_AddWeightedSumEqualVarDimension(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Pack, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          return _wrap_Pack_AddWeightedSumEqualVarDimension__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__Pack, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]);
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          return _wrap_Pack_AddWeightedSumEqualVarDimension__SWIG_1(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'Pack_AddWeightedSumEqualVarDimension'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::Pack::AddWeightedSumEqualVarDimension(std::vector< int64_t > const &,std::vector< operations_research::IntVar * > const &)\n"
    "    operations_research::Pack::AddWeightedSumEqualVarDimension(operations_research::Solver::IndexEvaluator2,std::vector< operations_research::IntVar * > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_Pack_AddSumVariableWeightsLessOrEqualConstantDimension(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< int64_t > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  std::vector< int64_t > temp3 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Pack_AddSumVariableWeightsLessOrEqualConstantDimension",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Pack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pack_AddSumVariableWeightsLessOrEqualConstantDimension" "', argument " "1"" of type '" "operations_research::Pack *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Pack * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    try {
      (arg1)->AddSumVariableWeightsLessOrEqualConstantDimension((std::vector< operations_research::IntVar * > const &)*arg2,(std::vector< int64_t > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pack_AddWeightedSumOfAssignedDimension(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  std::vector< int64_t > *arg2 = 0 ;
  operations_research::IntVar *arg3 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int64_t > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:Pack_AddWeightedSumOfAssignedDimension",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Pack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pack_AddWeightedSumOfAssignedDimension" "', argument " "1"" of type '" "operations_research::Pack *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Pack * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    if (!PyObjAs(obj2, &arg3)) SWIG_fail;
  }
  {
    try {
      (arg1)->AddWeightedSumOfAssignedDimension((std::vector< int64_t > const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pack_AddCountUsedBinDimension(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pack_AddCountUsedBinDimension",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Pack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pack_AddCountUsedBinDimension" "', argument " "1"" of type '" "operations_research::Pack *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Pack * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->AddCountUsedBinDimension(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pack_AddCountAssignedItemsDimension(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:Pack_AddCountAssignedItemsDimension",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Pack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pack_AddCountAssignedItemsDimension" "', argument " "1"" of type '" "operations_research::Pack *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Pack * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->AddCountAssignedItemsDimension(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pack_Post(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pack_Post",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Pack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pack_Post" "', argument " "1"" of type '" "operations_research::Pack *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Pack * >(argp1);
  {
    try {
      (arg1)->Post(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pack_InitialPropagateWrapper(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pack_InitialPropagateWrapper",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Pack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pack_InitialPropagateWrapper" "', argument " "1"" of type '" "operations_research::Pack *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Pack * >(argp1);
  {
    try {
      (arg1)->InitialPropagate(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_Pack_DebugString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Pack *arg1 = (operations_research::Pack *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:Pack_DebugString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__Pack, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "Pack_DebugString" "', argument " "1"" of type '" "operations_research::Pack const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Pack * >(argp1);
  {
    try {
      result = ((operations_research::Pack const *)arg1)->DebugString(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *Pack_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__Pack, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_DisjunctiveConstraint_SequenceVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::DisjunctiveConstraint *arg1 = (operations_research::DisjunctiveConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::SequenceVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:DisjunctiveConstraint_SequenceVar",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__DisjunctiveConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DisjunctiveConstraint_SequenceVar" "', argument " "1"" of type '" "operations_research::DisjunctiveConstraint *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::DisjunctiveConstraint * >(argp1);
  {
    try {
      result = (operations_research::SequenceVar *)(arg1)->MakeSequenceVar(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__SequenceVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DisjunctiveConstraint_SetTransitionTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::DisjunctiveConstraint *arg1 = (operations_research::DisjunctiveConstraint *) 0 ;
  operations_research::Solver::IndexEvaluator2 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:DisjunctiveConstraint_SetTransitionTime",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__DisjunctiveConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DisjunctiveConstraint_SetTransitionTime" "', argument " "1"" of type '" "operations_research::DisjunctiveConstraint *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::DisjunctiveConstraint * >(argp1);
  {
    SharedPyPtr input(obj1);
    arg2 = [input](int64_t i, int64_t j) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "LL", i, j);
    };
  }
  {
    try {
      (arg1)->SetTransitionTime(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DisjunctiveConstraint_TransitionTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::DisjunctiveConstraint *arg1 = (operations_research::DisjunctiveConstraint *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:DisjunctiveConstraint_TransitionTime",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__DisjunctiveConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "DisjunctiveConstraint_TransitionTime" "', argument " "1"" of type '" "operations_research::DisjunctiveConstraint *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::DisjunctiveConstraint * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "DisjunctiveConstraint_TransitionTime" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "DisjunctiveConstraint_TransitionTime" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (int64_t)(arg1)->TransitionTime(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *DisjunctiveConstraint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__DisjunctiveConstraint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RevInteger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long *arg1 = 0 ;
  long temp1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::Rev< int64_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RevInteger",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RevInteger" "', argument " "1"" of type '" "long""'");
  } 
  temp1 = static_cast< long >(val1);
  arg1 = &temp1;
  {
    try {
      result = (operations_research::Rev< int64_t > *)new operations_research::Rev< int64_t >((long const &)*arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__RevT_long_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RevInteger_Value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Rev< int64_t > *arg1 = (operations_research::Rev< int64_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  long *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RevInteger_Value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RevT_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevInteger_Value" "', argument " "1"" of type '" "operations_research::Rev< int64_t > const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Rev< int64_t > * >(argp1);
  {
    try {
      result = (long *) &((operations_research::Rev< int64_t > const *)arg1)->Value(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RevInteger_SetValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Rev< int64_t > *arg1 = (operations_research::Rev< int64_t > *) 0 ;
  operations_research::Solver *arg2 = (operations_research::Solver *) (operations_research::Solver *)0 ;
  long *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  long temp3 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RevInteger_SetValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RevT_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevInteger_SetValue" "', argument " "1"" of type '" "operations_research::Rev< int64_t > *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Rev< int64_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RevInteger_SetValue" "', argument " "2"" of type '" "operations_research::Solver *const""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Solver * >(argp2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RevInteger_SetValue" "', argument " "3"" of type '" "long""'");
  } 
  temp3 = static_cast< long >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->SetValue(arg2,(long const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RevInteger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Rev< int64_t > *arg1 = (operations_research::Rev< int64_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RevInteger",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RevT_long_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RevInteger" "', argument " "1"" of type '" "operations_research::Rev< int64_t > *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Rev< int64_t > * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RevInteger_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__RevT_long_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_NumericalRevInteger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  long *arg1 = 0 ;
  long temp1 ;
  long val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::NumericalRev< int64_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_NumericalRevInteger",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_NumericalRevInteger" "', argument " "1"" of type '" "long""'");
  } 
  temp1 = static_cast< long >(val1);
  arg1 = &temp1;
  {
    try {
      result = (operations_research::NumericalRev< int64_t > *)new operations_research::NumericalRev< int64_t >((long const &)*arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__NumericalRevT_long_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumericalRevInteger_Add(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::NumericalRev< int64_t > *arg1 = (operations_research::NumericalRev< int64_t > *) 0 ;
  operations_research::Solver *arg2 = (operations_research::Solver *) (operations_research::Solver *)0 ;
  long *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  long temp3 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:NumericalRevInteger_Add",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__NumericalRevT_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericalRevInteger_Add" "', argument " "1"" of type '" "operations_research::NumericalRev< int64_t > *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::NumericalRev< int64_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NumericalRevInteger_Add" "', argument " "2"" of type '" "operations_research::Solver *const""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Solver * >(argp2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "NumericalRevInteger_Add" "', argument " "3"" of type '" "long""'");
  } 
  temp3 = static_cast< long >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->Add(arg2,(long const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumericalRevInteger_Incr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::NumericalRev< int64_t > *arg1 = (operations_research::NumericalRev< int64_t > *) 0 ;
  operations_research::Solver *arg2 = (operations_research::Solver *) (operations_research::Solver *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NumericalRevInteger_Incr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__NumericalRevT_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericalRevInteger_Incr" "', argument " "1"" of type '" "operations_research::NumericalRev< int64_t > *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::NumericalRev< int64_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NumericalRevInteger_Incr" "', argument " "2"" of type '" "operations_research::Solver *const""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Solver * >(argp2);
  {
    try {
      (arg1)->Incr(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_NumericalRevInteger_Decr(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::NumericalRev< int64_t > *arg1 = (operations_research::NumericalRev< int64_t > *) 0 ;
  operations_research::Solver *arg2 = (operations_research::Solver *) (operations_research::Solver *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:NumericalRevInteger_Decr",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__NumericalRevT_long_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "NumericalRevInteger_Decr" "', argument " "1"" of type '" "operations_research::NumericalRev< int64_t > *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::NumericalRev< int64_t > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "NumericalRevInteger_Decr" "', argument " "2"" of type '" "operations_research::Solver *const""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Solver * >(argp2);
  {
    try {
      (arg1)->Decr(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_NumericalRevInteger(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::NumericalRev< int64_t > *arg1 = (operations_research::NumericalRev< int64_t > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_NumericalRevInteger",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__NumericalRevT_long_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_NumericalRevInteger" "', argument " "1"" of type '" "operations_research::NumericalRev< int64_t > *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::NumericalRev< int64_t > * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *NumericalRevInteger_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__NumericalRevT_long_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RevBool(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  bool *arg1 = 0 ;
  bool temp1 ;
  bool val1 ;
  int ecode1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::Rev< bool > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RevBool",&obj0)) SWIG_fail;
  ecode1 = SWIG_AsVal_bool(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RevBool" "', argument " "1"" of type '" "bool""'");
  } 
  temp1 = static_cast< bool >(val1);
  arg1 = &temp1;
  {
    try {
      result = (operations_research::Rev< bool > *)new operations_research::Rev< bool >((bool const &)*arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__RevT_bool_t, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RevBool_Value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Rev< bool > *arg1 = (operations_research::Rev< bool > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RevBool_Value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RevT_bool_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevBool_Value" "', argument " "1"" of type '" "operations_research::Rev< bool > const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Rev< bool > * >(argp1);
  {
    try {
      result = (bool *) &((operations_research::Rev< bool > const *)arg1)->Value(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RevBool_SetValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Rev< bool > *arg1 = (operations_research::Rev< bool > *) 0 ;
  operations_research::Solver *arg2 = (operations_research::Solver *) (operations_research::Solver *)0 ;
  bool *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool temp3 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RevBool_SetValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RevT_bool_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RevBool_SetValue" "', argument " "1"" of type '" "operations_research::Rev< bool > *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Rev< bool > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RevBool_SetValue" "', argument " "2"" of type '" "operations_research::Solver *const""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Solver * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RevBool_SetValue" "', argument " "3"" of type '" "bool""'");
  } 
  temp3 = static_cast< bool >(val3);
  arg3 = &temp3;
  {
    try {
      (arg1)->SetValue(arg2,(bool const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RevBool(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::Rev< bool > *arg1 = (operations_research::Rev< bool > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RevBool",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RevT_bool_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RevBool" "', argument " "1"" of type '" "operations_research::Rev< bool > *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::Rev< bool > * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RevBool_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__RevT_bool_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IntVarContainer_Contains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVarContainer_Contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__IntVar_operations_research__IntVarElement_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarContainer_Contains" "', argument " "1"" of type '" "operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (bool)((operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > const *)arg1)->Contains((operations_research::IntVar const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarContainer_Element(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntVarElement *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVarContainer_Element",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__IntVar_operations_research__IntVarElement_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarContainer_Element" "', argument " "1"" of type '" "operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVarContainer_Element" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (operations_research::IntVarElement *)(arg1)->MutableElement(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVarElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarContainer_Size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVarContainer_Size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__IntVar_operations_research__IntVarElement_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarContainer_Size" "', argument " "1"" of type '" "operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > * >(argp1);
  {
    try {
      result = (int)((operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > const *)arg1)->Size(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarContainer_Store(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVarContainer_Store",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__IntVar_operations_research__IntVarElement_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarContainer_Store" "', argument " "1"" of type '" "operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > * >(argp1);
  {
    try {
      (arg1)->Store(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarContainer_Restore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVarContainer_Restore",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__IntVar_operations_research__IntVarElement_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarContainer_Restore" "', argument " "1"" of type '" "operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > * >(argp1);
  {
    try {
      (arg1)->Restore(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarContainer___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *) 0 ;
  operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVarContainer___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__IntVar_operations_research__IntVarElement_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarContainer___eq__" "', argument " "1"" of type '" "operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__IntVar_operations_research__IntVarElement_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntVarContainer___eq__" "', argument " "2"" of type '" "operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntVarContainer___eq__" "', argument " "2"" of type '" "operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > const &""'"); 
  }
  arg2 = reinterpret_cast< operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > * >(argp2);
  {
    try {
      result = (bool)((operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > const *)arg1)->operator ==((operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarContainer___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *) 0 ;
  operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVarContainer___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__IntVar_operations_research__IntVarElement_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarContainer___ne__" "', argument " "1"" of type '" "operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__IntVar_operations_research__IntVarElement_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntVarContainer___ne__" "', argument " "2"" of type '" "operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntVarContainer___ne__" "', argument " "2"" of type '" "operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > const &""'"); 
  }
  arg2 = reinterpret_cast< operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > * >(argp2);
  {
    try {
      result = (bool)((operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > const *)arg1)->operator !=((operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IntVarContainer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IntVarContainer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__IntVar_operations_research__IntVarElement_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntVarContainer" "', argument " "1"" of type '" "operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IntVarContainer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__IntVar_operations_research__IntVarElement_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_IntervalVarContainer_Contains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) (operations_research::IntervalVar *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVarContainer_Contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__IntervalVar_operations_research__IntervalVarElement_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarContainer_Contains" "', argument " "1"" of type '" "operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (bool)((operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > const *)arg1)->Contains((operations_research::IntervalVar const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarContainer_Element(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntervalVarElement *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVarContainer_Element",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__IntervalVar_operations_research__IntervalVarElement_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarContainer_Element" "', argument " "1"" of type '" "operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntervalVarContainer_Element" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (operations_research::IntervalVarElement *)(arg1)->MutableElement(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntervalVarElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarContainer_Size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVarContainer_Size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__IntervalVar_operations_research__IntervalVarElement_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarContainer_Size" "', argument " "1"" of type '" "operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > * >(argp1);
  {
    try {
      result = (int)((operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > const *)arg1)->Size(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarContainer_Store(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVarContainer_Store",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__IntervalVar_operations_research__IntervalVarElement_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarContainer_Store" "', argument " "1"" of type '" "operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > * >(argp1);
  {
    try {
      (arg1)->Store(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarContainer_Restore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntervalVarContainer_Restore",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__IntervalVar_operations_research__IntervalVarElement_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarContainer_Restore" "', argument " "1"" of type '" "operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > * >(argp1);
  {
    try {
      (arg1)->Restore(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarContainer___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *) 0 ;
  operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVarContainer___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__IntervalVar_operations_research__IntervalVarElement_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarContainer___eq__" "', argument " "1"" of type '" "operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__IntervalVar_operations_research__IntervalVarElement_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntervalVarContainer___eq__" "', argument " "2"" of type '" "operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntervalVarContainer___eq__" "', argument " "2"" of type '" "operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > const &""'"); 
  }
  arg2 = reinterpret_cast< operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > * >(argp2);
  {
    try {
      result = (bool)((operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > const *)arg1)->operator ==((operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntervalVarContainer___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *) 0 ;
  operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntervalVarContainer___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__IntervalVar_operations_research__IntervalVarElement_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntervalVarContainer___ne__" "', argument " "1"" of type '" "operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__IntervalVar_operations_research__IntervalVarElement_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntervalVarContainer___ne__" "', argument " "2"" of type '" "operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "IntervalVarContainer___ne__" "', argument " "2"" of type '" "operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > const &""'"); 
  }
  arg2 = reinterpret_cast< operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > * >(argp2);
  {
    try {
      result = (bool)((operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > const *)arg1)->operator !=((operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IntervalVarContainer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IntervalVarContainer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__IntervalVar_operations_research__IntervalVarElement_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntervalVarContainer" "', argument " "1"" of type '" "operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IntervalVarContainer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__IntervalVar_operations_research__IntervalVarElement_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SequenceVarContainer_Contains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *) 0 ;
  operations_research::SequenceVar *arg2 = (operations_research::SequenceVar *) (operations_research::SequenceVar *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SequenceVarContainer_Contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__SequenceVar_operations_research__SequenceVarElement_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SequenceVarContainer_Contains" "', argument " "1"" of type '" "operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (bool)((operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > const *)arg1)->Contains((operations_research::SequenceVar const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SequenceVarContainer_Element(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::SequenceVarElement *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SequenceVarContainer_Element",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__SequenceVar_operations_research__SequenceVarElement_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SequenceVarContainer_Element" "', argument " "1"" of type '" "operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SequenceVarContainer_Element" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (operations_research::SequenceVarElement *)(arg1)->MutableElement(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__SequenceVarElement, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SequenceVarContainer_Size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SequenceVarContainer_Size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__SequenceVar_operations_research__SequenceVarElement_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SequenceVarContainer_Size" "', argument " "1"" of type '" "operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > * >(argp1);
  {
    try {
      result = (int)((operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > const *)arg1)->Size(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SequenceVarContainer_Store(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SequenceVarContainer_Store",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__SequenceVar_operations_research__SequenceVarElement_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SequenceVarContainer_Store" "', argument " "1"" of type '" "operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > * >(argp1);
  {
    try {
      (arg1)->Store(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SequenceVarContainer_Restore(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SequenceVarContainer_Restore",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__SequenceVar_operations_research__SequenceVarElement_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SequenceVarContainer_Restore" "', argument " "1"" of type '" "operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > * >(argp1);
  {
    try {
      (arg1)->Restore(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SequenceVarContainer___eq__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *) 0 ;
  operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SequenceVarContainer___eq__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__SequenceVar_operations_research__SequenceVarElement_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SequenceVarContainer___eq__" "', argument " "1"" of type '" "operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__SequenceVar_operations_research__SequenceVarElement_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SequenceVarContainer___eq__" "', argument " "2"" of type '" "operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SequenceVarContainer___eq__" "', argument " "2"" of type '" "operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > const &""'"); 
  }
  arg2 = reinterpret_cast< operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > * >(argp2);
  {
    try {
      result = (bool)((operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > const *)arg1)->operator ==((operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SequenceVarContainer___ne__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *) 0 ;
  operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SequenceVarContainer___ne__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__SequenceVar_operations_research__SequenceVarElement_t, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SequenceVarContainer___ne__" "', argument " "1"" of type '" "operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__SequenceVar_operations_research__SequenceVarElement_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "SequenceVarContainer___ne__" "', argument " "2"" of type '" "operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "SequenceVarContainer___ne__" "', argument " "2"" of type '" "operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > const &""'"); 
  }
  arg2 = reinterpret_cast< operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > * >(argp2);
  {
    try {
      result = (bool)((operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > const *)arg1)->operator !=((operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SequenceVarContainer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *arg1 = (operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SequenceVarContainer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__SequenceVar_operations_research__SequenceVarElement_t, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SequenceVarContainer" "', argument " "1"" of type '" "operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SequenceVarContainer_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__AssignmentContainerT_operations_research__SequenceVar_operations_research__SequenceVarElement_t, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_LocalSearchOperator_NextNeighbor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::LocalSearchOperator *arg1 = (operations_research::LocalSearchOperator *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LocalSearchOperator_NextNeighbor",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocalSearchOperator_NextNeighbor" "', argument " "2"" of type '" "operations_research::Assignment *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LocalSearchOperator_NextNeighbor" "', argument " "3"" of type '" "operations_research::Assignment *""'"); 
  }
  arg3 = reinterpret_cast< operations_research::Assignment * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("operations_research::LocalSearchOperator::MakeNextNeighbor");
        } else {
          result = (bool)(arg1)->MakeNextNeighbor(arg2,arg3);
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalSearchOperator_Start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::LocalSearchOperator *arg1 = (operations_research::LocalSearchOperator *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:LocalSearchOperator_Start",&obj0,&obj1)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocalSearchOperator_Start" "', argument " "2"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("operations_research::LocalSearchOperator::Start");
        } else {
          (arg1)->Start((operations_research::Assignment const *)arg2);
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_LocalSearchOperator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::LocalSearchOperator *arg1 = (operations_research::LocalSearchOperator *) 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:disown_LocalSearchOperator",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LocalSearchOperator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__LocalSearchOperator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_IntVarLocalSearchOperator__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  bool arg3 ;
  std::vector< operations_research::IntVar * > temp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntVarLocalSearchOperator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_IntVarLocalSearchOperator",&obj0,&obj1,&obj2)) SWIG_fail;
  arg1 = obj0;
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "new_IntVarLocalSearchOperator" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (operations_research::IntVarLocalSearchOperator *)new SwigDirector_IntVarLocalSearchOperator(arg1,(std::vector< operations_research::IntVar * > const &)*arg2,arg3); 
      } else {
        result = (operations_research::IntVarLocalSearchOperator *)new operations_research::IntVarLocalSearchOperator((std::vector< operations_research::IntVar * > const &)*arg2,arg3); 
      }
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVarLocalSearchOperator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntVarLocalSearchOperator__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntVarLocalSearchOperator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_IntVarLocalSearchOperator",&obj0,&obj1)) SWIG_fail;
  arg1 = obj0;
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (operations_research::IntVarLocalSearchOperator *)new SwigDirector_IntVarLocalSearchOperator(arg1,(std::vector< operations_research::IntVar * > const &)*arg2); 
      } else {
        result = (operations_research::IntVarLocalSearchOperator *)new operations_research::IntVarLocalSearchOperator((std::vector< operations_research::IntVar * > const &)*arg2); 
      }
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVarLocalSearchOperator, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_IntVarLocalSearchOperator(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    _v = (argv[0] != 0);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        return _wrap_new_IntVarLocalSearchOperator__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    _v = (argv[0] != 0);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && CanConvertToIntVar(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_IntVarLocalSearchOperator__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_IntVarLocalSearchOperator'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::IntVarLocalSearchOperator::IntVarLocalSearchOperator(std::vector< operations_research::IntVar * > const &,bool)\n"
    "    operations_research::IntVarLocalSearchOperator::IntVarLocalSearchOperator(PyObject *,std::vector< operations_research::IntVar * > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_IntVarLocalSearchOperator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarLocalSearchOperator *arg1 = (operations_research::IntVarLocalSearchOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IntVarLocalSearchOperator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarLocalSearchOperator, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntVarLocalSearchOperator" "', argument " "1"" of type '" "operations_research::IntVarLocalSearchOperator *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarLocalSearchOperator * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarLocalSearchOperator_Start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarLocalSearchOperator *arg1 = (operations_research::IntVarLocalSearchOperator *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVarLocalSearchOperator_Start",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarLocalSearchOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarLocalSearchOperator_Start" "', argument " "1"" of type '" "operations_research::IntVarLocalSearchOperator *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarLocalSearchOperator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntVarLocalSearchOperator_Start" "', argument " "2"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  {
    try {
      (arg1)->Start((operations_research::Assignment const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarLocalSearchOperator_IsIncremental(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarLocalSearchOperator *arg1 = (operations_research::IntVarLocalSearchOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVarLocalSearchOperator_IsIncremental",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarLocalSearchOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarLocalSearchOperator_IsIncremental" "', argument " "1"" of type '" "operations_research::IntVarLocalSearchOperator const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarLocalSearchOperator * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          result = (bool)((operations_research::IntVarLocalSearchOperator const *)arg1)->operations_research::IntVarLocalSearchOperator::IsIncremental();
        } else {
          result = (bool)((operations_research::IntVarLocalSearchOperator const *)arg1)->IsIncremental();
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarLocalSearchOperator_Size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarLocalSearchOperator *arg1 = (operations_research::IntVarLocalSearchOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVarLocalSearchOperator_Size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarLocalSearchOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarLocalSearchOperator_Size" "', argument " "1"" of type '" "operations_research::IntVarLocalSearchOperator const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarLocalSearchOperator * >(argp1);
  {
    try {
      result = (int)((operations_research::IntVarLocalSearchOperator const *)arg1)->Size(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarLocalSearchOperator_Value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarLocalSearchOperator *arg1 = (operations_research::IntVarLocalSearchOperator *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVarLocalSearchOperator_Value",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarLocalSearchOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarLocalSearchOperator_Value" "', argument " "1"" of type '" "operations_research::IntVarLocalSearchOperator const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarLocalSearchOperator * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVarLocalSearchOperator_Value" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (int64_t)((operations_research::IntVarLocalSearchOperator const *)arg1)->Value(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarLocalSearchOperator_Var(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarLocalSearchOperator *arg1 = (operations_research::IntVarLocalSearchOperator *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVarLocalSearchOperator_Var",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarLocalSearchOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarLocalSearchOperator_Var" "', argument " "1"" of type '" "operations_research::IntVarLocalSearchOperator const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarLocalSearchOperator * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVarLocalSearchOperator_Var" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::IntVar *)((operations_research::IntVarLocalSearchOperator const *)arg1)->Var(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarLocalSearchOperator_OldValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarLocalSearchOperator *arg1 = (operations_research::IntVarLocalSearchOperator *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVarLocalSearchOperator_OldValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarLocalSearchOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarLocalSearchOperator_OldValue" "', argument " "1"" of type '" "operations_research::IntVarLocalSearchOperator const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarLocalSearchOperator * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVarLocalSearchOperator_OldValue" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (int64_t)((operations_research::IntVarLocalSearchOperator const *)arg1)->OldValue(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarLocalSearchOperator_PrevValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarLocalSearchOperator *arg1 = (operations_research::IntVarLocalSearchOperator *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVarLocalSearchOperator_PrevValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarLocalSearchOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarLocalSearchOperator_PrevValue" "', argument " "1"" of type '" "operations_research::IntVarLocalSearchOperator const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarLocalSearchOperator * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVarLocalSearchOperator_PrevValue" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (int64_t)((operations_research::IntVarLocalSearchOperator const *)arg1)->PrevValue(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarLocalSearchOperator_SetValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarLocalSearchOperator *arg1 = (operations_research::IntVarLocalSearchOperator *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntVarLocalSearchOperator_SetValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarLocalSearchOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarLocalSearchOperator_SetValue" "', argument " "1"" of type '" "operations_research::IntVarLocalSearchOperator *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarLocalSearchOperator * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVarLocalSearchOperator_SetValue" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "IntVarLocalSearchOperator_SetValue" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      (arg1)->SetValue(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarLocalSearchOperator_Activated(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarLocalSearchOperator *arg1 = (operations_research::IntVarLocalSearchOperator *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVarLocalSearchOperator_Activated",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarLocalSearchOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarLocalSearchOperator_Activated" "', argument " "1"" of type '" "operations_research::IntVarLocalSearchOperator const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarLocalSearchOperator * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVarLocalSearchOperator_Activated" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (bool)((operations_research::IntVarLocalSearchOperator const *)arg1)->Activated(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarLocalSearchOperator_Activate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarLocalSearchOperator *arg1 = (operations_research::IntVarLocalSearchOperator *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVarLocalSearchOperator_Activate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarLocalSearchOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarLocalSearchOperator_Activate" "', argument " "1"" of type '" "operations_research::IntVarLocalSearchOperator *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarLocalSearchOperator * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVarLocalSearchOperator_Activate" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      (arg1)->Activate(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarLocalSearchOperator_Deactivate(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarLocalSearchOperator *arg1 = (operations_research::IntVarLocalSearchOperator *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVarLocalSearchOperator_Deactivate",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarLocalSearchOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarLocalSearchOperator_Deactivate" "', argument " "1"" of type '" "operations_research::IntVarLocalSearchOperator *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarLocalSearchOperator * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVarLocalSearchOperator_Deactivate" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      (arg1)->Deactivate(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarLocalSearchOperator_AddVars(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarLocalSearchOperator *arg1 = (operations_research::IntVarLocalSearchOperator *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVarLocalSearchOperator_AddVars",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarLocalSearchOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarLocalSearchOperator_AddVars" "', argument " "1"" of type '" "operations_research::IntVarLocalSearchOperator *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarLocalSearchOperator * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      (arg1)->AddVars((std::vector< operations_research::IntVar * > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarLocalSearchOperator_OnStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarLocalSearchOperator *arg1 = (operations_research::IntVarLocalSearchOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVarLocalSearchOperator_OnStart",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarLocalSearchOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarLocalSearchOperator_OnStart" "', argument " "1"" of type '" "operations_research::IntVarLocalSearchOperator *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarLocalSearchOperator * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          (arg1)->operations_research::IntVarLocalSearchOperator::OnStart();
        } else {
          (arg1)->OnStart();
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarLocalSearchOperator_NextNeighbor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarLocalSearchOperator *arg1 = (operations_research::IntVarLocalSearchOperator *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntVarLocalSearchOperator_NextNeighbor",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarLocalSearchOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarLocalSearchOperator_NextNeighbor" "', argument " "1"" of type '" "operations_research::IntVarLocalSearchOperator *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarLocalSearchOperator * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntVarLocalSearchOperator_NextNeighbor" "', argument " "2"" of type '" "operations_research::Assignment *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IntVarLocalSearchOperator_NextNeighbor" "', argument " "3"" of type '" "operations_research::Assignment *""'"); 
  }
  arg3 = reinterpret_cast< operations_research::Assignment * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          result = (bool)(arg1)->operations_research::IntVarLocalSearchOperator::MakeNextNeighbor(arg2,arg3);
        } else {
          result = (bool)(arg1)->MakeNextNeighbor(arg2,arg3);
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarLocalSearchOperator_OneNeighbor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarLocalSearchOperator *arg1 = (operations_research::IntVarLocalSearchOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  SwigDirector_IntVarLocalSearchOperator *darg = 0;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVarLocalSearchOperator_OneNeighbor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarLocalSearchOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarLocalSearchOperator_OneNeighbor" "', argument " "1"" of type '" "operations_research::IntVarLocalSearchOperator *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarLocalSearchOperator * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (!director || !(director->swig_get_inner("MakeOneNeighbor"))) {
    SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing protected member MakeOneNeighbor");
    SWIG_fail;
  }
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    darg = dynamic_cast<SwigDirector_IntVarLocalSearchOperator *>(arg1);
    {
      try {
        if (upcall) {
          result = (bool)(darg)->MakeOneNeighborSwigPublic();
        } else {
          result = (bool)(darg)->MakeOneNeighbor();
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_IntVarLocalSearchOperator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarLocalSearchOperator *arg1 = (operations_research::IntVarLocalSearchOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:disown_IntVarLocalSearchOperator",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarLocalSearchOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_IntVarLocalSearchOperator" "', argument " "1"" of type '" "operations_research::IntVarLocalSearchOperator *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarLocalSearchOperator * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IntVarLocalSearchOperator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__IntVarLocalSearchOperator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_BaseLns(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::BaseLns *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_BaseLns",&obj0,&obj1)) SWIG_fail;
  arg1 = obj0;
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (operations_research::BaseLns *)new SwigDirector_BaseLns(arg1,(std::vector< operations_research::IntVar * > const &)*arg2); 
      } else {
        SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor"); 
        SWIG_fail;
      }
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__BaseLns, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_BaseLns(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BaseLns *arg1 = (operations_research::BaseLns *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BaseLns",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BaseLns, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BaseLns" "', argument " "1"" of type '" "operations_research::BaseLns *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BaseLns * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseLns_InitFragments(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BaseLns *arg1 = (operations_research::BaseLns *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseLns_InitFragments",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BaseLns, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseLns_InitFragments" "', argument " "1"" of type '" "operations_research::BaseLns *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BaseLns * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          (arg1)->operations_research::BaseLns::InitFragments();
        } else {
          (arg1)->InitFragments();
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseLns_NextFragment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BaseLns *arg1 = (operations_research::BaseLns *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseLns_NextFragment",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BaseLns, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseLns_NextFragment" "', argument " "1"" of type '" "operations_research::BaseLns *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BaseLns * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("operations_research::BaseLns::NextFragment");
        } else {
          result = (bool)(arg1)->NextFragment();
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseLns_AppendToFragment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BaseLns *arg1 = (operations_research::BaseLns *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BaseLns_AppendToFragment",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BaseLns, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseLns_AppendToFragment" "', argument " "1"" of type '" "operations_research::BaseLns *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BaseLns * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseLns_AppendToFragment" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->AppendToFragment(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseLns_FragmentSize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BaseLns *arg1 = (operations_research::BaseLns *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseLns_FragmentSize",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BaseLns, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseLns_FragmentSize" "', argument " "1"" of type '" "operations_research::BaseLns const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BaseLns * >(argp1);
  {
    try {
      result = (int)((operations_research::BaseLns const *)arg1)->FragmentSize(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseLns___getitem__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BaseLns *arg1 = (operations_research::BaseLns *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BaseLns___getitem__",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BaseLns, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseLns___getitem__" "', argument " "1"" of type '" "operations_research::BaseLns *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BaseLns * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BaseLns___getitem__" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int64_t)operations_research_BaseLns___getitem__(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BaseLns___len__(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BaseLns *arg1 = (operations_research::BaseLns *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BaseLns___len__",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BaseLns, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BaseLns___len__" "', argument " "1"" of type '" "operations_research::BaseLns *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BaseLns * >(argp1);
  {
    try {
      result = (int)operations_research_BaseLns___len__(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_BaseLns(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BaseLns *arg1 = (operations_research::BaseLns *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:disown_BaseLns",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BaseLns, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_BaseLns" "', argument " "1"" of type '" "operations_research::BaseLns *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BaseLns * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BaseLns_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__BaseLns, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_ChangeValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::ChangeValue *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_ChangeValue",&obj0,&obj1)) SWIG_fail;
  arg1 = obj0;
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (operations_research::ChangeValue *)new SwigDirector_ChangeValue(arg1,(std::vector< operations_research::IntVar * > const &)*arg2); 
      } else {
        SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor"); 
        SWIG_fail;
      }
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__ChangeValue, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_ChangeValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::ChangeValue *arg1 = (operations_research::ChangeValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_ChangeValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__ChangeValue, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_ChangeValue" "', argument " "1"" of type '" "operations_research::ChangeValue *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::ChangeValue * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChangeValue_ModifyValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::ChangeValue *arg1 = (operations_research::ChangeValue *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:ChangeValue_ModifyValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__ChangeValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChangeValue_ModifyValue" "', argument " "1"" of type '" "operations_research::ChangeValue *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::ChangeValue * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "ChangeValue_ModifyValue" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "ChangeValue_ModifyValue" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          Swig::DirectorPureVirtualException::raise("operations_research::ChangeValue::ModifyValue");
        } else {
          result = (int64_t)(arg1)->ModifyValue(arg2,arg3);
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_ChangeValue_OneNeighbor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::ChangeValue *arg1 = (operations_research::ChangeValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  SwigDirector_ChangeValue *darg = 0;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:ChangeValue_OneNeighbor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__ChangeValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "ChangeValue_OneNeighbor" "', argument " "1"" of type '" "operations_research::ChangeValue *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::ChangeValue * >(argp1);
  director = SWIG_DIRECTOR_CAST(arg1);
  if (!director || !(director->swig_get_inner("MakeOneNeighbor"))) {
    SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing protected member MakeOneNeighbor");
    SWIG_fail;
  }
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    darg = dynamic_cast<SwigDirector_ChangeValue *>(arg1);
    {
      try {
        if (upcall) {
          result = (bool)(darg)->MakeOneNeighborSwigPublic();
        } else {
          result = (bool)(darg)->MakeOneNeighbor();
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_ChangeValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::ChangeValue *arg1 = (operations_research::ChangeValue *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:disown_ChangeValue",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__ChangeValue, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_ChangeValue" "', argument " "1"" of type '" "operations_research::ChangeValue *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::ChangeValue * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *ChangeValue_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__ChangeValue, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_PathOperator_Neighbor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::PathOperator *arg1 = (operations_research::PathOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PathOperator_Neighbor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__PathOperator, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PathOperator_Neighbor" "', argument " "1"" of type '" "operations_research::PathOperator *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::PathOperator * >(argp1);
  {
    try {
      result = (bool)(arg1)->MakeNeighbor(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PathOperator_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__PathOperator, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_LocalSearchFilter_Accept(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::LocalSearchFilter *arg1 = (operations_research::LocalSearchFilter *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) 0 ;
  int64_t arg4 ;
  int64_t arg5 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:LocalSearchFilter_Accept",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocalSearchFilter_Accept" "', argument " "2"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LocalSearchFilter_Accept" "', argument " "3"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg3 = reinterpret_cast< operations_research::Assignment * >(argp3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "LocalSearchFilter_Accept" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "LocalSearchFilter_Accept" "', argument " "5"" of type '" "int64_t""'");
  } 
  arg5 = static_cast< int64_t >(val5);
  {
    try {
      result = (bool)(arg1)->Accept((operations_research::Assignment const *)arg2,(operations_research::Assignment const *)arg3,arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalSearchFilter_IsIncremental(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::LocalSearchFilter *arg1 = (operations_research::LocalSearchFilter *) 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LocalSearchFilter_IsIncremental",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = (bool)((operations_research::LocalSearchFilter const *)arg1)->IsIncremental(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalSearchFilter_Synchronize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::LocalSearchFilter *arg1 = (operations_research::LocalSearchFilter *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LocalSearchFilter_Synchronize",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocalSearchFilter_Synchronize" "', argument " "2"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LocalSearchFilter_Synchronize" "', argument " "3"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg3 = reinterpret_cast< operations_research::Assignment * >(argp3);
  {
    try {
      (arg1)->Synchronize((operations_research::Assignment const *)arg2,(operations_research::Assignment const *)arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LocalSearchFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::LocalSearchFilter *arg1 = (operations_research::LocalSearchFilter *) 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LocalSearchFilter",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LocalSearchFilter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__LocalSearchFilter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_LocalSearchFilterManager_DebugString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::LocalSearchFilterManager *arg1 = (operations_research::LocalSearchFilterManager *) 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:LocalSearchFilterManager_DebugString",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      result = ((operations_research::LocalSearchFilterManager const *)arg1)->DebugString(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LocalSearchFilterManager__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< std::vector< operations_research::LocalSearchFilterManager::FilterEvent > > arg1 ;
  void *argp1 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::LocalSearchFilterManager *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LocalSearchFilterManager",&obj0)) SWIG_fail;
  {
    res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_std__vectorT_operations_research__LocalSearchFilterManager__FilterEvent_t,  0  | 0);
    if (!SWIG_IsOK(res1)) {
      SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_LocalSearchFilterManager" "', argument " "1"" of type '" "std::vector< operations_research::LocalSearchFilterManager::FilterEvent >""'"); 
    }  
    if (!argp1) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_LocalSearchFilterManager" "', argument " "1"" of type '" "std::vector< operations_research::LocalSearchFilterManager::FilterEvent >""'");
    } else {
      std::vector< operations_research::LocalSearchFilterManager::FilterEvent > * temp = reinterpret_cast< std::vector< operations_research::LocalSearchFilterManager::FilterEvent > * >(argp1);
      arg1 = *temp;
      if (SWIG_IsNewObj(res1)) delete temp;
    }
  }
  {
    try {
      result = (operations_research::LocalSearchFilterManager *)new operations_research::LocalSearchFilterManager(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__LocalSearchFilterManager, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LocalSearchFilterManager__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  SwigValueWrapper< std::vector< operations_research::LocalSearchFilter * > > arg1 ;
  std::vector< operations_research::LocalSearchFilter * > temp1 ;
  PyObject * obj0 = 0 ;
  operations_research::LocalSearchFilterManager *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_LocalSearchFilterManager",&obj0)) SWIG_fail;
  {
    if (!vector_input_helper(obj0, &temp1, PyObjAs<operations_research::LocalSearchFilter*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::LocalSearchFilter*) expected");
      return NULL;
    }
    arg1 = std::move(temp1);
  }
  {
    try {
      result = (operations_research::LocalSearchFilterManager *)new operations_research::LocalSearchFilterManager(arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__LocalSearchFilterManager, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_LocalSearchFilterManager(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[2] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 1) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_std__vectorT_operations_research__LocalSearchFilterManager__FilterEvent_t, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_LocalSearchFilterManager__SWIG_0(self, args);
    }
  }
  if (argc == 1) {
    int _v;
    {
      if (!PyTuple_Check(argv[0]) && !PyList_Check(argv[0])) {
        _v = 0;
      } else {
        const bool is_tuple = PyTuple_Check(argv[0]);
        const size_t size = is_tuple ? PyTuple_Size(argv[0]) : PyList_Size(argv[0]);
        size_t i = 0;
        while (i < size && CanConvertToLocalSearchFilter(is_tuple ? PyTuple_GetItem(argv[0], i)
            :PyList_GetItem(argv[0], i))) {
          ++i;
        }
        _v = i == size;
      }
    }
    if (_v) {
      return _wrap_new_LocalSearchFilterManager__SWIG_1(self, args);
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_LocalSearchFilterManager'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::LocalSearchFilterManager::LocalSearchFilterManager(std::vector< operations_research::LocalSearchFilterManager::FilterEvent >)\n"
    "    operations_research::LocalSearchFilterManager::LocalSearchFilterManager(std::vector< operations_research::LocalSearchFilter * >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_LocalSearchFilterManager_Accept(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::LocalSearchFilterManager *arg1 = (operations_research::LocalSearchFilterManager *) 0 ;
  operations_research::LocalSearchMonitor *arg2 = (operations_research::LocalSearchMonitor *) 0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) 0 ;
  operations_research::Assignment *arg4 = (operations_research::Assignment *) 0 ;
  int64_t arg5 ;
  int64_t arg6 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  long val5 ;
  int ecode5 = 0 ;
  long val6 ;
  int ecode6 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:LocalSearchFilterManager_Accept",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__LocalSearchMonitor, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocalSearchFilterManager_Accept" "', argument " "2"" of type '" "operations_research::LocalSearchMonitor *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::LocalSearchMonitor * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LocalSearchFilterManager_Accept" "', argument " "3"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg3 = reinterpret_cast< operations_research::Assignment * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "LocalSearchFilterManager_Accept" "', argument " "4"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg4 = reinterpret_cast< operations_research::Assignment * >(argp4);
  ecode5 = SWIG_AsVal_long(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "LocalSearchFilterManager_Accept" "', argument " "5"" of type '" "int64_t""'");
  } 
  arg5 = static_cast< int64_t >(val5);
  ecode6 = SWIG_AsVal_long(obj5, &val6);
  if (!SWIG_IsOK(ecode6)) {
    SWIG_exception_fail(SWIG_ArgError(ecode6), "in method '" "LocalSearchFilterManager_Accept" "', argument " "6"" of type '" "int64_t""'");
  } 
  arg6 = static_cast< int64_t >(val6);
  {
    try {
      result = (bool)(arg1)->Accept(arg2,(operations_research::Assignment const *)arg3,(operations_research::Assignment const *)arg4,arg5,arg6); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_LocalSearchFilterManager_Synchronize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::LocalSearchFilterManager *arg1 = (operations_research::LocalSearchFilterManager *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:LocalSearchFilterManager_Synchronize",&obj0,&obj1,&obj2)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "LocalSearchFilterManager_Synchronize" "', argument " "2"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "LocalSearchFilterManager_Synchronize" "', argument " "3"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg3 = reinterpret_cast< operations_research::Assignment * >(argp3);
  {
    try {
      (arg1)->Synchronize((operations_research::Assignment const *)arg2,(operations_research::Assignment const *)arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LocalSearchFilterManager(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::LocalSearchFilterManager *arg1 = (operations_research::LocalSearchFilterManager *) 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LocalSearchFilterManager",&obj0)) SWIG_fail;
  {
    if (!PyObjAs(obj0, &arg1)) SWIG_fail;
  }
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LocalSearchFilterManager_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__LocalSearchFilterManager, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_IntVarLocalSearchFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  PyObject *arg1 = (PyObject *) 0 ;
  std::vector< operations_research::IntVar * > *arg2 = 0 ;
  std::vector< operations_research::IntVar * > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntVarLocalSearchFilter *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_IntVarLocalSearchFilter",&obj0,&obj1)) SWIG_fail;
  arg1 = obj0;
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntVar*) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      if ( arg1 != Py_None ) {
        /* subclassed */
        result = (operations_research::IntVarLocalSearchFilter *)new SwigDirector_IntVarLocalSearchFilter(arg1,(std::vector< operations_research::IntVar * > const &)*arg2); 
      } else {
        SWIG_SetErrorMsg(PyExc_RuntimeError,"accessing abstract class or protected constructor"); 
        SWIG_fail;
      }
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVarLocalSearchFilter, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_IntVarLocalSearchFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarLocalSearchFilter *arg1 = (operations_research::IntVarLocalSearchFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_IntVarLocalSearchFilter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarLocalSearchFilter, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_IntVarLocalSearchFilter" "', argument " "1"" of type '" "operations_research::IntVarLocalSearchFilter *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarLocalSearchFilter * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarLocalSearchFilter_Synchronize(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarLocalSearchFilter *arg1 = (operations_research::IntVarLocalSearchFilter *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  bool upcall = false;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:IntVarLocalSearchFilter_Synchronize",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarLocalSearchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarLocalSearchFilter_Synchronize" "', argument " "1"" of type '" "operations_research::IntVarLocalSearchFilter *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarLocalSearchFilter * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "IntVarLocalSearchFilter_Synchronize" "', argument " "2"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "IntVarLocalSearchFilter_Synchronize" "', argument " "3"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg3 = reinterpret_cast< operations_research::Assignment * >(argp3);
  director = SWIG_DIRECTOR_CAST(arg1);
  upcall = (director && (director->swig_get_self()==obj0));
  try {
    {
      try {
        if (upcall) {
          (arg1)->operations_research::IntVarLocalSearchFilter::Synchronize((operations_research::Assignment const *)arg2,(operations_research::Assignment const *)arg3);
        } else {
          (arg1)->Synchronize((operations_research::Assignment const *)arg2,(operations_research::Assignment const *)arg3);
        } 
      }
      catch (Swig::DirectorException &e) {
        SWIG_fail; 
      }
    }
  } catch (Swig::DirectorException&) {
    SWIG_fail;
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarLocalSearchFilter_Size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarLocalSearchFilter *arg1 = (operations_research::IntVarLocalSearchFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:IntVarLocalSearchFilter_Size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarLocalSearchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarLocalSearchFilter_Size" "', argument " "1"" of type '" "operations_research::IntVarLocalSearchFilter const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarLocalSearchFilter * >(argp1);
  {
    try {
      result = (int)((operations_research::IntVarLocalSearchFilter const *)arg1)->Size(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarLocalSearchFilter_Value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarLocalSearchFilter *arg1 = (operations_research::IntVarLocalSearchFilter *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVarLocalSearchFilter_Value",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarLocalSearchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarLocalSearchFilter_Value" "', argument " "1"" of type '" "operations_research::IntVarLocalSearchFilter const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarLocalSearchFilter * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "IntVarLocalSearchFilter_Value" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int64_t)((operations_research::IntVarLocalSearchFilter const *)arg1)->Value(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_IntVarLocalSearchFilter_IndexFromVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarLocalSearchFilter *arg1 = (operations_research::IntVarLocalSearchFilter *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) (operations_research::IntVar *)0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:IntVarLocalSearchFilter_IndexFromVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarLocalSearchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "IntVarLocalSearchFilter_IndexFromVar" "', argument " "1"" of type '" "operations_research::IntVarLocalSearchFilter const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarLocalSearchFilter * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      result = (int64_t)operations_research_IntVarLocalSearchFilter_IndexFromVar((operations_research::IntVarLocalSearchFilter const *)arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_disown_IntVarLocalSearchFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::IntVarLocalSearchFilter *arg1 = (operations_research::IntVarLocalSearchFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:disown_IntVarLocalSearchFilter",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__IntVarLocalSearchFilter, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "disown_IntVarLocalSearchFilter" "', argument " "1"" of type '" "operations_research::IntVarLocalSearchFilter *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::IntVarLocalSearchFilter * >(argp1);
  {
    Swig::Director *director = SWIG_DIRECTOR_CAST(arg1);
    if (director) director->swig_disown();
  }
  
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *IntVarLocalSearchFilter_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__IntVarLocalSearchFilter, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_BooleanVar_Min(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BooleanVar_Min",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BooleanVar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BooleanVar_Min" "', argument " "1"" of type '" "operations_research::BooleanVar const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BooleanVar * >(argp1);
  {
    try {
      result = (int64_t)((operations_research::BooleanVar const *)arg1)->Min(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BooleanVar_SetMin(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BooleanVar_SetMin",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BooleanVar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BooleanVar_SetMin" "', argument " "1"" of type '" "operations_research::BooleanVar *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BooleanVar * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BooleanVar_SetMin" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetMin(arg2);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      // IMPORTANT: the type and message of the exception raised matter,
      // because they are caught by the python overrides of some CP classes.
      // See the occurrences of the "PyExc_Exception" string below.
      PyErr_SetString(PyExc_Exception, "CP Solver fail");
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BooleanVar_Max(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BooleanVar_Max",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BooleanVar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BooleanVar_Max" "', argument " "1"" of type '" "operations_research::BooleanVar const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BooleanVar * >(argp1);
  {
    try {
      result = (int64_t)((operations_research::BooleanVar const *)arg1)->Max(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BooleanVar_SetMax(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BooleanVar_SetMax",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BooleanVar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BooleanVar_SetMax" "', argument " "1"" of type '" "operations_research::BooleanVar *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BooleanVar * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BooleanVar_SetMax" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetMax(arg2);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      // IMPORTANT: the type and message of the exception raised matter,
      // because they are caught by the python overrides of some CP classes.
      // See the occurrences of the "PyExc_Exception" string below.
      PyErr_SetString(PyExc_Exception, "CP Solver fail");
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BooleanVar_SetRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BooleanVar_SetRange",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BooleanVar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BooleanVar_SetRange" "', argument " "1"" of type '" "operations_research::BooleanVar *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BooleanVar * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BooleanVar_SetRange" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BooleanVar_SetRange" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->SetRange(arg2,arg3);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      // IMPORTANT: the type and message of the exception raised matter,
      // because they are caught by the python overrides of some CP classes.
      // See the occurrences of the "PyExc_Exception" string below.
      PyErr_SetString(PyExc_Exception, "CP Solver fail");
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BooleanVar_Bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BooleanVar_Bound",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BooleanVar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BooleanVar_Bound" "', argument " "1"" of type '" "operations_research::BooleanVar const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BooleanVar * >(argp1);
  {
    try {
      result = (bool)((operations_research::BooleanVar const *)arg1)->Bound(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BooleanVar_Value(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BooleanVar_Value",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BooleanVar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BooleanVar_Value" "', argument " "1"" of type '" "operations_research::BooleanVar const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BooleanVar * >(argp1);
  {
    try {
      result = (int64_t)((operations_research::BooleanVar const *)arg1)->Value(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BooleanVar_RemoveValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BooleanVar_RemoveValue",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BooleanVar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BooleanVar_RemoveValue" "', argument " "1"" of type '" "operations_research::BooleanVar *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BooleanVar * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BooleanVar_RemoveValue" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    operations_research::Solver* const solver = arg1->solver();
    FailureProtect protect;
    solver->set_fail_intercept([&protect]() {
      protect.JumpBack(); 
    });
    if (setjmp(protect.exception_buffer) == 0) {
      (arg1)->RemoveValue(arg2);
      solver->clear_fail_intercept();
    } else {
      solver->clear_fail_intercept();
      // IMPORTANT: the type and message of the exception raised matter,
      // because they are caught by the python overrides of some CP classes.
      // See the occurrences of the "PyExc_Exception" string below.
      PyErr_SetString(PyExc_Exception, "CP Solver fail");
      SWIG_fail;
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BooleanVar_RemoveInterval(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:BooleanVar_RemoveInterval",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BooleanVar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BooleanVar_RemoveInterval" "', argument " "1"" of type '" "operations_research::BooleanVar *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BooleanVar * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BooleanVar_RemoveInterval" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "BooleanVar_RemoveInterval" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      (arg1)->RemoveInterval(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BooleanVar_WhenBound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BooleanVar_WhenBound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BooleanVar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BooleanVar_WhenBound" "', argument " "1"" of type '" "operations_research::BooleanVar *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BooleanVar * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->WhenBound(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BooleanVar_WhenRange(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BooleanVar_WhenRange",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BooleanVar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BooleanVar_WhenRange" "', argument " "1"" of type '" "operations_research::BooleanVar *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BooleanVar * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->WhenRange(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BooleanVar_WhenDomain(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  operations_research::Demon *arg2 = (operations_research::Demon *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BooleanVar_WhenDomain",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BooleanVar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BooleanVar_WhenDomain" "', argument " "1"" of type '" "operations_research::BooleanVar *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BooleanVar * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->WhenDomain(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BooleanVar_Size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  uint64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BooleanVar_Size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BooleanVar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BooleanVar_Size" "', argument " "1"" of type '" "operations_research::BooleanVar const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BooleanVar * >(argp1);
  {
    try {
      result = (uint64_t)((operations_research::BooleanVar const *)arg1)->Size(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_unsigned_SS_long(static_cast< unsigned long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BooleanVar_Contains(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BooleanVar_Contains",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BooleanVar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BooleanVar_Contains" "', argument " "1"" of type '" "operations_research::BooleanVar const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BooleanVar * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BooleanVar_Contains" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (bool)((operations_research::BooleanVar const *)arg1)->Contains(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BooleanVar_HoleIteratorAux(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntVarIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BooleanVar_HoleIteratorAux",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BooleanVar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BooleanVar_HoleIteratorAux" "', argument " "1"" of type '" "operations_research::BooleanVar const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BooleanVar * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BooleanVar_HoleIteratorAux" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (operations_research::IntVarIterator *)((operations_research::BooleanVar const *)arg1)->MakeHoleIterator(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVarIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BooleanVar_DomainIteratorAux(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntVarIterator *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BooleanVar_DomainIteratorAux",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BooleanVar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BooleanVar_DomainIteratorAux" "', argument " "1"" of type '" "operations_research::BooleanVar const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BooleanVar * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BooleanVar_DomainIteratorAux" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (operations_research::IntVarIterator *)((operations_research::BooleanVar const *)arg1)->MakeDomainIterator(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVarIterator, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BooleanVar_DebugString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BooleanVar *arg1 = (operations_research::BooleanVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BooleanVar_DebugString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BooleanVar, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BooleanVar_DebugString" "', argument " "1"" of type '" "operations_research::BooleanVar const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BooleanVar * >(argp1);
  {
    try {
      result = ((operations_research::BooleanVar const *)arg1)->DebugString(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BooleanVar_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__BooleanVar, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_RoutingIndexManager__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  operations_research::RoutingIndexManager::NodeIndex arg3 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::RoutingIndexManager *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:new_RoutingIndexManager",&obj0,&obj1,&obj2)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RoutingIndexManager" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RoutingIndexManager" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    arg3 = operations_research::RoutingNodeIndex(PyInt_AsLong(obj2));
  }
  {
    try {
      result = (operations_research::RoutingIndexManager *)new operations_research::RoutingIndexManager(arg1,arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__RoutingIndexManager, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RoutingIndexManager__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  int arg2 ;
  std::vector< operations_research::RoutingIndexManager::NodeIndex > *arg3 = 0 ;
  std::vector< operations_research::RoutingIndexManager::NodeIndex > *arg4 = 0 ;
  int val1 ;
  int ecode1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  std::vector< operations_research::RoutingNodeIndex > temp3 ;
  std::vector< operations_research::RoutingNodeIndex > temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::RoutingIndexManager *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:new_RoutingIndexManager",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_RoutingIndexManager" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_RoutingIndexManager" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    if (!vector_input_helper(obj2, &temp3, PyObjAs<operations_research::RoutingNodeIndex>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::RoutingNodeIndex) expected");
      return NULL;
    }
    arg3 = &temp3;
  }
  {
    if (!vector_input_helper(obj3, &temp4, PyObjAs<operations_research::RoutingNodeIndex>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::RoutingNodeIndex) expected");
      return NULL;
    }
    arg4 = &temp4;
  }
  {
    try {
      result = (operations_research::RoutingIndexManager *)new operations_research::RoutingIndexManager(arg1,arg2,(std::vector< operations_research::RoutingIndexManager::NodeIndex > const &)*arg3,(std::vector< operations_research::RoutingIndexManager::NodeIndex > const &)*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__RoutingIndexManager, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RoutingIndexManager(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_new_RoutingIndexManager__SWIG_0(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      int res = SWIG_AsVal_int(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          if (!PyTuple_Check(argv[2]) && !PyList_Check(argv[2])) {
            _v = 0;
          } else {
            const bool is_tuple = PyTuple_Check(argv[2]);
            const size_t size = is_tuple ? PyTuple_Size(argv[2]) : PyList_Size(argv[2]);
            size_t i = 0;
            while (i < size && PyInt_Check(is_tuple ? PyTuple_GetItem(argv[2], i)
                :PyList_GetItem(argv[2], i))) {
              ++i;
            }
            _v = i == size;
          }
        }
        if (_v) {
          {
            if (!PyTuple_Check(argv[3]) && !PyList_Check(argv[3])) {
              _v = 0;
            } else {
              const bool is_tuple = PyTuple_Check(argv[3]);
              const size_t size = is_tuple ? PyTuple_Size(argv[3]) : PyList_Size(argv[3]);
              size_t i = 0;
              while (i < size && PyInt_Check(is_tuple ? PyTuple_GetItem(argv[3], i)
                  :PyList_GetItem(argv[3], i))) {
                ++i;
              }
              _v = i == size;
            }
          }
          if (_v) {
            return _wrap_new_RoutingIndexManager__SWIG_1(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_RoutingIndexManager'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::RoutingIndexManager::RoutingIndexManager(int,int,operations_research::RoutingIndexManager::NodeIndex)\n"
    "    operations_research::RoutingIndexManager::RoutingIndexManager(int,int,std::vector< operations_research::RoutingIndexManager::NodeIndex > const &,std::vector< operations_research::RoutingIndexManager::NodeIndex > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RoutingIndexManager_GetNumberOfNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingIndexManager *arg1 = (operations_research::RoutingIndexManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingIndexManager_GetNumberOfNodes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingIndexManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingIndexManager_GetNumberOfNodes" "', argument " "1"" of type '" "operations_research::RoutingIndexManager const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingIndexManager * >(argp1);
  {
    try {
      result = (int)((operations_research::RoutingIndexManager const *)arg1)->num_nodes(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingIndexManager_GetNumberOfVehicles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingIndexManager *arg1 = (operations_research::RoutingIndexManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingIndexManager_GetNumberOfVehicles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingIndexManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingIndexManager_GetNumberOfVehicles" "', argument " "1"" of type '" "operations_research::RoutingIndexManager const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingIndexManager * >(argp1);
  {
    try {
      result = (int)((operations_research::RoutingIndexManager const *)arg1)->num_vehicles(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingIndexManager_GetNumberOfIndices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingIndexManager *arg1 = (operations_research::RoutingIndexManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingIndexManager_GetNumberOfIndices",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingIndexManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingIndexManager_GetNumberOfIndices" "', argument " "1"" of type '" "operations_research::RoutingIndexManager const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingIndexManager * >(argp1);
  {
    try {
      result = (int)((operations_research::RoutingIndexManager const *)arg1)->num_indices(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingIndexManager_GetStartIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingIndexManager *arg1 = (operations_research::RoutingIndexManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingIndexManager_GetStartIndex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingIndexManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingIndexManager_GetStartIndex" "', argument " "1"" of type '" "operations_research::RoutingIndexManager const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingIndexManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingIndexManager_GetStartIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int64_t)((operations_research::RoutingIndexManager const *)arg1)->GetStartIndex(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingIndexManager_GetEndIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingIndexManager *arg1 = (operations_research::RoutingIndexManager *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingIndexManager_GetEndIndex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingIndexManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingIndexManager_GetEndIndex" "', argument " "1"" of type '" "operations_research::RoutingIndexManager const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingIndexManager * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingIndexManager_GetEndIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int64_t)((operations_research::RoutingIndexManager const *)arg1)->GetEndIndex(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingIndexManager_NodeToIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingIndexManager *arg1 = (operations_research::RoutingIndexManager *) 0 ;
  operations_research::RoutingIndexManager::NodeIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingIndexManager_NodeToIndex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingIndexManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingIndexManager_NodeToIndex" "', argument " "1"" of type '" "operations_research::RoutingIndexManager const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingIndexManager * >(argp1);
  {
    arg2 = operations_research::RoutingNodeIndex(PyInt_AsLong(obj1));
  }
  {
    try {
      result = (int64_t)((operations_research::RoutingIndexManager const *)arg1)->NodeToIndex(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingIndexManager_IndexToNode(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingIndexManager *arg1 = (operations_research::RoutingIndexManager *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::RoutingIndexManager::NodeIndex result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingIndexManager_IndexToNode",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingIndexManager, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingIndexManager_IndexToNode" "', argument " "1"" of type '" "operations_research::RoutingIndexManager const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingIndexManager * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingIndexManager_IndexToNode" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = ((operations_research::RoutingIndexManager const *)arg1)->IndexToNode(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    resultobj = PyInt_FromLong((&result)->value());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RoutingIndexManager(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingIndexManager *arg1 = (operations_research::RoutingIndexManager *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RoutingIndexManager",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingIndexManager, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RoutingIndexManager" "', argument " "1"" of type '" "operations_research::RoutingIndexManager *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingIndexManager * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RoutingIndexManager_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__RoutingIndexManager, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_DefaultRoutingModelParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModelParameters result;
  
  if (!PyArg_ParseTuple(args,(char *)":DefaultRoutingModelParameters")) SWIG_fail;
  {
    try {
      result = operations_research::DefaultRoutingModelParameters(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    PyObject* const module = PyImport_ImportModule("ortools.constraint_solver.routing_parameters_pb2");
    if (module != nullptr) {
      PyObject* const dict = PyModule_GetDict(module);
      if (dict != nullptr) {
        PyObject* const clss = PyDict_GetItemString(dict, "RoutingModelParameters");
        if (clss != nullptr) {
          std::string encoded_protobuf;
          (&result)->SerializeToString(&encoded_protobuf);
          
          PyObject* const python_encoded_protobuf = PyBytes_FromStringAndSize(
            encoded_protobuf.c_str(), encoded_protobuf.size());
          
          
          
          
          PyObject* const result = PyObject_CallMethod(
            clss, const_cast<char*>("FromString"),
            const_cast<char*>("(O)"),
            python_encoded_protobuf);
          Py_DECREF(python_encoded_protobuf);
          resultobj = result;
        }
      }
      Py_DECREF(module);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_DefaultRoutingSearchParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingSearchParameters result;
  
  if (!PyArg_ParseTuple(args,(char *)":DefaultRoutingSearchParameters")) SWIG_fail;
  {
    try {
      result = operations_research::DefaultRoutingSearchParameters(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    PyObject* const module = PyImport_ImportModule("ortools.constraint_solver.routing_parameters_pb2");
    if (module != nullptr) {
      PyObject* const dict = PyModule_GetDict(module);
      if (dict != nullptr) {
        PyObject* const clss = PyDict_GetItemString(dict, "RoutingSearchParameters");
        if (clss != nullptr) {
          std::string encoded_protobuf;
          (&result)->SerializeToString(&encoded_protobuf);
          
          PyObject* const python_encoded_protobuf = PyBytes_FromStringAndSize(
            encoded_protobuf.c_str(), encoded_protobuf.size());
          
          
          
          
          PyObject* const result = PyObject_CallMethod(
            clss, const_cast<char*>("FromString"),
            const_cast<char*>("(O)"),
            python_encoded_protobuf);
          Py_DECREF(python_encoded_protobuf);
          resultobj = result;
        }
      }
      Py_DECREF(module);
    }
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_FindErrorInRoutingSearchParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingSearchParameters *arg1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:FindErrorInRoutingSearchParameters",&obj0)) SWIG_fail;
  {
    arg1 = new operations_research::RoutingSearchParameters;
    PyObject* const pyresult = PyObject_CallMethod(
      obj0, const_cast<char*>("SerializeToString"), nullptr);
    if (pyresult != nullptr) {
      char* buffer = nullptr;
      Py_ssize_t length = 0;
      int result = PyString_AsStringAndSize(pyresult, &buffer, &length);
      if (buffer != nullptr) {
        arg1->ParseFromArray(buffer, length);
      }
      Py_DECREF(pyresult);
    }
  }
  {
    try {
      result = operations_research::FindErrorInRoutingSearchParameters((operations_research::RoutingSearchParameters const &)*arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  {
    delete arg1;
  }
  return resultobj;
fail:
  {
    delete arg1;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_FirstSolutionStrategy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::FirstSolutionStrategy *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_FirstSolutionStrategy")) SWIG_fail;
  {
    try {
      result = (operations_research::FirstSolutionStrategy *)new operations_research::FirstSolutionStrategy(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__FirstSolutionStrategy, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_FirstSolutionStrategy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::FirstSolutionStrategy *arg1 = (operations_research::FirstSolutionStrategy *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_FirstSolutionStrategy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__FirstSolutionStrategy, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_FirstSolutionStrategy" "', argument " "1"" of type '" "operations_research::FirstSolutionStrategy *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::FirstSolutionStrategy * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *FirstSolutionStrategy_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__FirstSolutionStrategy, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_LocalSearchMetaheuristic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::LocalSearchMetaheuristic *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_LocalSearchMetaheuristic")) SWIG_fail;
  {
    try {
      result = (operations_research::LocalSearchMetaheuristic *)new operations_research::LocalSearchMetaheuristic(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__LocalSearchMetaheuristic, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_LocalSearchMetaheuristic(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::LocalSearchMetaheuristic *arg1 = (operations_research::LocalSearchMetaheuristic *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_LocalSearchMetaheuristic",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__LocalSearchMetaheuristic, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_LocalSearchMetaheuristic" "', argument " "1"" of type '" "operations_research::LocalSearchMetaheuristic *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::LocalSearchMetaheuristic * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *LocalSearchMetaheuristic_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__LocalSearchMetaheuristic, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_PathsMetadata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingIndexManager *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::PathsMetadata *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_PathsMetadata",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_operations_research__RoutingIndexManager,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_PathsMetadata" "', argument " "1"" of type '" "operations_research::RoutingIndexManager const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_PathsMetadata" "', argument " "1"" of type '" "operations_research::RoutingIndexManager const &""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingIndexManager * >(argp1);
  {
    try {
      result = (operations_research::PathsMetadata *)new operations_research::PathsMetadata((operations_research::RoutingIndexManager const &)*arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__PathsMetadata, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PathsMetadata_IsStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::PathsMetadata *arg1 = (operations_research::PathsMetadata *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PathsMetadata_IsStart",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__PathsMetadata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PathsMetadata_IsStart" "', argument " "1"" of type '" "operations_research::PathsMetadata const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::PathsMetadata * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PathsMetadata_IsStart" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (bool)((operations_research::PathsMetadata const *)arg1)->IsStart(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PathsMetadata_IsEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::PathsMetadata *arg1 = (operations_research::PathsMetadata *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PathsMetadata_IsEnd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__PathsMetadata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PathsMetadata_IsEnd" "', argument " "1"" of type '" "operations_research::PathsMetadata const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::PathsMetadata * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PathsMetadata_IsEnd" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (bool)((operations_research::PathsMetadata const *)arg1)->IsEnd(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PathsMetadata_GetPath(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::PathsMetadata *arg1 = (operations_research::PathsMetadata *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:PathsMetadata_GetPath",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__PathsMetadata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PathsMetadata_GetPath" "', argument " "1"" of type '" "operations_research::PathsMetadata const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::PathsMetadata * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "PathsMetadata_GetPath" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (int)((operations_research::PathsMetadata const *)arg1)->GetPath(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PathsMetadata_NumPaths(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::PathsMetadata *arg1 = (operations_research::PathsMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PathsMetadata_NumPaths",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__PathsMetadata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PathsMetadata_NumPaths" "', argument " "1"" of type '" "operations_research::PathsMetadata const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::PathsMetadata * >(argp1);
  {
    try {
      result = (int)((operations_research::PathsMetadata const *)arg1)->NumPaths(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PathsMetadata_Paths(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::PathsMetadata *arg1 = (operations_research::PathsMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int64_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PathsMetadata_Paths",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__PathsMetadata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PathsMetadata_Paths" "', argument " "1"" of type '" "operations_research::PathsMetadata const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::PathsMetadata * >(argp1);
  {
    try {
      result = (std::vector< int64_t > *) &((operations_research::PathsMetadata const *)arg1)->Paths(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    resultobj = vector_output_helper(result, &PyLong_FromLongLong);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PathsMetadata_Starts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::PathsMetadata *arg1 = (operations_research::PathsMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int64_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PathsMetadata_Starts",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__PathsMetadata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PathsMetadata_Starts" "', argument " "1"" of type '" "operations_research::PathsMetadata const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::PathsMetadata * >(argp1);
  {
    try {
      result = (std::vector< int64_t > *) &((operations_research::PathsMetadata const *)arg1)->Starts(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    resultobj = vector_output_helper(result, &PyLong_FromLongLong);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_PathsMetadata_Ends(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::PathsMetadata *arg1 = (operations_research::PathsMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int64_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:PathsMetadata_Ends",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__PathsMetadata, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "PathsMetadata_Ends" "', argument " "1"" of type '" "operations_research::PathsMetadata const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::PathsMetadata * >(argp1);
  {
    try {
      result = (std::vector< int64_t > *) &((operations_research::PathsMetadata const *)arg1)->Ends(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    resultobj = vector_output_helper(result, &PyLong_FromLongLong);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_PathsMetadata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::PathsMetadata *arg1 = (operations_research::PathsMetadata *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_PathsMetadata",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__PathsMetadata, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_PathsMetadata" "', argument " "1"" of type '" "operations_research::PathsMetadata *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::PathsMetadata * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *PathsMetadata_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__PathsMetadata, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_RoutingModel_kNoPenalty_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RoutingModel_kNoPenalty is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_RoutingModel_kNoPenalty_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_From_long(static_cast< long >(operations_research::RoutingModel::kNoPenalty));
  return pyobj;
}


SWIGINTERN int Swig_var_RoutingModel_kNoDisjunction_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RoutingModel_kNoDisjunction is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_RoutingModel_kNoDisjunction_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&operations_research::RoutingModel::kNoDisjunction), SWIGTYPE_p_RoutingDisjunctionIndex,  0 );
  return pyobj;
}


SWIGINTERN int Swig_var_RoutingModel_kNoDimension_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RoutingModel_kNoDimension is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_RoutingModel_kNoDimension_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_NewPointerObj(SWIG_as_voidptr(&operations_research::RoutingModel::kNoDimension), SWIGTYPE_p_RoutingDimensionIndex,  0 );
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_RoutingModel__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingIndexManager *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::RoutingModel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_RoutingModel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_operations_research__RoutingIndexManager,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RoutingModel" "', argument " "1"" of type '" "operations_research::RoutingIndexManager const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RoutingModel" "', argument " "1"" of type '" "operations_research::RoutingIndexManager const &""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingIndexManager * >(argp1);
  {
    try {
      result = (operations_research::RoutingModel *)new operations_research::RoutingModel((operations_research::RoutingIndexManager const &)*arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__RoutingModel, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RoutingModel__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingIndexManager *arg1 = 0 ;
  operations_research::RoutingModelParameters *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::RoutingModel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_RoutingModel",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_operations_research__RoutingIndexManager,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_RoutingModel" "', argument " "1"" of type '" "operations_research::RoutingIndexManager const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_RoutingModel" "', argument " "1"" of type '" "operations_research::RoutingIndexManager const &""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingIndexManager * >(argp1);
  {
    arg2 = new operations_research::RoutingModelParameters;
    PyObject* const pyresult = PyObject_CallMethod(
      obj1, const_cast<char*>("SerializeToString"), nullptr);
    if (pyresult != nullptr) {
      char* buffer = nullptr;
      Py_ssize_t length = 0;
      int result = PyString_AsStringAndSize(pyresult, &buffer, &length);
      if (buffer != nullptr) {
        arg2->ParseFromArray(buffer, length);
      }
      Py_DECREF(pyresult);
    }
  }
  {
    try {
      result = (operations_research::RoutingModel *)new operations_research::RoutingModel((operations_research::RoutingIndexManager const &)*arg1,(operations_research::RoutingModelParameters const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__RoutingModel, SWIG_POINTER_NEW |  0 );
  {
    delete arg2;
  }
  return resultobj;
fail:
  {
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_RoutingModel(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_operations_research__RoutingIndexManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_new_RoutingModel__SWIG_0(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    int res = SWIG_ConvertPtr(argv[0], 0, SWIGTYPE_p_operations_research__RoutingIndexManager, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        bool ok = false;
        PyObject* const module = PyImport_ImportModule("ortools.constraint_solver.routing_parameters_pb2");
        if (module != nullptr) {
          PyObject* const dict = PyModule_GetDict(module);
          if (dict != nullptr) {
            PyObject* const clss = PyDict_GetItemString(dict, "RoutingModelParameters");
            if (clss != nullptr) {
              if (PyObject_IsInstance(argv[1], clss)) {
                ok = true;
              }
            }
          }
          Py_DECREF(module);
        }
        _v = ok ? 1 : 0;
      }
      if (_v) {
        return _wrap_new_RoutingModel__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_RoutingModel'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::RoutingModel::RoutingModel(operations_research::RoutingIndexManager const &)\n"
    "    operations_research::RoutingModel::RoutingModel(operations_research::RoutingIndexManager const &,operations_research::RoutingModelParameters const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_RoutingModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RoutingModel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RoutingModel" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_RegisterUnaryTransitVector(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< int64_t > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int64_t > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_RegisterUnaryTransitVector",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_RegisterUnaryTransitVector" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg2 = std::move(temp2);
  }
  {
    try {
      result = (int)(arg1)->RegisterUnaryTransitVector(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_RegisterUnaryTransitCallback__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingModel::TransitCallback1 arg2 ;
  operations_research::RoutingModel::TransitEvaluatorSign arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_RegisterUnaryTransitCallback",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_RegisterUnaryTransitCallback" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    SharedPyPtr input(obj1);
    arg2 = [input](int64_t index) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "(L)", index);
    };
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_RegisterUnaryTransitCallback" "', argument " "3"" of type '" "operations_research::RoutingModel::TransitEvaluatorSign""'");
  } 
  arg3 = static_cast< operations_research::RoutingModel::TransitEvaluatorSign >(val3);
  {
    try {
      result = (int)(arg1)->RegisterUnaryTransitCallback(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_RegisterUnaryTransitCallback__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingModel::TransitCallback1 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_RegisterUnaryTransitCallback",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_RegisterUnaryTransitCallback" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    SharedPyPtr input(obj1);
    arg2 = [input](int64_t index) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "(L)", index);
    };
  }
  {
    try {
      result = (int)(arg1)->RegisterUnaryTransitCallback(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_RegisterUnaryTransitCallback(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__RoutingModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]);
      }
      if (_v) {
        return _wrap_RoutingModel_RegisterUnaryTransitCallback__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__RoutingModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RoutingModel_RegisterUnaryTransitCallback__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RoutingModel_RegisterUnaryTransitCallback'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::RoutingModel::RegisterUnaryTransitCallback(operations_research::RoutingModel::TransitCallback1,operations_research::RoutingModel::TransitEvaluatorSign)\n"
    "    operations_research::RoutingModel::RegisterUnaryTransitCallback(operations_research::RoutingModel::TransitCallback1)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RoutingModel_RegisterTransitMatrix(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< std::vector< int64_t > > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::vector< int64_t > > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_RegisterTransitMatrix",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_RegisterTransitMatrix" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    if (!PyList_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expecting a list of tuples");
      SWIG_fail;
    }
    int len = PyList_Size(obj1);
    int arity = -1;
    if (len > 0) {
      temp2.resize(len);
      for (size_t i = 0; i < len; ++i) {
        PyObject *tuple = PyList_GetItem(obj1, i);
        if (!PyTuple_Check(tuple) && !PyList_Check(tuple)) {
          PyErr_SetString(PyExc_TypeError, "Expecting a sequence");
          SWIG_fail;
        }
        bool is_tuple = PyTuple_Check(tuple);
        int arity = is_tuple ? PyTuple_Size(tuple) : PyList_Size(tuple);
        temp2[i].resize(arity);
        for (size_t j = 0; j < arity; ++j) {
          bool success = PyObjAs<int64_t>(
            is_tuple ? PyTuple_GetItem(tuple, j) : PyList_GetItem(tuple, j),
            &temp2[i][j]);
          if (!success) {
            SWIG_fail;
          }
        }
      }
    }
    arg2 = std::move(temp2);
  }
  {
    try {
      result = (int)(arg1)->RegisterTransitMatrix(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_RegisterTransitCallback__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingModel::TransitCallback2 arg2 ;
  operations_research::RoutingModel::TransitEvaluatorSign arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_RegisterTransitCallback",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_RegisterTransitCallback" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    SharedPyPtr input(obj1);
    arg2 = [input](int64_t i, int64_t j) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "LL", i, j);
    };
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_RegisterTransitCallback" "', argument " "3"" of type '" "operations_research::RoutingModel::TransitEvaluatorSign""'");
  } 
  arg3 = static_cast< operations_research::RoutingModel::TransitEvaluatorSign >(val3);
  {
    try {
      result = (int)(arg1)->RegisterTransitCallback(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_RegisterTransitCallback__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingModel::TransitCallback2 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_RegisterTransitCallback",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_RegisterTransitCallback" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    SharedPyPtr input(obj1);
    arg2 = [input](int64_t i, int64_t j) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "LL", i, j);
    };
  }
  {
    try {
      result = (int)(arg1)->RegisterTransitCallback(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_RegisterTransitCallback(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__RoutingModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]);
      }
      if (_v) {
        return _wrap_RoutingModel_RegisterTransitCallback__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__RoutingModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_int(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RoutingModel_RegisterTransitCallback__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RoutingModel_RegisterTransitCallback'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::RoutingModel::RegisterTransitCallback(operations_research::RoutingModel::TransitCallback2,operations_research::RoutingModel::TransitEvaluatorSign)\n"
    "    operations_research::RoutingModel::RegisterTransitCallback(operations_research::RoutingModel::TransitCallback2)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RoutingModel_TransitCallback(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::RoutingModel::TransitCallback2 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_TransitCallback",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_TransitCallback" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_TransitCallback" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (operations_research::RoutingModel::TransitCallback2 *) &((operations_research::RoutingModel const *)arg1)->TransitCallback(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__functionT_long_flong_longF_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_UnaryTransitCallbackOrNull(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::RoutingModel::TransitCallback1 *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_UnaryTransitCallbackOrNull",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_UnaryTransitCallbackOrNull" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_UnaryTransitCallbackOrNull" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (operations_research::RoutingModel::TransitCallback1 *) &((operations_research::RoutingModel const *)arg1)->UnaryTransitCallbackOrNull(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__functionT_long_flongF_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddDimension(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  int64_t arg3 ;
  int64_t arg4 ;
  bool arg5 ;
  std::string *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:RoutingModel_AddDimension",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AddDimension" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_AddDimension" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_AddDimension" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RoutingModel_AddDimension" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RoutingModel_AddDimension" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "RoutingModel_AddDimension" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_AddDimension" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  {
    try {
      result = (bool)(arg1)->AddDimension(arg2,arg3,arg4,arg5,(std::string const &)*arg6); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddDimensionWithVehicleTransits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< int > *arg2 = 0 ;
  int64_t arg3 ;
  int64_t arg4 ;
  bool arg5 ;
  std::string *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > temp2 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:RoutingModel_AddDimensionWithVehicleTransits",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AddDimensionWithVehicleTransits" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_AddDimensionWithVehicleTransits" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RoutingModel_AddDimensionWithVehicleTransits" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RoutingModel_AddDimensionWithVehicleTransits" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "RoutingModel_AddDimensionWithVehicleTransits" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_AddDimensionWithVehicleTransits" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  {
    try {
      result = (bool)(arg1)->AddDimensionWithVehicleTransits((std::vector< int > const &)*arg2,arg3,arg4,arg5,(std::string const &)*arg6); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddDimensionWithVehicleCapacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  int64_t arg3 ;
  std::vector< int64_t > arg4 ;
  bool arg5 ;
  std::string *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  std::vector< int64_t > temp4 ;
  bool val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:RoutingModel_AddDimensionWithVehicleCapacity",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AddDimensionWithVehicleCapacity" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_AddDimensionWithVehicleCapacity" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_AddDimensionWithVehicleCapacity" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    if (!vector_input_helper(obj3, &temp4, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg4 = std::move(temp4);
  }
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RoutingModel_AddDimensionWithVehicleCapacity" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "RoutingModel_AddDimensionWithVehicleCapacity" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_AddDimensionWithVehicleCapacity" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  {
    try {
      result = (bool)(arg1)->AddDimensionWithVehicleCapacity(arg2,arg3,arg4,arg5,(std::string const &)*arg6); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddDimensionWithVehicleTransitAndCapacity(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< int > *arg2 = 0 ;
  int64_t arg3 ;
  std::vector< int64_t > arg4 ;
  bool arg5 ;
  std::string *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > temp2 ;
  long val3 ;
  int ecode3 = 0 ;
  std::vector< int64_t > temp4 ;
  bool val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:RoutingModel_AddDimensionWithVehicleTransitAndCapacity",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AddDimensionWithVehicleTransitAndCapacity" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_AddDimensionWithVehicleTransitAndCapacity" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    if (!vector_input_helper(obj3, &temp4, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg4 = std::move(temp4);
  }
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RoutingModel_AddDimensionWithVehicleTransitAndCapacity" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "RoutingModel_AddDimensionWithVehicleTransitAndCapacity" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_AddDimensionWithVehicleTransitAndCapacity" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  {
    try {
      result = (bool)(arg1)->AddDimensionWithVehicleTransitAndCapacity((std::vector< int > const &)*arg2,arg3,arg4,arg5,(std::string const &)*arg6); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddConstantDimensionWithSlack(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  int64_t arg4 ;
  bool arg5 ;
  std::string *arg6 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  int res6 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  PyObject * obj5 = 0 ;
  std::pair< int,bool > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOOO:RoutingModel_AddConstantDimensionWithSlack",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AddConstantDimensionWithSlack" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_AddConstantDimensionWithSlack" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_AddConstantDimensionWithSlack" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RoutingModel_AddConstantDimensionWithSlack" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RoutingModel_AddConstantDimensionWithSlack" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    std::string *ptr = (std::string *)0;
    res6 = SWIG_AsPtr_std_string(obj5, &ptr);
    if (!SWIG_IsOK(res6)) {
      SWIG_exception_fail(SWIG_ArgError(res6), "in method '" "RoutingModel_AddConstantDimensionWithSlack" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_AddConstantDimensionWithSlack" "', argument " "6"" of type '" "std::string const &""'"); 
    }
    arg6 = ptr;
  }
  {
    try {
      result = (arg1)->AddConstantDimensionWithSlack(arg2,arg3,arg4,arg5,(std::string const &)*arg6); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    resultobj = Py_BuildValue("(ib)", (&result)->first, (&result)->second);
  }
  if (SWIG_IsNewObj(res6)) delete arg6;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res6)) delete arg6;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddConstantDimension(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  bool arg4 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::pair< int,bool > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:RoutingModel_AddConstantDimension",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AddConstantDimension" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_AddConstantDimension" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_AddConstantDimension" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RoutingModel_AddConstantDimension" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "RoutingModel_AddConstantDimension" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_AddConstantDimension" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  {
    try {
      result = (arg1)->AddConstantDimension(arg2,arg3,arg4,(std::string const &)*arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    resultobj = Py_BuildValue("(ib)", (&result)->first, (&result)->second);
  }
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddVectorDimension(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< int64_t > arg2 ;
  int64_t arg3 ;
  bool arg4 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int64_t > temp2 ;
  long val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::pair< int,bool > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:RoutingModel_AddVectorDimension",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AddVectorDimension" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg2 = std::move(temp2);
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_AddVectorDimension" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RoutingModel_AddVectorDimension" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "RoutingModel_AddVectorDimension" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_AddVectorDimension" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  {
    try {
      result = (arg1)->AddVectorDimension(arg2,arg3,arg4,(std::string const &)*arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    resultobj = Py_BuildValue("(ib)", (&result)->first, (&result)->second);
  }
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddMatrixDimension(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< std::vector< int64_t > > arg2 ;
  int64_t arg3 ;
  bool arg4 ;
  std::string *arg5 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::vector< int64_t > > temp2 ;
  long val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  int res5 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  std::pair< int,bool > result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:RoutingModel_AddMatrixDimension",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AddMatrixDimension" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    if (!PyList_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expecting a list of tuples");
      SWIG_fail;
    }
    int len = PyList_Size(obj1);
    int arity = -1;
    if (len > 0) {
      temp2.resize(len);
      for (size_t i = 0; i < len; ++i) {
        PyObject *tuple = PyList_GetItem(obj1, i);
        if (!PyTuple_Check(tuple) && !PyList_Check(tuple)) {
          PyErr_SetString(PyExc_TypeError, "Expecting a sequence");
          SWIG_fail;
        }
        bool is_tuple = PyTuple_Check(tuple);
        int arity = is_tuple ? PyTuple_Size(tuple) : PyList_Size(tuple);
        temp2[i].resize(arity);
        for (size_t j = 0; j < arity; ++j) {
          bool success = PyObjAs<int64_t>(
            is_tuple ? PyTuple_GetItem(tuple, j) : PyList_GetItem(tuple, j),
            &temp2[i][j]);
          if (!success) {
            SWIG_fail;
          }
        }
      }
    }
    arg2 = std::move(temp2);
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_AddMatrixDimension" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RoutingModel_AddMatrixDimension" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  {
    std::string *ptr = (std::string *)0;
    res5 = SWIG_AsPtr_std_string(obj4, &ptr);
    if (!SWIG_IsOK(res5)) {
      SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "RoutingModel_AddMatrixDimension" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_AddMatrixDimension" "', argument " "5"" of type '" "std::string const &""'"); 
    }
    arg5 = ptr;
  }
  {
    try {
      result = (arg1)->AddMatrixDimension(arg2,arg3,arg4,(std::string const &)*arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    resultobj = Py_BuildValue("(ib)", (&result)->first, (&result)->second);
  }
  if (SWIG_IsNewObj(res5)) delete arg5;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res5)) delete arg5;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetAllDimensionNames(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< std::string > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_GetAllDimensionNames",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetAllDimensionNames" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = ((operations_research::RoutingModel const *)arg1)->GetAllDimensionNames(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    resultobj = vector_output_helper(&result, &SwigString_FromString);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetDimensions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< operations_research::RoutingDimension * > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_GetDimensions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetDimensions" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (std::vector< operations_research::RoutingDimension * > *) &((operations_research::RoutingModel const *)arg1)->GetDimensions(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_operations_research__RoutingDimension_p_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetDimensionsWithSoftOrSpanCosts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< operations_research::RoutingDimension * > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_GetDimensionsWithSoftOrSpanCosts",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetDimensionsWithSoftOrSpanCosts" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = ((operations_research::RoutingModel const *)arg1)->GetDimensionsWithSoftOrSpanCosts(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< operations_research::RoutingDimension * >(static_cast< const std::vector< operations_research::RoutingDimension * >& >(result))), SWIGTYPE_p_std__vectorT_operations_research__RoutingDimension_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetDimensionsWithGlobalCumulOptimizers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< operations_research::RoutingDimension const * > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_GetDimensionsWithGlobalCumulOptimizers",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetDimensionsWithGlobalCumulOptimizers" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = ((operations_research::RoutingModel const *)arg1)->GetDimensionsWithGlobalCumulOptimizers(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< operations_research::RoutingDimension const * >(static_cast< const std::vector< operations_research::RoutingDimension const * >& >(result))), SWIGTYPE_p_std__vectorT_operations_research__RoutingDimension_const_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetDimensionsWithLocalCumulOptimizers(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  SwigValueWrapper< std::vector< operations_research::RoutingDimension const * > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_GetDimensionsWithLocalCumulOptimizers",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetDimensionsWithLocalCumulOptimizers" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = ((operations_research::RoutingModel const *)arg1)->GetDimensionsWithLocalCumulOptimizers(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< operations_research::RoutingDimension const * >(static_cast< const std::vector< operations_research::RoutingDimension const * >& >(result))), SWIGTYPE_p_std__vectorT_operations_research__RoutingDimension_const_p_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_HasGlobalCumulOptimizer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingDimension *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_HasGlobalCumulOptimizer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_HasGlobalCumulOptimizer" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__RoutingDimension,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_HasGlobalCumulOptimizer" "', argument " "2"" of type '" "operations_research::RoutingDimension const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_HasGlobalCumulOptimizer" "', argument " "2"" of type '" "operations_research::RoutingDimension const &""'"); 
  }
  arg2 = reinterpret_cast< operations_research::RoutingDimension * >(argp2);
  {
    try {
      result = (bool)((operations_research::RoutingModel const *)arg1)->HasGlobalCumulOptimizer((operations_research::RoutingDimension const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_HasLocalCumulOptimizer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingDimension *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_HasLocalCumulOptimizer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_HasLocalCumulOptimizer" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__RoutingDimension,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_HasLocalCumulOptimizer" "', argument " "2"" of type '" "operations_research::RoutingDimension const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_HasLocalCumulOptimizer" "', argument " "2"" of type '" "operations_research::RoutingDimension const &""'"); 
  }
  arg2 = reinterpret_cast< operations_research::RoutingDimension * >(argp2);
  {
    try {
      result = (bool)((operations_research::RoutingModel const *)arg1)->HasLocalCumulOptimizer((operations_research::RoutingDimension const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetMutableGlobalCumulLPOptimizer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingDimension *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::GlobalDimensionCumulOptimizer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_GetMutableGlobalCumulLPOptimizer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetMutableGlobalCumulLPOptimizer" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__RoutingDimension,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_GetMutableGlobalCumulLPOptimizer" "', argument " "2"" of type '" "operations_research::RoutingDimension const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_GetMutableGlobalCumulLPOptimizer" "', argument " "2"" of type '" "operations_research::RoutingDimension const &""'"); 
  }
  arg2 = reinterpret_cast< operations_research::RoutingDimension * >(argp2);
  {
    try {
      result = (operations_research::GlobalDimensionCumulOptimizer *)((operations_research::RoutingModel const *)arg1)->GetMutableGlobalCumulLPOptimizer((operations_research::RoutingDimension const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__GlobalDimensionCumulOptimizer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetMutableGlobalCumulMPOptimizer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingDimension *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::GlobalDimensionCumulOptimizer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_GetMutableGlobalCumulMPOptimizer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetMutableGlobalCumulMPOptimizer" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__RoutingDimension,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_GetMutableGlobalCumulMPOptimizer" "', argument " "2"" of type '" "operations_research::RoutingDimension const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_GetMutableGlobalCumulMPOptimizer" "', argument " "2"" of type '" "operations_research::RoutingDimension const &""'"); 
  }
  arg2 = reinterpret_cast< operations_research::RoutingDimension * >(argp2);
  {
    try {
      result = (operations_research::GlobalDimensionCumulOptimizer *)((operations_research::RoutingModel const *)arg1)->GetMutableGlobalCumulMPOptimizer((operations_research::RoutingDimension const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__GlobalDimensionCumulOptimizer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetMutableLocalCumulLPOptimizer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingDimension *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::LocalDimensionCumulOptimizer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_GetMutableLocalCumulLPOptimizer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetMutableLocalCumulLPOptimizer" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__RoutingDimension,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_GetMutableLocalCumulLPOptimizer" "', argument " "2"" of type '" "operations_research::RoutingDimension const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_GetMutableLocalCumulLPOptimizer" "', argument " "2"" of type '" "operations_research::RoutingDimension const &""'"); 
  }
  arg2 = reinterpret_cast< operations_research::RoutingDimension * >(argp2);
  {
    try {
      result = (operations_research::LocalDimensionCumulOptimizer *)((operations_research::RoutingModel const *)arg1)->GetMutableLocalCumulLPOptimizer((operations_research::RoutingDimension const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__LocalDimensionCumulOptimizer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetMutableLocalCumulMPOptimizer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingDimension *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::LocalDimensionCumulOptimizer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_GetMutableLocalCumulMPOptimizer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetMutableLocalCumulMPOptimizer" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__RoutingDimension,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_GetMutableLocalCumulMPOptimizer" "', argument " "2"" of type '" "operations_research::RoutingDimension const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_GetMutableLocalCumulMPOptimizer" "', argument " "2"" of type '" "operations_research::RoutingDimension const &""'"); 
  }
  arg2 = reinterpret_cast< operations_research::RoutingDimension * >(argp2);
  {
    try {
      result = (operations_research::LocalDimensionCumulOptimizer *)((operations_research::RoutingModel const *)arg1)->GetMutableLocalCumulMPOptimizer((operations_research::RoutingDimension const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__LocalDimensionCumulOptimizer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_HasDimension(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_HasDimension",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_HasDimension" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_HasDimension" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_HasDimension" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)((operations_research::RoutingModel const *)arg1)->HasDimension((std::string const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetDimensionOrDie(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::RoutingDimension *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_GetDimensionOrDie",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetDimensionOrDie" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_GetDimensionOrDie" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_GetDimensionOrDie" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (operations_research::RoutingDimension *) &((operations_research::RoutingModel const *)arg1)->GetDimensionOrDie((std::string const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetMutableDimension(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::RoutingDimension *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_GetMutableDimension",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetMutableDimension" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_GetMutableDimension" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_GetMutableDimension" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (operations_research::RoutingDimension *)((operations_research::RoutingModel const *)arg1)->GetMutableDimension((std::string const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_SetPrimaryConstrainedDimension(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_SetPrimaryConstrainedDimension",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_SetPrimaryConstrainedDimension" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_SetPrimaryConstrainedDimension" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_SetPrimaryConstrainedDimension" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      (arg1)->SetPrimaryConstrainedDimension((std::string const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetPrimaryConstrainedDimension(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_GetPrimaryConstrainedDimension",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetPrimaryConstrainedDimension" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (std::string *) &((operations_research::RoutingModel const *)arg1)->GetPrimaryConstrainedDimension(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddResourceGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_AddResourceGroup",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AddResourceGroup" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (int)(arg1)->AddResourceGroup(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetResourceGroups(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::unique_ptr< operations_research::RoutingModel::ResourceGroup > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_GetResourceGroups",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetResourceGroups" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (std::vector< std::unique_ptr< operations_research::RoutingModel::ResourceGroup > > *) &((operations_research::RoutingModel const *)arg1)->GetResourceGroups(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_std__unique_ptrT_operations_research__RoutingModel__ResourceGroup_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetResourceGroup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::RoutingModel::ResourceGroup *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_GetResourceGroup",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetResourceGroup" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_GetResourceGroup" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (operations_research::RoutingModel::ResourceGroup *)((operations_research::RoutingModel const *)arg1)->GetResourceGroup(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__RoutingModel__ResourceGroup, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetDimensionResourceGroupIndices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingDimension *arg2 = (operations_research::RoutingDimension *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_GetDimensionResourceGroupIndices",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetDimensionResourceGroupIndices" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_GetDimensionResourceGroupIndices" "', argument " "2"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::RoutingDimension * >(argp2);
  {
    try {
      result = (std::vector< int > *) &((operations_research::RoutingModel const *)arg1)->GetDimensionResourceGroupIndices((operations_research::RoutingDimension const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    resultobj = vector_output_helper(result, &PyInt_FromLong);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetDimensionResourceGroupIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingDimension *arg2 = (operations_research::RoutingDimension *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_GetDimensionResourceGroupIndex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetDimensionResourceGroupIndex" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_GetDimensionResourceGroupIndex" "', argument " "2"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::RoutingDimension * >(argp2);
  {
    try {
      result = (int)((operations_research::RoutingModel const *)arg1)->GetDimensionResourceGroupIndex((operations_research::RoutingDimension const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddDisjunction__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< int64_t > *arg2 = 0 ;
  int64_t arg3 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int64_t > temp2 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::RoutingModel::DisjunctionIndex result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RoutingModel_AddDisjunction",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AddDisjunction" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_AddDisjunction" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RoutingModel_AddDisjunction" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      result = (arg1)->AddDisjunction((std::vector< int64_t > const &)*arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    resultobj = PyInt_FromLong((&result)->value());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddDisjunction__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< int64_t > *arg2 = 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int64_t > temp2 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::RoutingModel::DisjunctionIndex result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_AddDisjunction",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AddDisjunction" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_AddDisjunction" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (arg1)->AddDisjunction((std::vector< int64_t > const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    resultobj = PyInt_FromLong((&result)->value());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddDisjunction__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< int64_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int64_t > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::RoutingModel::DisjunctionIndex result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_AddDisjunction",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AddDisjunction" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (arg1)->AddDisjunction((std::vector< int64_t > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    resultobj = PyInt_FromLong((&result)->value());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddDisjunction(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__RoutingModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        return _wrap_RoutingModel_AddDisjunction__SWIG_2(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__RoutingModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RoutingModel_AddDisjunction__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__RoutingModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        if (!PyTuple_Check(argv[1]) && !PyList_Check(argv[1])) {
          _v = 0;
        } else {
          const bool is_tuple = PyTuple_Check(argv[1]);
          const size_t size = is_tuple ? PyTuple_Size(argv[1]) : PyList_Size(argv[1]);
          size_t i = 0;
          while (i < size && SwigPyIntOrLong_Check(is_tuple ? PyTuple_GetItem(argv[1], i)
              :PyList_GetItem(argv[1], i))) {
            ++i;
          }
          _v = i == size;
        }
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          {
            int res = SWIG_AsVal_long(argv[3], NULL);
            _v = SWIG_CheckState(res);
          }
          if (_v) {
            return _wrap_RoutingModel_AddDisjunction__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RoutingModel_AddDisjunction'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::RoutingModel::AddDisjunction(std::vector< int64_t > const &,int64_t,int64_t)\n"
    "    operations_research::RoutingModel::AddDisjunction(std::vector< int64_t > const &,int64_t)\n"
    "    operations_research::RoutingModel::AddDisjunction(std::vector< int64_t > const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetDisjunctionIndices(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< operations_research::RoutingModel::DisjunctionIndex > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_GetDisjunctionIndices",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetDisjunctionIndices" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_GetDisjunctionIndices" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (std::vector< operations_research::RoutingModel::DisjunctionIndex > *) &((operations_research::RoutingModel const *)arg1)->GetDisjunctionIndices(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    resultobj = vector_output_helper(result, &PyInt_FromIndexT<operations_research::RoutingDisjunctionIndex>);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetDisjunctionPenalty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingModel::DisjunctionIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_GetDisjunctionPenalty",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetDisjunctionPenalty" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    arg2 = operations_research::RoutingDisjunctionIndex(PyInt_AsLong(obj1));
  }
  {
    try {
      result = (int64_t)((operations_research::RoutingModel const *)arg1)->GetDisjunctionPenalty(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetDisjunctionMaxCardinality(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingModel::DisjunctionIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_GetDisjunctionMaxCardinality",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetDisjunctionMaxCardinality" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    arg2 = operations_research::RoutingDisjunctionIndex(PyInt_AsLong(obj1));
  }
  {
    try {
      result = (int64_t)((operations_research::RoutingModel const *)arg1)->GetDisjunctionMaxCardinality(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetNumberOfDisjunctions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_GetNumberOfDisjunctions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetNumberOfDisjunctions" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (int)((operations_research::RoutingModel const *)arg1)->GetNumberOfDisjunctions(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_HasMandatoryDisjunctions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_HasMandatoryDisjunctions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_HasMandatoryDisjunctions" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (bool)((operations_research::RoutingModel const *)arg1)->HasMandatoryDisjunctions(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_HasMaxCardinalityConstrainedDisjunctions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_HasMaxCardinalityConstrainedDisjunctions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_HasMaxCardinalityConstrainedDisjunctions" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (bool)((operations_research::RoutingModel const *)arg1)->HasMaxCardinalityConstrainedDisjunctions(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetPerfectBinaryDisjunctions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< std::pair< int64_t,int64_t > > result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_GetPerfectBinaryDisjunctions",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetPerfectBinaryDisjunctions" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = ((operations_research::RoutingModel const *)arg1)->GetPerfectBinaryDisjunctions(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new std::vector< std::pair< int64_t,int64_t > >(static_cast< const std::vector< std::pair< int64_t,int64_t > >& >(result))), SWIGTYPE_p_std__vectorT_std__pairT_long_long_t_t, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_IgnoreDisjunctionsAlreadyForcedToZero(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_IgnoreDisjunctionsAlreadyForcedToZero",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_IgnoreDisjunctionsAlreadyForcedToZero" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      (arg1)->IgnoreDisjunctionsAlreadyForcedToZero(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddSoftSameVehicleConstraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< int64_t > *arg2 = 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int64_t > temp2 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_AddSoftSameVehicleConstraint",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AddSoftSameVehicleConstraint" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_AddSoftSameVehicleConstraint" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      (arg1)->AddSoftSameVehicleConstraint((std::vector< int64_t > const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_SetAllowedVehiclesForIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< int > *arg2 = 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int > temp2 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_SetAllowedVehiclesForIndex",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_SetAllowedVehiclesForIndex" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<int>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_SetAllowedVehiclesForIndex" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      (arg1)->SetAllowedVehiclesForIndex((std::vector< int > const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_IsVehicleAllowedForIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_IsVehicleAllowedForIndex",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_IsVehicleAllowedForIndex" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_IsVehicleAllowedForIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_IsVehicleAllowedForIndex" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (bool)(arg1)->IsVehicleAllowedForIndex(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddPickupAndDelivery(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_AddPickupAndDelivery",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AddPickupAndDelivery" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_AddPickupAndDelivery" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_AddPickupAndDelivery" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      (arg1)->AddPickupAndDelivery(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddPickupAndDeliverySets(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingModel::DisjunctionIndex arg2 ;
  operations_research::RoutingModel::DisjunctionIndex arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_AddPickupAndDeliverySets",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AddPickupAndDeliverySets" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    arg2 = operations_research::RoutingDisjunctionIndex(PyInt_AsLong(obj1));
  }
  {
    arg3 = operations_research::RoutingDisjunctionIndex(PyInt_AsLong(obj2));
  }
  {
    try {
      (arg1)->AddPickupAndDeliverySets(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetPickupPositions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< operations_research::RoutingModel::PickupDeliveryPosition > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_GetPickupPositions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetPickupPositions" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_GetPickupPositions" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (std::vector< operations_research::RoutingModel::PickupDeliveryPosition > *) &((operations_research::RoutingModel const *)arg1)->GetPickupPositions(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_operations_research__RoutingModel__PickupDeliveryPosition_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetDeliveryPositions(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< operations_research::RoutingModel::PickupDeliveryPosition > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_GetDeliveryPositions",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetDeliveryPositions" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_GetDeliveryPositions" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (std::vector< operations_research::RoutingModel::PickupDeliveryPosition > *) &((operations_research::RoutingModel const *)arg1)->GetDeliveryPositions(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_operations_research__RoutingModel__PickupDeliveryPosition_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_IsPickup(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_IsPickup",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_IsPickup" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_IsPickup" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (bool)((operations_research::RoutingModel const *)arg1)->IsPickup(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_IsDelivery(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_IsDelivery",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_IsDelivery" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_IsDelivery" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (bool)((operations_research::RoutingModel const *)arg1)->IsDelivery(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_SetPickupAndDeliveryPolicyOfAllVehicles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingModel::PickupAndDeliveryPolicy arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_SetPickupAndDeliveryPolicyOfAllVehicles",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_SetPickupAndDeliveryPolicyOfAllVehicles" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_SetPickupAndDeliveryPolicyOfAllVehicles" "', argument " "2"" of type '" "operations_research::RoutingModel::PickupAndDeliveryPolicy""'");
  } 
  arg2 = static_cast< operations_research::RoutingModel::PickupAndDeliveryPolicy >(val2);
  {
    try {
      (arg1)->SetPickupAndDeliveryPolicyOfAllVehicles(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_SetPickupAndDeliveryPolicyOfVehicle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingModel::PickupAndDeliveryPolicy arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_SetPickupAndDeliveryPolicyOfVehicle",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_SetPickupAndDeliveryPolicyOfVehicle" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_SetPickupAndDeliveryPolicyOfVehicle" "', argument " "2"" of type '" "operations_research::RoutingModel::PickupAndDeliveryPolicy""'");
  } 
  arg2 = static_cast< operations_research::RoutingModel::PickupAndDeliveryPolicy >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_SetPickupAndDeliveryPolicyOfVehicle" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->SetPickupAndDeliveryPolicyOfVehicle(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetPickupAndDeliveryPolicyOfVehicle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::RoutingModel::PickupAndDeliveryPolicy result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_GetPickupAndDeliveryPolicyOfVehicle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetPickupAndDeliveryPolicyOfVehicle" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_GetPickupAndDeliveryPolicyOfVehicle" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (operations_research::RoutingModel::PickupAndDeliveryPolicy)((operations_research::RoutingModel const *)arg1)->GetPickupAndDeliveryPolicyOfVehicle(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetNumOfSingletonNodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_GetNumOfSingletonNodes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetNumOfSingletonNodes" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (int)((operations_research::RoutingModel const *)arg1)->GetNumOfSingletonNodes(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_SetVisitType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64_t arg2 ;
  int arg3 ;
  operations_research::RoutingModel::VisitTypePolicy arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RoutingModel_SetVisitType",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_SetVisitType" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_SetVisitType" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_SetVisitType" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RoutingModel_SetVisitType" "', argument " "4"" of type '" "operations_research::RoutingModel::VisitTypePolicy""'");
  } 
  arg4 = static_cast< operations_research::RoutingModel::VisitTypePolicy >(val4);
  {
    try {
      (arg1)->SetVisitType(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetVisitType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_GetVisitType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetVisitType" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_GetVisitType" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (int)((operations_research::RoutingModel const *)arg1)->GetVisitType(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetSingleNodesOfType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_GetSingleNodesOfType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetSingleNodesOfType" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_GetSingleNodesOfType" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (std::vector< int > *) &((operations_research::RoutingModel const *)arg1)->GetSingleNodesOfType(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    resultobj = vector_output_helper(result, &PyInt_FromLong);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetPairIndicesOfType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_GetPairIndicesOfType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetPairIndicesOfType" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_GetPairIndicesOfType" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (std::vector< int > *) &((operations_research::RoutingModel const *)arg1)->GetPairIndicesOfType(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    resultobj = vector_output_helper(result, &PyInt_FromLong);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetVisitTypePolicy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::RoutingModel::VisitTypePolicy result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_GetVisitTypePolicy",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetVisitTypePolicy" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_GetVisitTypePolicy" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::RoutingModel::VisitTypePolicy)((operations_research::RoutingModel const *)arg1)->GetVisitTypePolicy(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_CloseVisitTypes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_CloseVisitTypes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_CloseVisitTypes" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      (arg1)->CloseVisitTypes(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetNumberOfVisitTypes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_GetNumberOfVisitTypes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetNumberOfVisitTypes" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (int)((operations_research::RoutingModel const *)arg1)->GetNumberOfVisitTypes(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddHardTypeIncompatibility(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_AddHardTypeIncompatibility",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AddHardTypeIncompatibility" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_AddHardTypeIncompatibility" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_AddHardTypeIncompatibility" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->AddHardTypeIncompatibility(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddTemporalTypeIncompatibility(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_AddTemporalTypeIncompatibility",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AddTemporalTypeIncompatibility" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_AddTemporalTypeIncompatibility" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_AddTemporalTypeIncompatibility" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->AddTemporalTypeIncompatibility(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetHardTypeIncompatibilitiesOfType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  absl::flat_hash_set< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_GetHardTypeIncompatibilitiesOfType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetHardTypeIncompatibilitiesOfType" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_GetHardTypeIncompatibilitiesOfType" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (absl::flat_hash_set< int > *) &((operations_research::RoutingModel const *)arg1)->GetHardTypeIncompatibilitiesOfType(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_absl__flat_hash_setT_int_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetTemporalTypeIncompatibilitiesOfType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  absl::flat_hash_set< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_GetTemporalTypeIncompatibilitiesOfType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetTemporalTypeIncompatibilitiesOfType" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_GetTemporalTypeIncompatibilitiesOfType" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (absl::flat_hash_set< int > *) &((operations_research::RoutingModel const *)arg1)->GetTemporalTypeIncompatibilitiesOfType(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_absl__flat_hash_setT_int_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_HasHardTypeIncompatibilities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_HasHardTypeIncompatibilities",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_HasHardTypeIncompatibilities" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (bool)((operations_research::RoutingModel const *)arg1)->HasHardTypeIncompatibilities(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_HasTemporalTypeIncompatibilities(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_HasTemporalTypeIncompatibilities",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_HasTemporalTypeIncompatibilities" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (bool)((operations_research::RoutingModel const *)arg1)->HasTemporalTypeIncompatibilities(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddSameVehicleRequiredTypeAlternatives(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  absl::flat_hash_set< int > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_AddSameVehicleRequiredTypeAlternatives",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AddSameVehicleRequiredTypeAlternatives" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_AddSameVehicleRequiredTypeAlternatives" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_absl__flat_hash_setT_int_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RoutingModel_AddSameVehicleRequiredTypeAlternatives" "', argument " "3"" of type '" "absl::flat_hash_set< int >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_AddSameVehicleRequiredTypeAlternatives" "', argument " "3"" of type '" "absl::flat_hash_set< int >""'");
    } else {
      absl::flat_hash_set< int > * temp = reinterpret_cast< absl::flat_hash_set< int > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (arg1)->AddSameVehicleRequiredTypeAlternatives(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddRequiredTypeAlternativesWhenAddingType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  absl::flat_hash_set< int > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_AddRequiredTypeAlternativesWhenAddingType",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AddRequiredTypeAlternativesWhenAddingType" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_AddRequiredTypeAlternativesWhenAddingType" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_absl__flat_hash_setT_int_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RoutingModel_AddRequiredTypeAlternativesWhenAddingType" "', argument " "3"" of type '" "absl::flat_hash_set< int >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_AddRequiredTypeAlternativesWhenAddingType" "', argument " "3"" of type '" "absl::flat_hash_set< int >""'");
    } else {
      absl::flat_hash_set< int > * temp = reinterpret_cast< absl::flat_hash_set< int > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (arg1)->AddRequiredTypeAlternativesWhenAddingType(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddRequiredTypeAlternativesWhenRemovingType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  absl::flat_hash_set< int > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_AddRequiredTypeAlternativesWhenRemovingType",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AddRequiredTypeAlternativesWhenRemovingType" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_AddRequiredTypeAlternativesWhenRemovingType" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_absl__flat_hash_setT_int_t,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RoutingModel_AddRequiredTypeAlternativesWhenRemovingType" "', argument " "3"" of type '" "absl::flat_hash_set< int >""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_AddRequiredTypeAlternativesWhenRemovingType" "', argument " "3"" of type '" "absl::flat_hash_set< int >""'");
    } else {
      absl::flat_hash_set< int > * temp = reinterpret_cast< absl::flat_hash_set< int > * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      (arg1)->AddRequiredTypeAlternativesWhenRemovingType(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetSameVehicleRequiredTypeAlternativesOfType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< absl::flat_hash_set< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_GetSameVehicleRequiredTypeAlternativesOfType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetSameVehicleRequiredTypeAlternativesOfType" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_GetSameVehicleRequiredTypeAlternativesOfType" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (std::vector< absl::flat_hash_set< int > > *) &((operations_research::RoutingModel const *)arg1)->GetSameVehicleRequiredTypeAlternativesOfType(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_absl__flat_hash_setT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetRequiredTypeAlternativesWhenAddingType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< absl::flat_hash_set< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_GetRequiredTypeAlternativesWhenAddingType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetRequiredTypeAlternativesWhenAddingType" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_GetRequiredTypeAlternativesWhenAddingType" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (std::vector< absl::flat_hash_set< int > > *) &((operations_research::RoutingModel const *)arg1)->GetRequiredTypeAlternativesWhenAddingType(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_absl__flat_hash_setT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetRequiredTypeAlternativesWhenRemovingType(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< absl::flat_hash_set< int > > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_GetRequiredTypeAlternativesWhenRemovingType",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetRequiredTypeAlternativesWhenRemovingType" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_GetRequiredTypeAlternativesWhenRemovingType" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (std::vector< absl::flat_hash_set< int > > *) &((operations_research::RoutingModel const *)arg1)->GetRequiredTypeAlternativesWhenRemovingType(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__vectorT_absl__flat_hash_setT_int_t_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_HasSameVehicleTypeRequirements(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_HasSameVehicleTypeRequirements",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_HasSameVehicleTypeRequirements" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (bool)((operations_research::RoutingModel const *)arg1)->HasSameVehicleTypeRequirements(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_HasTemporalTypeRequirements(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_HasTemporalTypeRequirements",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_HasTemporalTypeRequirements" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (bool)((operations_research::RoutingModel const *)arg1)->HasTemporalTypeRequirements(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_HasTypeRegulations(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_HasTypeRegulations",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_HasTypeRegulations" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (bool)((operations_research::RoutingModel const *)arg1)->HasTypeRegulations(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_UnperformedPenalty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_UnperformedPenalty",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_UnperformedPenalty" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_UnperformedPenalty" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (int64_t)((operations_research::RoutingModel const *)arg1)->UnperformedPenalty(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_UnperformedPenaltyOrValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_UnperformedPenaltyOrValue",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_UnperformedPenaltyOrValue" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_UnperformedPenaltyOrValue" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_UnperformedPenaltyOrValue" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (int64_t)((operations_research::RoutingModel const *)arg1)->UnperformedPenaltyOrValue(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetDepot(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_GetDepot",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetDepot" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (int64_t)((operations_research::RoutingModel const *)arg1)->GetDepot(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_SetMaximumNumberOfActiveVehicles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_SetMaximumNumberOfActiveVehicles",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_SetMaximumNumberOfActiveVehicles" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_SetMaximumNumberOfActiveVehicles" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->SetMaximumNumberOfActiveVehicles(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetMaximumNumberOfActiveVehicles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_GetMaximumNumberOfActiveVehicles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetMaximumNumberOfActiveVehicles" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (int)((operations_research::RoutingModel const *)arg1)->GetMaximumNumberOfActiveVehicles(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_SetArcCostEvaluatorOfAllVehicles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_SetArcCostEvaluatorOfAllVehicles",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_SetArcCostEvaluatorOfAllVehicles" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_SetArcCostEvaluatorOfAllVehicles" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      (arg1)->SetArcCostEvaluatorOfAllVehicles(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_SetArcCostEvaluatorOfVehicle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_SetArcCostEvaluatorOfVehicle",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_SetArcCostEvaluatorOfVehicle" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_SetArcCostEvaluatorOfVehicle" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_SetArcCostEvaluatorOfVehicle" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->SetArcCostEvaluatorOfVehicle(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_SetFixedCostOfAllVehicles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_SetFixedCostOfAllVehicles",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_SetFixedCostOfAllVehicles" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_SetFixedCostOfAllVehicles" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      (arg1)->SetFixedCostOfAllVehicles(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_SetFixedCostOfVehicle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64_t arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_SetFixedCostOfVehicle",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_SetFixedCostOfVehicle" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_SetFixedCostOfVehicle" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_SetFixedCostOfVehicle" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->SetFixedCostOfVehicle(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetFixedCostOfVehicle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_GetFixedCostOfVehicle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetFixedCostOfVehicle" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_GetFixedCostOfVehicle" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int64_t)((operations_research::RoutingModel const *)arg1)->GetFixedCostOfVehicle(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_SetPathEnergyCostOfVehicle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t arg4 ;
  int arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  int res3 = SWIG_OLDOBJ ;
  long val4 ;
  int ecode4 = 0 ;
  int val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:RoutingModel_SetPathEnergyCostOfVehicle",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_SetPathEnergyCostOfVehicle" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_SetPathEnergyCostOfVehicle" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_SetPathEnergyCostOfVehicle" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RoutingModel_SetPathEnergyCostOfVehicle" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_SetPathEnergyCostOfVehicle" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RoutingModel_SetPathEnergyCostOfVehicle" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  ecode5 = SWIG_AsVal_int(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RoutingModel_SetPathEnergyCostOfVehicle" "', argument " "5"" of type '" "int""'");
  } 
  arg5 = static_cast< int >(val5);
  {
    try {
      (arg1)->SetPathEnergyCostOfVehicle((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_SetAmortizedCostFactorsOfAllVehicles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_SetAmortizedCostFactorsOfAllVehicles",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_SetAmortizedCostFactorsOfAllVehicles" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_SetAmortizedCostFactorsOfAllVehicles" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_SetAmortizedCostFactorsOfAllVehicles" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      (arg1)->SetAmortizedCostFactorsOfAllVehicles(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_SetAmortizedCostFactorsOfVehicle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RoutingModel_SetAmortizedCostFactorsOfVehicle",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_SetAmortizedCostFactorsOfVehicle" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_SetAmortizedCostFactorsOfVehicle" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_SetAmortizedCostFactorsOfVehicle" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RoutingModel_SetAmortizedCostFactorsOfVehicle" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      (arg1)->SetAmortizedCostFactorsOfVehicle(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetAmortizedLinearCostFactorOfVehicles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int64_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_GetAmortizedLinearCostFactorOfVehicles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetAmortizedLinearCostFactorOfVehicles" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (std::vector< int64_t > *) &((operations_research::RoutingModel const *)arg1)->GetAmortizedLinearCostFactorOfVehicles(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    resultobj = vector_output_helper(result, &PyLong_FromLongLong);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetAmortizedQuadraticCostFactorOfVehicles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::vector< int64_t > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_GetAmortizedQuadraticCostFactorOfVehicles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetAmortizedQuadraticCostFactorOfVehicles" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (std::vector< int64_t > *) &((operations_research::RoutingModel const *)arg1)->GetAmortizedQuadraticCostFactorOfVehicles(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    resultobj = vector_output_helper(result, &PyLong_FromLongLong);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_SetVehicleUsedWhenEmpty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  bool arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_SetVehicleUsedWhenEmpty",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_SetVehicleUsedWhenEmpty" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_SetVehicleUsedWhenEmpty" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_SetVehicleUsedWhenEmpty" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->SetVehicleUsedWhenEmpty(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_IsVehicleUsedWhenEmpty(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_IsVehicleUsedWhenEmpty",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_IsVehicleUsedWhenEmpty" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_IsVehicleUsedWhenEmpty" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (bool)((operations_research::RoutingModel const *)arg1)->IsVehicleUsedWhenEmpty(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_SetFirstSolutionEvaluator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::Solver::IndexEvaluator2 arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_SetFirstSolutionEvaluator",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_SetFirstSolutionEvaluator" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    SharedPyPtr input(obj1);
    arg2 = [input](int64_t i, int64_t j) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "LL", i, j);
    };
  }
  {
    try {
      (arg1)->SetFirstSolutionEvaluator(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddLocalSearchOperator(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::LocalSearchOperator *arg2 = (operations_research::LocalSearchOperator *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_AddLocalSearchOperator",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AddLocalSearchOperator" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->AddLocalSearchOperator(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddSearchMonitor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::SearchMonitor *arg2 = (operations_research::SearchMonitor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_AddSearchMonitor",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AddSearchMonitor" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->AddSearchMonitor(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddAtSolutionCallback__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::function< void () > arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_AddAtSolutionCallback",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AddAtSolutionCallback" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    SharedPyPtr input(obj1);
    arg2 = [input]() {
      return InvokePythonCallableReturning<void>(input.get()); 
    };
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_AddAtSolutionCallback" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      (arg1)->AddAtSolutionCallback(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddAtSolutionCallback__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::function< void () > arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_AddAtSolutionCallback",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AddAtSolutionCallback" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    SharedPyPtr input(obj1);
    arg2 = [input]() {
      return InvokePythonCallableReturning<void>(input.get()); 
    };
  }
  {
    try {
      (arg1)->AddAtSolutionCallback(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddAtSolutionCallback(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__RoutingModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]);
      }
      if (_v) {
        return _wrap_RoutingModel_AddAtSolutionCallback__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__RoutingModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        _v = PyCallable_Check(argv[1]);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RoutingModel_AddAtSolutionCallback__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RoutingModel_AddAtSolutionCallback'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::RoutingModel::AddAtSolutionCallback(std::function< void () >,bool)\n"
    "    operations_research::RoutingModel::AddAtSolutionCallback(std::function< void () >)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddVariableMinimizedByFinalizer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_AddVariableMinimizedByFinalizer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AddVariableMinimizedByFinalizer" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->AddVariableMinimizedByFinalizer(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddVariableMaximizedByFinalizer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_AddVariableMaximizedByFinalizer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AddVariableMaximizedByFinalizer" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->AddVariableMaximizedByFinalizer(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddWeightedVariableMinimizedByFinalizer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_AddWeightedVariableMinimizedByFinalizer",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AddWeightedVariableMinimizedByFinalizer" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_AddWeightedVariableMinimizedByFinalizer" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      (arg1)->AddWeightedVariableMinimizedByFinalizer(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddWeightedVariableMaximizedByFinalizer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_AddWeightedVariableMaximizedByFinalizer",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AddWeightedVariableMaximizedByFinalizer" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_AddWeightedVariableMaximizedByFinalizer" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      (arg1)->AddWeightedVariableMaximizedByFinalizer(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddVariableTargetToFinalizer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_AddVariableTargetToFinalizer",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AddVariableTargetToFinalizer" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_AddVariableTargetToFinalizer" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      (arg1)->AddVariableTargetToFinalizer(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddWeightedVariableTargetToFinalizer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  int64_t arg3 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RoutingModel_AddWeightedVariableTargetToFinalizer",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AddWeightedVariableTargetToFinalizer" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_AddWeightedVariableTargetToFinalizer" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RoutingModel_AddWeightedVariableTargetToFinalizer" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      (arg1)->AddWeightedVariableTargetToFinalizer(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_CloseModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_CloseModel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_CloseModel" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      (arg1)->CloseModel(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_CloseModelWithParameters(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingSearchParameters *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_CloseModelWithParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_CloseModelWithParameters" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    arg2 = new operations_research::RoutingSearchParameters;
    PyObject* const pyresult = PyObject_CallMethod(
      obj1, const_cast<char*>("SerializeToString"), nullptr);
    if (pyresult != nullptr) {
      char* buffer = nullptr;
      Py_ssize_t length = 0;
      int result = PyString_AsStringAndSize(pyresult, &buffer, &length);
      if (buffer != nullptr) {
        arg2->ParseFromArray(buffer, length);
      }
      Py_DECREF(pyresult);
    }
  }
  {
    try {
      (arg1)->CloseModelWithParameters((operations_research::RoutingSearchParameters const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  {
    delete arg2;
  }
  return resultobj;
fail:
  {
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_Solve__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::Assignment *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_Solve",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_Solve" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_Solve" "', argument " "2"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  {
    try {
      result = (operations_research::Assignment *)(arg1)->Solve((operations_research::Assignment const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_Solve__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::Assignment *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_Solve",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_Solve" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (operations_research::Assignment *)(arg1)->Solve(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_Solve(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__RoutingModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_RoutingModel_Solve__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__RoutingModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RoutingModel_Solve__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RoutingModel_Solve'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::RoutingModel::Solve(operations_research::Assignment const *)\n"
    "    operations_research::RoutingModel::Solve()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RoutingModel_SolveWithParameters__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingSearchParameters *arg2 = 0 ;
  std::vector< operations_research::Assignment const * > *arg3 = (std::vector< operations_research::Assignment const * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Assignment *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_SolveWithParameters",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_SolveWithParameters" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    arg2 = new operations_research::RoutingSearchParameters;
    PyObject* const pyresult = PyObject_CallMethod(
      obj1, const_cast<char*>("SerializeToString"), nullptr);
    if (pyresult != nullptr) {
      char* buffer = nullptr;
      Py_ssize_t length = 0;
      int result = PyString_AsStringAndSize(pyresult, &buffer, &length);
      if (buffer != nullptr) {
        arg2->ParseFromArray(buffer, length);
      }
      Py_DECREF(pyresult);
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_std__vectorT_operations_research__Assignment_const_p_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RoutingModel_SolveWithParameters" "', argument " "3"" of type '" "std::vector< operations_research::Assignment const * > *""'"); 
  }
  arg3 = reinterpret_cast< std::vector< operations_research::Assignment const * > * >(argp3);
  {
    try {
      result = (operations_research::Assignment *)(arg1)->SolveWithParameters((operations_research::RoutingSearchParameters const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  {
    delete arg2;
  }
  return resultobj;
fail:
  {
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_SolveWithParameters__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingSearchParameters *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::Assignment *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_SolveWithParameters",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_SolveWithParameters" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    arg2 = new operations_research::RoutingSearchParameters;
    PyObject* const pyresult = PyObject_CallMethod(
      obj1, const_cast<char*>("SerializeToString"), nullptr);
    if (pyresult != nullptr) {
      char* buffer = nullptr;
      Py_ssize_t length = 0;
      int result = PyString_AsStringAndSize(pyresult, &buffer, &length);
      if (buffer != nullptr) {
        arg2->ParseFromArray(buffer, length);
      }
      Py_DECREF(pyresult);
    }
  }
  {
    try {
      result = (operations_research::Assignment *)(arg1)->SolveWithParameters((operations_research::RoutingSearchParameters const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  {
    delete arg2;
  }
  return resultobj;
fail:
  {
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_SolveWithParameters(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[4] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 3) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__RoutingModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        bool ok = false;
        PyObject* const module = PyImport_ImportModule("ortools.constraint_solver.routing_parameters_pb2");
        if (module != nullptr) {
          PyObject* const dict = PyModule_GetDict(module);
          if (dict != nullptr) {
            PyObject* const clss = PyDict_GetItemString(dict, "RoutingSearchParameters");
            if (clss != nullptr) {
              if (PyObject_IsInstance(argv[1], clss)) {
                ok = true;
              }
            }
          }
          Py_DECREF(module);
        }
        _v = ok ? 1 : 0;
      }
      if (_v) {
        return _wrap_RoutingModel_SolveWithParameters__SWIG_1(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__RoutingModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        bool ok = false;
        PyObject* const module = PyImport_ImportModule("ortools.constraint_solver.routing_parameters_pb2");
        if (module != nullptr) {
          PyObject* const dict = PyModule_GetDict(module);
          if (dict != nullptr) {
            PyObject* const clss = PyDict_GetItemString(dict, "RoutingSearchParameters");
            if (clss != nullptr) {
              if (PyObject_IsInstance(argv[1], clss)) {
                ok = true;
              }
            }
          }
          Py_DECREF(module);
        }
        _v = ok ? 1 : 0;
      }
      if (_v) {
        void *vptr = 0;
        int res = SWIG_ConvertPtr(argv[2], &vptr, SWIGTYPE_p_std__vectorT_operations_research__Assignment_const_p_t, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RoutingModel_SolveWithParameters__SWIG_0(self, args);
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RoutingModel_SolveWithParameters'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::RoutingModel::SolveWithParameters(operations_research::RoutingSearchParameters const &,std::vector< operations_research::Assignment const * > *)\n"
    "    operations_research::RoutingModel::SolveWithParameters(operations_research::RoutingSearchParameters const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RoutingModel_SolveFromAssignmentWithParameters__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  operations_research::RoutingSearchParameters *arg3 = 0 ;
  std::vector< operations_research::Assignment const * > *arg4 = (std::vector< operations_research::Assignment const * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Assignment *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RoutingModel_SolveFromAssignmentWithParameters",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_SolveFromAssignmentWithParameters" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_SolveFromAssignmentWithParameters" "', argument " "2"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  {
    arg3 = new operations_research::RoutingSearchParameters;
    PyObject* const pyresult = PyObject_CallMethod(
      obj2, const_cast<char*>("SerializeToString"), nullptr);
    if (pyresult != nullptr) {
      char* buffer = nullptr;
      Py_ssize_t length = 0;
      int result = PyString_AsStringAndSize(pyresult, &buffer, &length);
      if (buffer != nullptr) {
        arg3->ParseFromArray(buffer, length);
      }
      Py_DECREF(pyresult);
    }
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_std__vectorT_operations_research__Assignment_const_p_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RoutingModel_SolveFromAssignmentWithParameters" "', argument " "4"" of type '" "std::vector< operations_research::Assignment const * > *""'"); 
  }
  arg4 = reinterpret_cast< std::vector< operations_research::Assignment const * > * >(argp4);
  {
    try {
      result = (operations_research::Assignment *)(arg1)->SolveFromAssignmentWithParameters((operations_research::Assignment const *)arg2,(operations_research::RoutingSearchParameters const &)*arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  {
    delete arg3;
  }
  return resultobj;
fail:
  {
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_SolveFromAssignmentWithParameters__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  operations_research::RoutingSearchParameters *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Assignment *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_SolveFromAssignmentWithParameters",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_SolveFromAssignmentWithParameters" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_SolveFromAssignmentWithParameters" "', argument " "2"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  {
    arg3 = new operations_research::RoutingSearchParameters;
    PyObject* const pyresult = PyObject_CallMethod(
      obj2, const_cast<char*>("SerializeToString"), nullptr);
    if (pyresult != nullptr) {
      char* buffer = nullptr;
      Py_ssize_t length = 0;
      int result = PyString_AsStringAndSize(pyresult, &buffer, &length);
      if (buffer != nullptr) {
        arg3->ParseFromArray(buffer, length);
      }
      Py_DECREF(pyresult);
    }
  }
  {
    try {
      result = (operations_research::Assignment *)(arg1)->SolveFromAssignmentWithParameters((operations_research::Assignment const *)arg2,(operations_research::RoutingSearchParameters const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  {
    delete arg3;
  }
  return resultobj;
fail:
  {
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_SolveFromAssignmentWithParameters(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__RoutingModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          bool ok = false;
          PyObject* const module = PyImport_ImportModule("ortools.constraint_solver.routing_parameters_pb2");
          if (module != nullptr) {
            PyObject* const dict = PyModule_GetDict(module);
            if (dict != nullptr) {
              PyObject* const clss = PyDict_GetItemString(dict, "RoutingSearchParameters");
              if (clss != nullptr) {
                if (PyObject_IsInstance(argv[2], clss)) {
                  ok = true;
                }
              }
            }
            Py_DECREF(module);
          }
          _v = ok ? 1 : 0;
        }
        if (_v) {
          return _wrap_RoutingModel_SolveFromAssignmentWithParameters__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__RoutingModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          bool ok = false;
          PyObject* const module = PyImport_ImportModule("ortools.constraint_solver.routing_parameters_pb2");
          if (module != nullptr) {
            PyObject* const dict = PyModule_GetDict(module);
            if (dict != nullptr) {
              PyObject* const clss = PyDict_GetItemString(dict, "RoutingSearchParameters");
              if (clss != nullptr) {
                if (PyObject_IsInstance(argv[2], clss)) {
                  ok = true;
                }
              }
            }
            Py_DECREF(module);
          }
          _v = ok ? 1 : 0;
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_operations_research__Assignment_const_p_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_RoutingModel_SolveFromAssignmentWithParameters__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RoutingModel_SolveFromAssignmentWithParameters'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::RoutingModel::SolveFromAssignmentWithParameters(operations_research::Assignment const *,operations_research::RoutingSearchParameters const &,std::vector< operations_research::Assignment const * > *)\n"
    "    operations_research::RoutingModel::SolveFromAssignmentWithParameters(operations_research::Assignment const *,operations_research::RoutingSearchParameters const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RoutingModel_SolveFromAssignmentsWithParameters__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< operations_research::Assignment const * > *arg2 = 0 ;
  operations_research::RoutingSearchParameters *arg3 = 0 ;
  std::vector< operations_research::Assignment const * > *arg4 = (std::vector< operations_research::Assignment const * > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Assignment *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RoutingModel_SolveFromAssignmentsWithParameters",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_SolveFromAssignmentsWithParameters" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_operations_research__Assignment_const_p_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_SolveFromAssignmentsWithParameters" "', argument " "2"" of type '" "std::vector< operations_research::Assignment const * > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_SolveFromAssignmentsWithParameters" "', argument " "2"" of type '" "std::vector< operations_research::Assignment const * > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< operations_research::Assignment const * > * >(argp2);
  {
    arg3 = new operations_research::RoutingSearchParameters;
    PyObject* const pyresult = PyObject_CallMethod(
      obj2, const_cast<char*>("SerializeToString"), nullptr);
    if (pyresult != nullptr) {
      char* buffer = nullptr;
      Py_ssize_t length = 0;
      int result = PyString_AsStringAndSize(pyresult, &buffer, &length);
      if (buffer != nullptr) {
        arg3->ParseFromArray(buffer, length);
      }
      Py_DECREF(pyresult);
    }
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_std__vectorT_operations_research__Assignment_const_p_t, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RoutingModel_SolveFromAssignmentsWithParameters" "', argument " "4"" of type '" "std::vector< operations_research::Assignment const * > *""'"); 
  }
  arg4 = reinterpret_cast< std::vector< operations_research::Assignment const * > * >(argp4);
  {
    try {
      result = (operations_research::Assignment *)(arg1)->SolveFromAssignmentsWithParameters((std::vector< operations_research::Assignment const * > const &)*arg2,(operations_research::RoutingSearchParameters const &)*arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  {
    delete arg3;
  }
  return resultobj;
fail:
  {
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_SolveFromAssignmentsWithParameters__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< operations_research::Assignment const * > *arg2 = 0 ;
  operations_research::RoutingSearchParameters *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Assignment *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_SolveFromAssignmentsWithParameters",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_SolveFromAssignmentsWithParameters" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_std__vectorT_operations_research__Assignment_const_p_t,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_SolveFromAssignmentsWithParameters" "', argument " "2"" of type '" "std::vector< operations_research::Assignment const * > const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_SolveFromAssignmentsWithParameters" "', argument " "2"" of type '" "std::vector< operations_research::Assignment const * > const &""'"); 
  }
  arg2 = reinterpret_cast< std::vector< operations_research::Assignment const * > * >(argp2);
  {
    arg3 = new operations_research::RoutingSearchParameters;
    PyObject* const pyresult = PyObject_CallMethod(
      obj2, const_cast<char*>("SerializeToString"), nullptr);
    if (pyresult != nullptr) {
      char* buffer = nullptr;
      Py_ssize_t length = 0;
      int result = PyString_AsStringAndSize(pyresult, &buffer, &length);
      if (buffer != nullptr) {
        arg3->ParseFromArray(buffer, length);
      }
      Py_DECREF(pyresult);
    }
  }
  {
    try {
      result = (operations_research::Assignment *)(arg1)->SolveFromAssignmentsWithParameters((std::vector< operations_research::Assignment const * > const &)*arg2,(operations_research::RoutingSearchParameters const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  {
    delete arg3;
  }
  return resultobj;
fail:
  {
    delete arg3;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_SolveFromAssignmentsWithParameters(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__RoutingModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_operations_research__Assignment_const_p_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          bool ok = false;
          PyObject* const module = PyImport_ImportModule("ortools.constraint_solver.routing_parameters_pb2");
          if (module != nullptr) {
            PyObject* const dict = PyModule_GetDict(module);
            if (dict != nullptr) {
              PyObject* const clss = PyDict_GetItemString(dict, "RoutingSearchParameters");
              if (clss != nullptr) {
                if (PyObject_IsInstance(argv[2], clss)) {
                  ok = true;
                }
              }
            }
            Py_DECREF(module);
          }
          _v = ok ? 1 : 0;
        }
        if (_v) {
          return _wrap_RoutingModel_SolveFromAssignmentsWithParameters__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__RoutingModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_std__vectorT_operations_research__Assignment_const_p_t, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        {
          bool ok = false;
          PyObject* const module = PyImport_ImportModule("ortools.constraint_solver.routing_parameters_pb2");
          if (module != nullptr) {
            PyObject* const dict = PyModule_GetDict(module);
            if (dict != nullptr) {
              PyObject* const clss = PyDict_GetItemString(dict, "RoutingSearchParameters");
              if (clss != nullptr) {
                if (PyObject_IsInstance(argv[2], clss)) {
                  ok = true;
                }
              }
            }
            Py_DECREF(module);
          }
          _v = ok ? 1 : 0;
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_std__vectorT_operations_research__Assignment_const_p_t, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_RoutingModel_SolveFromAssignmentsWithParameters__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RoutingModel_SolveFromAssignmentsWithParameters'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::RoutingModel::SolveFromAssignmentsWithParameters(std::vector< operations_research::Assignment const * > const &,operations_research::RoutingSearchParameters const &,std::vector< operations_research::Assignment const * > *)\n"
    "    operations_research::RoutingModel::SolveFromAssignmentsWithParameters(std::vector< operations_research::Assignment const * > const &,operations_research::RoutingSearchParameters const &)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RoutingModel_SetAssignmentFromOtherModelAssignment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  operations_research::RoutingModel *arg3 = (operations_research::RoutingModel *) 0 ;
  operations_research::Assignment *arg4 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RoutingModel_SetAssignmentFromOtherModelAssignment",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_SetAssignmentFromOtherModelAssignment" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_SetAssignmentFromOtherModelAssignment" "', argument " "2"" of type '" "operations_research::Assignment *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RoutingModel_SetAssignmentFromOtherModelAssignment" "', argument " "3"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg3 = reinterpret_cast< operations_research::RoutingModel * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RoutingModel_SetAssignmentFromOtherModelAssignment" "', argument " "4"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg4 = reinterpret_cast< operations_research::Assignment * >(argp4);
  {
    try {
      (arg1)->SetAssignmentFromOtherModelAssignment(arg2,(operations_research::RoutingModel const *)arg3,(operations_research::Assignment const *)arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_ComputeLowerBound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_ComputeLowerBound",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_ComputeLowerBound" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (int64_t)(arg1)->ComputeLowerBound(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_objective_lower_bound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_objective_lower_bound",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_objective_lower_bound" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (int64_t)((operations_research::RoutingModel const *)arg1)->objective_lower_bound(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_status(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::RoutingModel::Status result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_status",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_status" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (operations_research::RoutingModel::Status)((operations_research::RoutingModel const *)arg1)->status(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_enable_deep_serialization(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_enable_deep_serialization",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_enable_deep_serialization" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (bool)((operations_research::RoutingModel const *)arg1)->enable_deep_serialization(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_ApplyLocks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< int64_t > *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< int64_t > temp2 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_ApplyLocks",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_ApplyLocks" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg2 = &temp2;
  }
  {
    try {
      result = (operations_research::IntVar *)(arg1)->ApplyLocks((std::vector< int64_t > const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_ApplyLocksToAllVehicles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< std::vector< int64_t > > *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::vector< int64_t > > temp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_ApplyLocksToAllVehicles",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_ApplyLocksToAllVehicles" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    if (!PyList_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expecting a list of tuples");
      SWIG_fail;
    }
    int len = PyList_Size(obj1);
    int arity = -1;
    if (len > 0) {
      temp2.resize(len);
      for (size_t i = 0; i < len; ++i) {
        PyObject *tuple = PyList_GetItem(obj1, i);
        if (!PyTuple_Check(tuple) && !PyList_Check(tuple)) {
          PyErr_SetString(PyExc_TypeError, "Expecting a sequence");
          SWIG_fail;
        }
        bool is_tuple = PyTuple_Check(tuple);
        int arity = is_tuple ? PyTuple_Size(tuple) : PyList_Size(tuple);
        temp2[i].resize(arity);
        for (size_t j = 0; j < arity; ++j) {
          bool success = PyObjAs<int64_t>(
            is_tuple ? PyTuple_GetItem(tuple, j) : PyList_GetItem(tuple, j),
            &temp2[i][j]);
          if (!success) {
            SWIG_fail;
          }
        }
      }
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_ApplyLocksToAllVehicles" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (bool)(arg1)->ApplyLocksToAllVehicles((std::vector< std::vector< int64_t > > const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_PreAssignment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::Assignment *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_PreAssignment",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_PreAssignment" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (operations_research::Assignment *)((operations_research::RoutingModel const *)arg1)->PreAssignment(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_MutablePreAssignment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::Assignment *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_MutablePreAssignment",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_MutablePreAssignment" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (operations_research::Assignment *)(arg1)->MutablePreAssignment(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_WriteAssignment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_WriteAssignment",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_WriteAssignment" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_WriteAssignment" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_WriteAssignment" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (bool)((operations_research::RoutingModel const *)arg1)->WriteAssignment((std::string const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_ReadAssignment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::string *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int res2 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::Assignment *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_ReadAssignment",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_ReadAssignment" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    std::string *ptr = (std::string *)0;
    res2 = SWIG_AsPtr_std_string(obj1, &ptr);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_ReadAssignment" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_ReadAssignment" "', argument " "2"" of type '" "std::string const &""'"); 
    }
    arg2 = ptr;
  }
  {
    try {
      result = (operations_research::Assignment *)(arg1)->ReadAssignment((std::string const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (SWIG_IsNewObj(res2)) delete arg2;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res2)) delete arg2;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_RestoreAssignment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::Assignment *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::Assignment *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_RestoreAssignment",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_RestoreAssignment" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__Assignment,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_RestoreAssignment" "', argument " "2"" of type '" "operations_research::Assignment const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_RestoreAssignment" "', argument " "2"" of type '" "operations_research::Assignment const &""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  {
    try {
      result = (operations_research::Assignment *)(arg1)->RestoreAssignment((operations_research::Assignment const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_ReadAssignmentFromRoutes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< std::vector< int64_t > > *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::vector< int64_t > > temp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Assignment *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_ReadAssignmentFromRoutes",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_ReadAssignmentFromRoutes" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    if (!PyList_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expecting a list of tuples");
      SWIG_fail;
    }
    int len = PyList_Size(obj1);
    int arity = -1;
    if (len > 0) {
      temp2.resize(len);
      for (size_t i = 0; i < len; ++i) {
        PyObject *tuple = PyList_GetItem(obj1, i);
        if (!PyTuple_Check(tuple) && !PyList_Check(tuple)) {
          PyErr_SetString(PyExc_TypeError, "Expecting a sequence");
          SWIG_fail;
        }
        bool is_tuple = PyTuple_Check(tuple);
        int arity = is_tuple ? PyTuple_Size(tuple) : PyList_Size(tuple);
        temp2[i].resize(arity);
        for (size_t j = 0; j < arity; ++j) {
          bool success = PyObjAs<int64_t>(
            is_tuple ? PyTuple_GetItem(tuple, j) : PyList_GetItem(tuple, j),
            &temp2[i][j]);
          if (!success) {
            SWIG_fail;
          }
        }
      }
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_ReadAssignmentFromRoutes" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (operations_research::Assignment *)(arg1)->ReadAssignmentFromRoutes((std::vector< std::vector< int64_t > > const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_RoutesToAssignment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  std::vector< std::vector< int64_t > > *arg2 = 0 ;
  bool arg3 ;
  bool arg4 ;
  operations_research::Assignment *arg5 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< std::vector< int64_t > > temp2 ;
  bool val3 ;
  int ecode3 = 0 ;
  bool val4 ;
  int ecode4 = 0 ;
  void *argp5 = 0 ;
  int res5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:RoutingModel_RoutesToAssignment",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_RoutesToAssignment" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    if (!PyList_Check(obj1)) {
      PyErr_SetString(PyExc_TypeError, "Expecting a list of tuples");
      SWIG_fail;
    }
    int len = PyList_Size(obj1);
    int arity = -1;
    if (len > 0) {
      temp2.resize(len);
      for (size_t i = 0; i < len; ++i) {
        PyObject *tuple = PyList_GetItem(obj1, i);
        if (!PyTuple_Check(tuple) && !PyList_Check(tuple)) {
          PyErr_SetString(PyExc_TypeError, "Expecting a sequence");
          SWIG_fail;
        }
        bool is_tuple = PyTuple_Check(tuple);
        int arity = is_tuple ? PyTuple_Size(tuple) : PyList_Size(tuple);
        temp2[i].resize(arity);
        for (size_t j = 0; j < arity; ++j) {
          bool success = PyObjAs<int64_t>(
            is_tuple ? PyTuple_GetItem(tuple, j) : PyList_GetItem(tuple, j),
            &temp2[i][j]);
          if (!success) {
            SWIG_fail;
          }
        }
      }
    }
    arg2 = &temp2;
  }
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_RoutesToAssignment" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  ecode4 = SWIG_AsVal_bool(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RoutingModel_RoutesToAssignment" "', argument " "4"" of type '" "bool""'");
  } 
  arg4 = static_cast< bool >(val4);
  res5 = SWIG_ConvertPtr(obj4, &argp5,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res5)) {
    SWIG_exception_fail(SWIG_ArgError(res5), "in method '" "RoutingModel_RoutesToAssignment" "', argument " "5"" of type '" "operations_research::Assignment *""'"); 
  }
  arg5 = reinterpret_cast< operations_research::Assignment * >(argp5);
  {
    try {
      result = (bool)((operations_research::RoutingModel const *)arg1)->RoutesToAssignment((std::vector< std::vector< int64_t > > const &)*arg2,arg3,arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AssignmentToRoutes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::Assignment *arg2 = 0 ;
  std::vector< std::vector< int64_t > > *arg3 = (std::vector< std::vector< int64_t > > *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_AssignmentToRoutes",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AssignmentToRoutes" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__Assignment,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_AssignmentToRoutes" "', argument " "2"" of type '" "operations_research::Assignment const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_AssignmentToRoutes" "', argument " "2"" of type '" "operations_research::Assignment const &""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_std__vectorT_std__vectorT_long_t_t, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RoutingModel_AssignmentToRoutes" "', argument " "3"" of type '" "std::vector< std::vector< int64_t > > *""'"); 
  }
  arg3 = reinterpret_cast< std::vector< std::vector< int64_t > > * >(argp3);
  {
    try {
      ((operations_research::RoutingModel const *)arg1)->AssignmentToRoutes((operations_research::Assignment const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_CompactAssignment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::Assignment *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::Assignment *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_CompactAssignment",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_CompactAssignment" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__Assignment,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_CompactAssignment" "', argument " "2"" of type '" "operations_research::Assignment const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_CompactAssignment" "', argument " "2"" of type '" "operations_research::Assignment const &""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  {
    try {
      result = (operations_research::Assignment *)((operations_research::RoutingModel const *)arg1)->CompactAssignment((operations_research::Assignment const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_CompactAndCheckAssignment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::Assignment *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::Assignment *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_CompactAndCheckAssignment",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_CompactAndCheckAssignment" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__Assignment,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_CompactAndCheckAssignment" "', argument " "2"" of type '" "operations_research::Assignment const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_CompactAndCheckAssignment" "', argument " "2"" of type '" "operations_research::Assignment const &""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  {
    try {
      result = (operations_research::Assignment *)((operations_research::RoutingModel const *)arg1)->CompactAndCheckAssignment((operations_research::Assignment const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddToAssignment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::IntVar *arg2 = (operations_research::IntVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_AddToAssignment",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AddToAssignment" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->AddToAssignment(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddIntervalToAssignment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::IntervalVar *arg2 = (operations_research::IntervalVar *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_AddIntervalToAssignment",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AddIntervalToAssignment" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->AddIntervalToAssignment(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_PackCumulsOfOptimizerDimensionsFromAssignment__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  absl::Duration arg3 ;
  bool *arg4 = (bool *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::Assignment *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RoutingModel_PackCumulsOfOptimizerDimensionsFromAssignment",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_PackCumulsOfOptimizerDimensionsFromAssignment" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_PackCumulsOfOptimizerDimensionsFromAssignment" "', argument " "2"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_absl__Duration,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RoutingModel_PackCumulsOfOptimizerDimensionsFromAssignment" "', argument " "3"" of type '" "absl::Duration""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_PackCumulsOfOptimizerDimensionsFromAssignment" "', argument " "3"" of type '" "absl::Duration""'");
    } else {
      absl::Duration * temp = reinterpret_cast< absl::Duration * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_bool, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RoutingModel_PackCumulsOfOptimizerDimensionsFromAssignment" "', argument " "4"" of type '" "bool *""'"); 
  }
  arg4 = reinterpret_cast< bool * >(argp4);
  {
    try {
      result = (operations_research::Assignment *)(arg1)->PackCumulsOfOptimizerDimensionsFromAssignment((operations_research::Assignment const *)arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_PackCumulsOfOptimizerDimensionsFromAssignment__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::Assignment *arg2 = (operations_research::Assignment *) 0 ;
  absl::Duration arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  void *argp3 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::Assignment *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_PackCumulsOfOptimizerDimensionsFromAssignment",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_PackCumulsOfOptimizerDimensionsFromAssignment" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_PackCumulsOfOptimizerDimensionsFromAssignment" "', argument " "2"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  {
    res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_absl__Duration,  0  | 0);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RoutingModel_PackCumulsOfOptimizerDimensionsFromAssignment" "', argument " "3"" of type '" "absl::Duration""'"); 
    }  
    if (!argp3) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_PackCumulsOfOptimizerDimensionsFromAssignment" "', argument " "3"" of type '" "absl::Duration""'");
    } else {
      absl::Duration * temp = reinterpret_cast< absl::Duration * >(argp3);
      arg3 = *temp;
      if (SWIG_IsNewObj(res3)) delete temp;
    }
  }
  {
    try {
      result = (operations_research::Assignment *)(arg1)->PackCumulsOfOptimizerDimensionsFromAssignment((operations_research::Assignment const *)arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_PackCumulsOfOptimizerDimensionsFromAssignment(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[5] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 4) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__RoutingModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_absl__Duration, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          return _wrap_RoutingModel_PackCumulsOfOptimizerDimensionsFromAssignment__SWIG_1(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__RoutingModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      void *vptr = 0;
      int res = SWIG_ConvertPtr(argv[1], &vptr, SWIGTYPE_p_operations_research__Assignment, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        int res = SWIG_ConvertPtr(argv[2], 0, SWIGTYPE_p_absl__Duration, 0);
        _v = SWIG_CheckState(res);
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_bool, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_RoutingModel_PackCumulsOfOptimizerDimensionsFromAssignment__SWIG_0(self, args);
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RoutingModel_PackCumulsOfOptimizerDimensionsFromAssignment'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::RoutingModel::PackCumulsOfOptimizerDimensionsFromAssignment(operations_research::Assignment const *,absl::Duration,bool *)\n"
    "    operations_research::RoutingModel::PackCumulsOfOptimizerDimensionsFromAssignment(operations_research::Assignment const *,absl::Duration)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetOrCreateNodeNeighborsByCostClass__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  double arg2 ;
  int64_t arg3 ;
  double *arg4 = 0 ;
  bool arg5 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  bool val5 ;
  int ecode5 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  PyObject * obj4 = 0 ;
  operations_research::RoutingModel::NodeNeighborsByCostClass *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOOO:RoutingModel_GetOrCreateNodeNeighborsByCostClass",&obj0,&obj1,&obj2,&obj3,&obj4)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetOrCreateNodeNeighborsByCostClass" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_GetOrCreateNodeNeighborsByCostClass" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_GetOrCreateNodeNeighborsByCostClass" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RoutingModel_GetOrCreateNodeNeighborsByCostClass" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_GetOrCreateNodeNeighborsByCostClass" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  ecode5 = SWIG_AsVal_bool(obj4, &val5);
  if (!SWIG_IsOK(ecode5)) {
    SWIG_exception_fail(SWIG_ArgError(ecode5), "in method '" "RoutingModel_GetOrCreateNodeNeighborsByCostClass" "', argument " "5"" of type '" "bool""'");
  } 
  arg5 = static_cast< bool >(val5);
  {
    try {
      result = (operations_research::RoutingModel::NodeNeighborsByCostClass *)(arg1)->GetOrCreateNodeNeighborsByCostClass(arg2,arg3,*arg4,arg5); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__RoutingModel__NodeNeighborsByCostClass, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetOrCreateNodeNeighborsByCostClass__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  double arg2 ;
  int64_t arg3 ;
  double *arg4 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  double val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  operations_research::RoutingModel::NodeNeighborsByCostClass *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RoutingModel_GetOrCreateNodeNeighborsByCostClass",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetOrCreateNodeNeighborsByCostClass" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_double(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_GetOrCreateNodeNeighborsByCostClass" "', argument " "2"" of type '" "double""'");
  } 
  arg2 = static_cast< double >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_GetOrCreateNodeNeighborsByCostClass" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  res4 = SWIG_ConvertPtr(obj3, &argp4, SWIGTYPE_p_double,  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "RoutingModel_GetOrCreateNodeNeighborsByCostClass" "', argument " "4"" of type '" "double &""'"); 
  }
  if (!argp4) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_GetOrCreateNodeNeighborsByCostClass" "', argument " "4"" of type '" "double &""'"); 
  }
  arg4 = reinterpret_cast< double * >(argp4);
  {
    try {
      result = (operations_research::RoutingModel::NodeNeighborsByCostClass *)(arg1)->GetOrCreateNodeNeighborsByCostClass(arg2,arg3,*arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__RoutingModel__NodeNeighborsByCostClass, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetOrCreateNodeNeighborsByCostClass__SWIG_2(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::RoutingModel::NodeNeighborsByCostClass *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_GetOrCreateNodeNeighborsByCostClass",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetOrCreateNodeNeighborsByCostClass" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_GetOrCreateNodeNeighborsByCostClass" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_GetOrCreateNodeNeighborsByCostClass" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (operations_research::RoutingModel::NodeNeighborsByCostClass *)(arg1)->GetOrCreateNodeNeighborsByCostClass(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__RoutingModel__NodeNeighborsByCostClass, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetOrCreateNodeNeighborsByCostClass__SWIG_3(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::RoutingModel::NodeNeighborsByCostClass *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_GetOrCreateNodeNeighborsByCostClass",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetOrCreateNodeNeighborsByCostClass" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_GetOrCreateNodeNeighborsByCostClass" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (operations_research::RoutingModel::NodeNeighborsByCostClass *)(arg1)->GetOrCreateNodeNeighborsByCostClass(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__RoutingModel__NodeNeighborsByCostClass, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetOrCreateNodeNeighborsByCostClass(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[6] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 5) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__RoutingModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_RoutingModel_GetOrCreateNodeNeighborsByCostClass__SWIG_3(self, args);
      }
    }
  }
  if (argc == 3) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__RoutingModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_int(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_bool(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          return _wrap_RoutingModel_GetOrCreateNodeNeighborsByCostClass__SWIG_2(self, args);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__RoutingModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            return _wrap_RoutingModel_GetOrCreateNodeNeighborsByCostClass__SWIG_1(self, args);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__RoutingModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      {
        int res = SWIG_AsVal_double(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        {
          int res = SWIG_AsVal_long(argv[2], NULL);
          _v = SWIG_CheckState(res);
        }
        if (_v) {
          void *vptr = 0;
          int res = SWIG_ConvertPtr(argv[3], &vptr, SWIGTYPE_p_double, 0);
          _v = SWIG_CheckState(res);
          if (_v) {
            {
              int res = SWIG_AsVal_bool(argv[4], NULL);
              _v = SWIG_CheckState(res);
            }
            if (_v) {
              return _wrap_RoutingModel_GetOrCreateNodeNeighborsByCostClass__SWIG_0(self, args);
            }
          }
        }
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RoutingModel_GetOrCreateNodeNeighborsByCostClass'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::RoutingModel::GetOrCreateNodeNeighborsByCostClass(double,int64_t,double &,bool)\n"
    "    operations_research::RoutingModel::GetOrCreateNodeNeighborsByCostClass(double,int64_t,double &)\n"
    "    operations_research::RoutingModel::GetOrCreateNodeNeighborsByCostClass(int,bool)\n"
    "    operations_research::RoutingModel::GetOrCreateNodeNeighborsByCostClass(int)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AddLocalSearchFilter(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::LocalSearchFilter *arg2 = (operations_research::LocalSearchFilter *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_AddLocalSearchFilter",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AddLocalSearchFilter" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    if (!PyObjAs(obj1, &arg2)) SWIG_fail;
  }
  {
    try {
      (arg1)->AddLocalSearchFilter(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_Start(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_Start",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_Start" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_Start" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int64_t)((operations_research::RoutingModel const *)arg1)->Start(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_End(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_End",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_End" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_End" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int64_t)((operations_research::RoutingModel const *)arg1)->End(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_IsStart(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_IsStart",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_IsStart" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_IsStart" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (bool)((operations_research::RoutingModel const *)arg1)->IsStart(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_IsEnd(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_IsEnd",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_IsEnd" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_IsEnd" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (bool)((operations_research::RoutingModel const *)arg1)->IsEnd(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_VehicleIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_VehicleIndex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_VehicleIndex" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_VehicleIndex" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (int)((operations_research::RoutingModel const *)arg1)->VehicleIndex(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_Next(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::Assignment *arg2 = 0 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_Next",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_Next" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__Assignment,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_Next" "', argument " "2"" of type '" "operations_research::Assignment const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_Next" "', argument " "2"" of type '" "operations_research::Assignment const &""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_Next" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (int64_t)((operations_research::RoutingModel const *)arg1)->Next((operations_research::Assignment const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_IsVehicleUsed(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::Assignment *arg2 = 0 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_IsVehicleUsed",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_IsVehicleUsed" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__Assignment,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_IsVehicleUsed" "', argument " "2"" of type '" "operations_research::Assignment const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_IsVehicleUsed" "', argument " "2"" of type '" "operations_research::Assignment const &""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_IsVehicleUsed" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (bool)((operations_research::RoutingModel const *)arg1)->IsVehicleUsed((operations_research::Assignment const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_NextVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_NextVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_NextVar" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_NextVar" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::IntVar *)((operations_research::RoutingModel const *)arg1)->NextVar(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_ActiveVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_ActiveVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_ActiveVar" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_ActiveVar" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::IntVar *)((operations_research::RoutingModel const *)arg1)->ActiveVar(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_ActiveVehicleVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_ActiveVehicleVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_ActiveVehicleVar" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_ActiveVehicleVar" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (operations_research::IntVar *)((operations_research::RoutingModel const *)arg1)->ActiveVehicleVar(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_VehicleRouteConsideredVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_VehicleRouteConsideredVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_VehicleRouteConsideredVar" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_VehicleRouteConsideredVar" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (operations_research::IntVar *)((operations_research::RoutingModel const *)arg1)->VehicleRouteConsideredVar(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_VehicleVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_VehicleVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_VehicleVar" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_VehicleVar" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::IntVar *)((operations_research::RoutingModel const *)arg1)->VehicleVar(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_ResourceVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_ResourceVar",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_ResourceVar" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_ResourceVar" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_ResourceVar" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      result = (operations_research::IntVar *)((operations_research::RoutingModel const *)arg1)->ResourceVar(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_CostVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_CostVar",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_CostVar" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (operations_research::IntVar *)((operations_research::RoutingModel const *)arg1)->CostVar(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetArcCostForVehicle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RoutingModel_GetArcCostForVehicle",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetArcCostForVehicle" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_GetArcCostForVehicle" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_GetArcCostForVehicle" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RoutingModel_GetArcCostForVehicle" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      result = (int64_t)((operations_research::RoutingModel const *)arg1)->GetArcCostForVehicle(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_CostsAreHomogeneousAcrossVehicles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_CostsAreHomogeneousAcrossVehicles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_CostsAreHomogeneousAcrossVehicles" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (bool)((operations_research::RoutingModel const *)arg1)->CostsAreHomogeneousAcrossVehicles(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetHomogeneousCost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_GetHomogeneousCost",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetHomogeneousCost" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_GetHomogeneousCost" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_GetHomogeneousCost" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (int64_t)((operations_research::RoutingModel const *)arg1)->GetHomogeneousCost(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetArcCostForFirstSolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_GetArcCostForFirstSolution",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetArcCostForFirstSolution" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_GetArcCostForFirstSolution" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_GetArcCostForFirstSolution" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  {
    try {
      result = (int64_t)((operations_research::RoutingModel const *)arg1)->GetArcCostForFirstSolution(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetArcCostForClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RoutingModel_GetArcCostForClass",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetArcCostForClass" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_GetArcCostForClass" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_GetArcCostForClass" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RoutingModel_GetArcCostForClass" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      result = (int64_t)((operations_research::RoutingModel const *)arg1)->GetArcCostForClass(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetCostClassIndexOfVehicle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::RoutingModel::CostClassIndex result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_GetCostClassIndexOfVehicle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetCostClassIndexOfVehicle" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_GetCostClassIndexOfVehicle" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = ((operations_research::RoutingModel const *)arg1)->GetCostClassIndexOfVehicle(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    resultobj = PyInt_FromLong((&result)->value());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_HasVehicleWithCostClassIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingModel::CostClassIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_HasVehicleWithCostClassIndex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_HasVehicleWithCostClassIndex" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    arg2 = operations_research::RoutingCostClassIndex(PyInt_AsLong(obj1));
  }
  {
    try {
      result = (bool)((operations_research::RoutingModel const *)arg1)->HasVehicleWithCostClassIndex(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetCostClassesCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_GetCostClassesCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetCostClassesCount" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (int)((operations_research::RoutingModel const *)arg1)->GetCostClassesCount(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetNonZeroCostClassesCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_GetNonZeroCostClassesCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetNonZeroCostClassesCount" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (int)((operations_research::RoutingModel const *)arg1)->GetNonZeroCostClassesCount(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetVehicleClassIndexOfVehicle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::RoutingModel::VehicleClassIndex result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_GetVehicleClassIndexOfVehicle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetVehicleClassIndexOfVehicle" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_GetVehicleClassIndexOfVehicle" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = ((operations_research::RoutingModel const *)arg1)->GetVehicleClassIndexOfVehicle(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    resultobj = PyInt_FromLong((&result)->value());
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetVehicleOfClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingModel::VehicleClassIndex arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_GetVehicleOfClass",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetVehicleOfClass" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    arg2 = operations_research::RoutingVehicleClassIndex(PyInt_AsLong(obj1));
  }
  {
    try {
      result = (int)((operations_research::RoutingModel const *)arg1)->GetVehicleOfClass(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetVehicleClassesCount(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_GetVehicleClassesCount",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetVehicleClassesCount" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (int)((operations_research::RoutingModel const *)arg1)->GetVehicleClassesCount(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetSameVehicleIndicesOfIndex(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  std::vector< int > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_GetSameVehicleIndicesOfIndex",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetSameVehicleIndicesOfIndex" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_GetSameVehicleIndicesOfIndex" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (std::vector< int > *) &((operations_research::RoutingModel const *)arg1)->GetSameVehicleIndicesOfIndex(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  {
    resultobj = vector_output_helper(result, &PyInt_FromLong);
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetVehicleTypeContainer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::RoutingModel::VehicleTypeContainer *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_GetVehicleTypeContainer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetVehicleTypeContainer" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (operations_research::RoutingModel::VehicleTypeContainer *) &((operations_research::RoutingModel const *)arg1)->GetVehicleTypeContainer(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__RoutingModel__VehicleTypeContainer, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_ArcIsMoreConstrainedThanArc(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RoutingModel_ArcIsMoreConstrainedThanArc",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_ArcIsMoreConstrainedThanArc" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingModel_ArcIsMoreConstrainedThanArc" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_ArcIsMoreConstrainedThanArc" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RoutingModel_ArcIsMoreConstrainedThanArc" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      result = (bool)(arg1)->ArcIsMoreConstrainedThanArc(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_DebugOutputAssignment(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::Assignment *arg2 = 0 ;
  std::string *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  int res3 = SWIG_OLDOBJ ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_DebugOutputAssignment",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_DebugOutputAssignment" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__Assignment,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_DebugOutputAssignment" "', argument " "2"" of type '" "operations_research::Assignment const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_DebugOutputAssignment" "', argument " "2"" of type '" "operations_research::Assignment const &""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  {
    std::string *ptr = (std::string *)0;
    res3 = SWIG_AsPtr_std_string(obj2, &ptr);
    if (!SWIG_IsOK(res3)) {
      SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "RoutingModel_DebugOutputAssignment" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    if (!ptr) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_DebugOutputAssignment" "', argument " "3"" of type '" "std::string const &""'"); 
    }
    arg3 = ptr;
  }
  {
    try {
      result = ((operations_research::RoutingModel const *)arg1)->DebugOutputAssignment((operations_research::Assignment const &)*arg2,(std::string const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  if (SWIG_IsNewObj(res3)) delete arg3;
  return resultobj;
fail:
  if (SWIG_IsNewObj(res3)) delete arg3;
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_CheckIfAssignmentIsFeasible(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::Assignment *arg2 = 0 ;
  bool arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  bool val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_CheckIfAssignmentIsFeasible",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_CheckIfAssignmentIsFeasible" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__Assignment,  0  | 0);
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_CheckIfAssignmentIsFeasible" "', argument " "2"" of type '" "operations_research::Assignment const &""'"); 
  }
  if (!argp2) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_CheckIfAssignmentIsFeasible" "', argument " "2"" of type '" "operations_research::Assignment const &""'"); 
  }
  arg2 = reinterpret_cast< operations_research::Assignment * >(argp2);
  ecode3 = SWIG_AsVal_bool(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingModel_CheckIfAssignmentIsFeasible" "', argument " "3"" of type '" "bool""'");
  } 
  arg3 = static_cast< bool >(val3);
  {
    try {
      result = (bool)(arg1)->CheckIfAssignmentIsFeasible((operations_research::Assignment const &)*arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_solver(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::Solver *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_solver",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_solver" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (operations_research::Solver *)((operations_research::RoutingModel const *)arg1)->solver(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__Solver, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_CheckLimit__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  absl::Duration arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_CheckLimit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_CheckLimit" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_absl__Duration,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_CheckLimit" "', argument " "2"" of type '" "absl::Duration""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_CheckLimit" "', argument " "2"" of type '" "absl::Duration""'");
    } else {
      absl::Duration * temp = reinterpret_cast< absl::Duration * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (bool)(arg1)->CheckLimit(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_CheckLimit__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_CheckLimit",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_CheckLimit" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (bool)(arg1)->CheckLimit(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_CheckLimit(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 1) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__RoutingModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      return _wrap_RoutingModel_CheckLimit__SWIG_1(self, args);
    }
  }
  if (argc == 2) {
    int _v;
    void *vptr = 0;
    int res = SWIG_ConvertPtr(argv[0], &vptr, SWIGTYPE_p_operations_research__RoutingModel, 0);
    _v = SWIG_CheckState(res);
    if (_v) {
      int res = SWIG_ConvertPtr(argv[1], 0, SWIGTYPE_p_absl__Duration, 0);
      _v = SWIG_CheckState(res);
      if (_v) {
        return _wrap_RoutingModel_CheckLimit__SWIG_0(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'RoutingModel_CheckLimit'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::RoutingModel::CheckLimit(absl::Duration)\n"
    "    operations_research::RoutingModel::CheckLimit()\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_RoutingModel_RemainingTime(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  absl::Duration result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_RemainingTime",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_RemainingTime" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = ((operations_research::RoutingModel const *)arg1)->RemainingTime(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new absl::Duration(static_cast< const absl::Duration& >(result))), SWIGTYPE_p_absl__Duration, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_UpdateTimeLimit(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  absl::Duration arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_UpdateTimeLimit",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_UpdateTimeLimit" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_absl__Duration,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_UpdateTimeLimit" "', argument " "2"" of type '" "absl::Duration""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingModel_UpdateTimeLimit" "', argument " "2"" of type '" "absl::Duration""'");
    } else {
      absl::Duration * temp = reinterpret_cast< absl::Duration * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      (arg1)->UpdateTimeLimit(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_TimeBuffer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  absl::Duration result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_TimeBuffer",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_TimeBuffer" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = ((operations_research::RoutingModel const *)arg1)->TimeBuffer(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new absl::Duration(static_cast< const absl::Duration& >(result))), SWIGTYPE_p_absl__Duration, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetMutableCPSatInterrupt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::atomic< bool > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_GetMutableCPSatInterrupt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetMutableCPSatInterrupt" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (std::atomic< bool > *)(arg1)->GetMutableCPSatInterrupt(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__atomicT_bool_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetMutableCPInterrupt(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::atomic< bool > *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_GetMutableCPInterrupt",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetMutableCPInterrupt" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (std::atomic< bool > *)(arg1)->GetMutableCPInterrupt(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_std__atomicT_bool_t, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_CancelSearch(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_CancelSearch",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_CancelSearch" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      (arg1)->CancelSearch(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_nodes(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_nodes",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_nodes" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (int)((operations_research::RoutingModel const *)arg1)->nodes(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_vehicles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_vehicles",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_vehicles" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (int)((operations_research::RoutingModel const *)arg1)->vehicles(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_Size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_Size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_Size" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (int64_t)((operations_research::RoutingModel const *)arg1)->Size(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetNumberOfDecisionsInFirstSolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingSearchParameters *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_GetNumberOfDecisionsInFirstSolution",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetNumberOfDecisionsInFirstSolution" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    arg2 = new operations_research::RoutingSearchParameters;
    PyObject* const pyresult = PyObject_CallMethod(
      obj1, const_cast<char*>("SerializeToString"), nullptr);
    if (pyresult != nullptr) {
      char* buffer = nullptr;
      Py_ssize_t length = 0;
      int result = PyString_AsStringAndSize(pyresult, &buffer, &length);
      if (buffer != nullptr) {
        arg2->ParseFromArray(buffer, length);
      }
      Py_DECREF(pyresult);
    }
  }
  {
    try {
      result = (int64_t)((operations_research::RoutingModel const *)arg1)->GetNumberOfDecisionsInFirstSolution((operations_research::RoutingSearchParameters const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  {
    delete arg2;
  }
  return resultobj;
fail:
  {
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetNumberOfRejectsInFirstSolution(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingSearchParameters *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_GetNumberOfRejectsInFirstSolution",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetNumberOfRejectsInFirstSolution" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    arg2 = new operations_research::RoutingSearchParameters;
    PyObject* const pyresult = PyObject_CallMethod(
      obj1, const_cast<char*>("SerializeToString"), nullptr);
    if (pyresult != nullptr) {
      char* buffer = nullptr;
      Py_ssize_t length = 0;
      int result = PyString_AsStringAndSize(pyresult, &buffer, &length);
      if (buffer != nullptr) {
        arg2->ParseFromArray(buffer, length);
      }
      Py_DECREF(pyresult);
    }
  }
  {
    try {
      result = (int64_t)((operations_research::RoutingModel const *)arg1)->GetNumberOfRejectsInFirstSolution((operations_research::RoutingSearchParameters const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  {
    delete arg2;
  }
  return resultobj;
fail:
  {
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetAutomaticFirstSolutionStrategy(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::FirstSolutionStrategy::Value result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_GetAutomaticFirstSolutionStrategy",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetAutomaticFirstSolutionStrategy" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (operations_research::FirstSolutionStrategy::Value)((operations_research::RoutingModel const *)arg1)->GetAutomaticFirstSolutionStrategy(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_IsMatchingModel(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_IsMatchingModel",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_IsMatchingModel" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (bool)((operations_research::RoutingModel const *)arg1)->IsMatchingModel(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_AreRoutesInterdependent(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingSearchParameters *arg2 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_AreRoutesInterdependent",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_AreRoutesInterdependent" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    arg2 = new operations_research::RoutingSearchParameters;
    PyObject* const pyresult = PyObject_CallMethod(
      obj1, const_cast<char*>("SerializeToString"), nullptr);
    if (pyresult != nullptr) {
      char* buffer = nullptr;
      Py_ssize_t length = 0;
      int result = PyString_AsStringAndSize(pyresult, &buffer, &length);
      if (buffer != nullptr) {
        arg2->ParseFromArray(buffer, length);
      }
      Py_DECREF(pyresult);
    }
  }
  {
    try {
      result = (bool)((operations_research::RoutingModel const *)arg1)->AreRoutesInterdependent((operations_research::RoutingSearchParameters const &)*arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    delete arg2;
  }
  return resultobj;
fail:
  {
    delete arg2;
  }
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_MakeGuidedSlackFinalizer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingDimension *arg2 = (operations_research::RoutingDimension *) 0 ;
  std::function< int64_t (int64_t) > arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  Swig::Director *director = 0;
  operations_research::DecisionBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingModel_MakeGuidedSlackFinalizer",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_MakeGuidedSlackFinalizer" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_MakeGuidedSlackFinalizer" "', argument " "2"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::RoutingDimension * >(argp2);
  {
    SharedPyPtr input(obj2);
    arg3 = [input](int64_t index) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "(L)", index);
    };
  }
  {
    try {
      result = (operations_research::DecisionBuilder *)(arg1)->MakeGuidedSlackFinalizer((operations_research::RoutingDimension const *)arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DecisionBuilder, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_MakeSelfDependentDimensionFinalizer(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingDimension *arg2 = (operations_research::RoutingDimension *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 = 0 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  Swig::Director *director = 0;
  operations_research::DecisionBuilder *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingModel_MakeSelfDependentDimensionFinalizer",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_MakeSelfDependentDimensionFinalizer" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  res2 = SWIG_ConvertPtr(obj1, &argp2,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res2)) {
    SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingModel_MakeSelfDependentDimensionFinalizer" "', argument " "2"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg2 = reinterpret_cast< operations_research::RoutingDimension * >(argp2);
  {
    try {
      result = (operations_research::DecisionBuilder *)(arg1)->MakeSelfDependentDimensionFinalizer((operations_research::RoutingDimension const *)arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  director = SWIG_DIRECTOR_CAST(result);
  if (director) {
    resultobj = director->swig_get_self();
    Py_INCREF(resultobj);
  } else {
    resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__DecisionBuilder, 0 |  0 );
  }
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingModel_GetPathsMetadata(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::PathsMetadata *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingModel_GetPathsMetadata",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingModel_GetPathsMetadata" "', argument " "1"" of type '" "operations_research::RoutingModel const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (operations_research::PathsMetadata *) &((operations_research::RoutingModel const *)arg1)->GetPathsMetadata(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__PathsMetadata, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RoutingModel_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__RoutingModel, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN int Swig_var_RoutingModelVisitor_kLightElement_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RoutingModelVisitor_kLightElement is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_RoutingModelVisitor_kLightElement_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(operations_research::RoutingModelVisitor::kLightElement);
  return pyobj;
}


SWIGINTERN int Swig_var_RoutingModelVisitor_kLightElement2_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RoutingModelVisitor_kLightElement2 is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_RoutingModelVisitor_kLightElement2_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(operations_research::RoutingModelVisitor::kLightElement2);
  return pyobj;
}


SWIGINTERN int Swig_var_RoutingModelVisitor_kRemoveValues_set(PyObject *) {
  SWIG_Error(SWIG_AttributeError,"Variable RoutingModelVisitor_kRemoveValues is read-only.");
  return 1;
}


SWIGINTERN PyObject *Swig_var_RoutingModelVisitor_kRemoveValues_get(void) {
  PyObject *pyobj = 0;
  
  pyobj = SWIG_FromCharPtr(operations_research::RoutingModelVisitor::kRemoveValues);
  return pyobj;
}


SWIGINTERN PyObject *_wrap_new_RoutingModelVisitor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModelVisitor *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_RoutingModelVisitor")) SWIG_fail;
  {
    try {
      result = (operations_research::RoutingModelVisitor *)new operations_research::RoutingModelVisitor(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__RoutingModelVisitor, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_RoutingModelVisitor(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModelVisitor *arg1 = (operations_research::RoutingModelVisitor *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RoutingModelVisitor",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModelVisitor, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RoutingModelVisitor" "', argument " "1"" of type '" "operations_research::RoutingModelVisitor *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModelVisitor * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RoutingModelVisitor_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__RoutingModelVisitor, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_GlobalVehicleBreaksConstraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::GlobalVehicleBreaksConstraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_GlobalVehicleBreaksConstraint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_GlobalVehicleBreaksConstraint" "', argument " "1"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  {
    try {
      result = (operations_research::GlobalVehicleBreaksConstraint *)new operations_research::GlobalVehicleBreaksConstraint((operations_research::RoutingDimension const *)arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__GlobalVehicleBreaksConstraint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GlobalVehicleBreaksConstraint_DebugString(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::GlobalVehicleBreaksConstraint *arg1 = (operations_research::GlobalVehicleBreaksConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GlobalVehicleBreaksConstraint_DebugString",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__GlobalVehicleBreaksConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GlobalVehicleBreaksConstraint_DebugString" "', argument " "1"" of type '" "operations_research::GlobalVehicleBreaksConstraint const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::GlobalVehicleBreaksConstraint * >(argp1);
  {
    try {
      result = ((operations_research::GlobalVehicleBreaksConstraint const *)arg1)->DebugString(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GlobalVehicleBreaksConstraint_Post(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::GlobalVehicleBreaksConstraint *arg1 = (operations_research::GlobalVehicleBreaksConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GlobalVehicleBreaksConstraint_Post",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__GlobalVehicleBreaksConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GlobalVehicleBreaksConstraint_Post" "', argument " "1"" of type '" "operations_research::GlobalVehicleBreaksConstraint *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::GlobalVehicleBreaksConstraint * >(argp1);
  {
    try {
      (arg1)->Post(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_GlobalVehicleBreaksConstraint_InitialPropagateWrapper(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::GlobalVehicleBreaksConstraint *arg1 = (operations_research::GlobalVehicleBreaksConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:GlobalVehicleBreaksConstraint_InitialPropagateWrapper",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__GlobalVehicleBreaksConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "GlobalVehicleBreaksConstraint_InitialPropagateWrapper" "', argument " "1"" of type '" "operations_research::GlobalVehicleBreaksConstraint *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::GlobalVehicleBreaksConstraint * >(argp1);
  {
    try {
      (arg1)->InitialPropagate(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_GlobalVehicleBreaksConstraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::GlobalVehicleBreaksConstraint *arg1 = (operations_research::GlobalVehicleBreaksConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_GlobalVehicleBreaksConstraint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__GlobalVehicleBreaksConstraint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_GlobalVehicleBreaksConstraint" "', argument " "1"" of type '" "operations_research::GlobalVehicleBreaksConstraint *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::GlobalVehicleBreaksConstraint * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *GlobalVehicleBreaksConstraint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__GlobalVehicleBreaksConstraint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_TypeRegulationsChecker(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::TypeRegulationsChecker *arg1 = (operations_research::TypeRegulationsChecker *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TypeRegulationsChecker",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__TypeRegulationsChecker, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TypeRegulationsChecker" "', argument " "1"" of type '" "operations_research::TypeRegulationsChecker *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::TypeRegulationsChecker * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeRegulationsChecker_CheckVehicle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::TypeRegulationsChecker *arg1 = (operations_research::TypeRegulationsChecker *) 0 ;
  int arg2 ;
  std::function< int64_t (int64_t) > *arg3 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:TypeRegulationsChecker_CheckVehicle",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__TypeRegulationsChecker, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeRegulationsChecker_CheckVehicle" "', argument " "1"" of type '" "operations_research::TypeRegulationsChecker *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::TypeRegulationsChecker * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "TypeRegulationsChecker_CheckVehicle" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  res3 = SWIG_ConvertPtr(obj2, &argp3, SWIGTYPE_p_std__functionT_long_flongF_t,  0  | 0);
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "TypeRegulationsChecker_CheckVehicle" "', argument " "3"" of type '" "std::function< int64_t (int64_t) > const &""'"); 
  }
  if (!argp3) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "TypeRegulationsChecker_CheckVehicle" "', argument " "3"" of type '" "std::function< int64_t (int64_t) > const &""'"); 
  }
  arg3 = reinterpret_cast< std::function< int64_t (int64_t) > * >(argp3);
  {
    try {
      result = (bool)(arg1)->CheckVehicle(arg2,(std::function< int64_t (int64_t) > const &)*arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TypeRegulationsChecker_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__TypeRegulationsChecker, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TypeIncompatibilityChecker(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = 0 ;
  bool arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  bool val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::TypeIncompatibilityChecker *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_TypeIncompatibilityChecker",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_operations_research__RoutingModel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TypeIncompatibilityChecker" "', argument " "1"" of type '" "operations_research::RoutingModel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TypeIncompatibilityChecker" "', argument " "1"" of type '" "operations_research::RoutingModel const &""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  ecode2 = SWIG_AsVal_bool(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_TypeIncompatibilityChecker" "', argument " "2"" of type '" "bool""'");
  } 
  arg2 = static_cast< bool >(val2);
  {
    try {
      result = (operations_research::TypeIncompatibilityChecker *)new operations_research::TypeIncompatibilityChecker((operations_research::RoutingModel const &)*arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__TypeIncompatibilityChecker, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TypeIncompatibilityChecker(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::TypeIncompatibilityChecker *arg1 = (operations_research::TypeIncompatibilityChecker *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TypeIncompatibilityChecker",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__TypeIncompatibilityChecker, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TypeIncompatibilityChecker" "', argument " "1"" of type '" "operations_research::TypeIncompatibilityChecker *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::TypeIncompatibilityChecker * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TypeIncompatibilityChecker_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__TypeIncompatibilityChecker, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TypeRequirementChecker(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::TypeRequirementChecker *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TypeRequirementChecker",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_operations_research__RoutingModel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TypeRequirementChecker" "', argument " "1"" of type '" "operations_research::RoutingModel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TypeRequirementChecker" "', argument " "1"" of type '" "operations_research::RoutingModel const &""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (operations_research::TypeRequirementChecker *)new operations_research::TypeRequirementChecker((operations_research::RoutingModel const &)*arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__TypeRequirementChecker, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TypeRequirementChecker(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::TypeRequirementChecker *arg1 = (operations_research::TypeRequirementChecker *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TypeRequirementChecker",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__TypeRequirementChecker, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TypeRequirementChecker" "', argument " "1"" of type '" "operations_research::TypeRequirementChecker *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::TypeRequirementChecker * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TypeRequirementChecker_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__TypeRequirementChecker, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_TypeRegulationsConstraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::TypeRegulationsConstraint *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:new_TypeRegulationsConstraint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1, SWIGTYPE_p_operations_research__RoutingModel,  0  | 0);
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "new_TypeRegulationsConstraint" "', argument " "1"" of type '" "operations_research::RoutingModel const &""'"); 
  }
  if (!argp1) {
    SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_TypeRegulationsConstraint" "', argument " "1"" of type '" "operations_research::RoutingModel const &""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    try {
      result = (operations_research::TypeRegulationsConstraint *)new operations_research::TypeRegulationsConstraint((operations_research::RoutingModel const &)*arg1); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__TypeRegulationsConstraint, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeRegulationsConstraint_Post(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::TypeRegulationsConstraint *arg1 = (operations_research::TypeRegulationsConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TypeRegulationsConstraint_Post",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__TypeRegulationsConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeRegulationsConstraint_Post" "', argument " "1"" of type '" "operations_research::TypeRegulationsConstraint *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::TypeRegulationsConstraint * >(argp1);
  {
    try {
      (arg1)->Post(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_TypeRegulationsConstraint_InitialPropagateWrapper(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::TypeRegulationsConstraint *arg1 = (operations_research::TypeRegulationsConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:TypeRegulationsConstraint_InitialPropagateWrapper",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__TypeRegulationsConstraint, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "TypeRegulationsConstraint_InitialPropagateWrapper" "', argument " "1"" of type '" "operations_research::TypeRegulationsConstraint *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::TypeRegulationsConstraint * >(argp1);
  {
    try {
      (arg1)->InitialPropagate(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_TypeRegulationsConstraint(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::TypeRegulationsConstraint *arg1 = (operations_research::TypeRegulationsConstraint *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_TypeRegulationsConstraint",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__TypeRegulationsConstraint, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_TypeRegulationsConstraint" "', argument " "1"" of type '" "operations_research::TypeRegulationsConstraint *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::TypeRegulationsConstraint * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *TypeRegulationsConstraint_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__TypeRegulationsConstraint, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_BoundCost_bound_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BoundCost *arg1 = (operations_research::BoundCost *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BoundCost_bound_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BoundCost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoundCost_bound_set" "', argument " "1"" of type '" "operations_research::BoundCost *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BoundCost * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BoundCost_bound_set" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  if (arg1) (arg1)->bound = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BoundCost_bound_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BoundCost *arg1 = (operations_research::BoundCost *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BoundCost_bound_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BoundCost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoundCost_bound_get" "', argument " "1"" of type '" "operations_research::BoundCost *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BoundCost * >(argp1);
  result = (int64_t) ((arg1)->bound);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BoundCost_cost_set(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BoundCost *arg1 = (operations_research::BoundCost *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:BoundCost_cost_set",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BoundCost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoundCost_cost_set" "', argument " "1"" of type '" "operations_research::BoundCost *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BoundCost * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "BoundCost_cost_set" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  if (arg1) (arg1)->cost = arg2;
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_BoundCost_cost_get(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BoundCost *arg1 = (operations_research::BoundCost *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:BoundCost_cost_get",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BoundCost, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "BoundCost_cost_get" "', argument " "1"" of type '" "operations_research::BoundCost *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BoundCost * >(argp1);
  result = (int64_t) ((arg1)->cost);
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BoundCost__SWIG_0(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BoundCost *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)":new_BoundCost")) SWIG_fail;
  {
    try {
      result = (operations_research::BoundCost *)new operations_research::BoundCost(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__BoundCost, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BoundCost__SWIG_1(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int64_t arg1 ;
  int64_t arg2 ;
  long val1 ;
  int ecode1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::BoundCost *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_BoundCost",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_long(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_BoundCost" "', argument " "1"" of type '" "int64_t""'");
  } 
  arg1 = static_cast< int64_t >(val1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "new_BoundCost" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::BoundCost *)new operations_research::BoundCost(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__BoundCost, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_new_BoundCost(PyObject *self, PyObject *args) {
  Py_ssize_t argc;
  PyObject *argv[3] = {
    0
  };
  Py_ssize_t ii;
  
  if (!PyTuple_Check(args)) SWIG_fail;
  argc = args ? PyObject_Length(args) : 0;
  for (ii = 0; (ii < 2) && (ii < argc); ii++) {
    argv[ii] = PyTuple_GET_ITEM(args,ii);
  }
  if (argc == 0) {
    return _wrap_new_BoundCost__SWIG_0(self, args);
  }
  if (argc == 2) {
    int _v;
    {
      int res = SWIG_AsVal_long(argv[0], NULL);
      _v = SWIG_CheckState(res);
    }
    if (_v) {
      {
        int res = SWIG_AsVal_long(argv[1], NULL);
        _v = SWIG_CheckState(res);
      }
      if (_v) {
        return _wrap_new_BoundCost__SWIG_1(self, args);
      }
    }
  }
  
fail:
  SWIG_SetErrorMsg(PyExc_NotImplementedError,"Wrong number or type of arguments for overloaded function 'new_BoundCost'.\n"
    "  Possible C/C++ prototypes are:\n"
    "    operations_research::BoundCost::BoundCost()\n"
    "    operations_research::BoundCost::BoundCost(int64_t,int64_t)\n");
  return 0;
}


SWIGINTERN PyObject *_wrap_delete_BoundCost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::BoundCost *arg1 = (operations_research::BoundCost *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_BoundCost",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__BoundCost, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_BoundCost" "', argument " "1"" of type '" "operations_research::BoundCost *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::BoundCost * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *BoundCost_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__BoundCost, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_new_SimpleBoundCosts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  int arg1 ;
  operations_research::BoundCost arg2 ;
  int val1 ;
  int ecode1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::SimpleBoundCosts *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:new_SimpleBoundCosts",&obj0,&obj1)) SWIG_fail;
  ecode1 = SWIG_AsVal_int(obj0, &val1);
  if (!SWIG_IsOK(ecode1)) {
    SWIG_exception_fail(SWIG_ArgError(ecode1), "in method '" "new_SimpleBoundCosts" "', argument " "1"" of type '" "int""'");
  } 
  arg1 = static_cast< int >(val1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__BoundCost,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "new_SimpleBoundCosts" "', argument " "2"" of type '" "operations_research::BoundCost""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "new_SimpleBoundCosts" "', argument " "2"" of type '" "operations_research::BoundCost""'");
    } else {
      operations_research::BoundCost * temp = reinterpret_cast< operations_research::BoundCost * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  {
    try {
      result = (operations_research::SimpleBoundCosts *)new operations_research::SimpleBoundCosts(arg1,arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__SimpleBoundCosts, SWIG_POINTER_NEW |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimpleBoundCosts_bound_cost(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SimpleBoundCosts *arg1 = (operations_research::SimpleBoundCosts *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::BoundCost result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:SimpleBoundCosts_bound_cost",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SimpleBoundCosts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleBoundCosts_bound_cost" "', argument " "1"" of type '" "operations_research::SimpleBoundCosts const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SimpleBoundCosts * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "SimpleBoundCosts_bound_cost" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((operations_research::SimpleBoundCosts const *)arg1)->bound_cost(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new operations_research::BoundCost(static_cast< const operations_research::BoundCost& >(result))), SWIGTYPE_p_operations_research__BoundCost, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_SimpleBoundCosts_size(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SimpleBoundCosts *arg1 = (operations_research::SimpleBoundCosts *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:SimpleBoundCosts_size",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SimpleBoundCosts, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SimpleBoundCosts_size" "', argument " "1"" of type '" "operations_research::SimpleBoundCosts *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SimpleBoundCosts * >(argp1);
  {
    try {
      result = (int)(arg1)->Size(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_delete_SimpleBoundCosts(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::SimpleBoundCosts *arg1 = (operations_research::SimpleBoundCosts *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_SimpleBoundCosts",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__SimpleBoundCosts, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_SimpleBoundCosts" "', argument " "1"" of type '" "operations_research::SimpleBoundCosts *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::SimpleBoundCosts * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *SimpleBoundCosts_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__SimpleBoundCosts, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_delete_RoutingDimension(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:delete_RoutingDimension",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, SWIG_POINTER_DISOWN |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "delete_RoutingDimension" "', argument " "1"" of type '" "operations_research::RoutingDimension *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  {
    try {
      delete arg1; 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_model(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::RoutingModel *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingDimension_model",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_model" "', argument " "1"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  {
    try {
      result = (operations_research::RoutingModel *)((operations_research::RoutingDimension const *)arg1)->model(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_GetTransitValue(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RoutingDimension_GetTransitValue",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_GetTransitValue" "', argument " "1"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingDimension_GetTransitValue" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingDimension_GetTransitValue" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RoutingDimension_GetTransitValue" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      result = (int64_t)((operations_research::RoutingDimension const *)arg1)->GetTransitValue(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_GetTransitValueFromClass(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RoutingDimension_GetTransitValueFromClass",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_GetTransitValueFromClass" "', argument " "1"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingDimension_GetTransitValueFromClass" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingDimension_GetTransitValueFromClass" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RoutingDimension_GetTransitValueFromClass" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      result = (int64_t)((operations_research::RoutingDimension const *)arg1)->GetTransitValueFromClass(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_CumulVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingDimension_CumulVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_CumulVar" "', argument " "1"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingDimension_CumulVar" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::IntVar *)((operations_research::RoutingDimension const *)arg1)->CumulVar(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_TransitVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingDimension_TransitVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_TransitVar" "', argument " "1"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingDimension_TransitVar" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::IntVar *)((operations_research::RoutingDimension const *)arg1)->TransitVar(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_FixedTransitVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingDimension_FixedTransitVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_FixedTransitVar" "', argument " "1"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingDimension_FixedTransitVar" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::IntVar *)((operations_research::RoutingDimension const *)arg1)->FixedTransitVar(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_SlackVar(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::IntVar *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingDimension_SlackVar",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_SlackVar" "', argument " "1"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingDimension_SlackVar" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (operations_research::IntVar *)((operations_research::RoutingDimension const *)arg1)->SlackVar(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__IntVar, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_SetSpanUpperBoundForVehicle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64_t arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingDimension_SetSpanUpperBoundForVehicle",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_SetSpanUpperBoundForVehicle" "', argument " "1"" of type '" "operations_research::RoutingDimension *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingDimension_SetSpanUpperBoundForVehicle" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingDimension_SetSpanUpperBoundForVehicle" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->SetSpanUpperBoundForVehicle(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_SetSpanCostCoefficientForVehicle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64_t arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingDimension_SetSpanCostCoefficientForVehicle",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_SetSpanCostCoefficientForVehicle" "', argument " "1"" of type '" "operations_research::RoutingDimension *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingDimension_SetSpanCostCoefficientForVehicle" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingDimension_SetSpanCostCoefficientForVehicle" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->SetSpanCostCoefficientForVehicle(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_SetSpanCostCoefficientForAllVehicles(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingDimension_SetSpanCostCoefficientForAllVehicles",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_SetSpanCostCoefficientForAllVehicles" "', argument " "1"" of type '" "operations_research::RoutingDimension *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingDimension_SetSpanCostCoefficientForAllVehicles" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      (arg1)->SetSpanCostCoefficientForAllVehicles(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_SetGlobalSpanCostCoefficient(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingDimension_SetGlobalSpanCostCoefficient",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_SetGlobalSpanCostCoefficient" "', argument " "1"" of type '" "operations_research::RoutingDimension *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingDimension_SetGlobalSpanCostCoefficient" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      (arg1)->SetGlobalSpanCostCoefficient(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_SetCumulVarSoftUpperBound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RoutingDimension_SetCumulVarSoftUpperBound",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_SetCumulVarSoftUpperBound" "', argument " "1"" of type '" "operations_research::RoutingDimension *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingDimension_SetCumulVarSoftUpperBound" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingDimension_SetCumulVarSoftUpperBound" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RoutingDimension_SetCumulVarSoftUpperBound" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      (arg1)->SetCumulVarSoftUpperBound(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_HasCumulVarSoftUpperBound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingDimension_HasCumulVarSoftUpperBound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_HasCumulVarSoftUpperBound" "', argument " "1"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingDimension_HasCumulVarSoftUpperBound" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (bool)((operations_research::RoutingDimension const *)arg1)->HasCumulVarSoftUpperBound(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_GetCumulVarSoftUpperBound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingDimension_GetCumulVarSoftUpperBound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_GetCumulVarSoftUpperBound" "', argument " "1"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingDimension_GetCumulVarSoftUpperBound" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (int64_t)((operations_research::RoutingDimension const *)arg1)->GetCumulVarSoftUpperBound(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_GetCumulVarSoftUpperBoundCoefficient(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingDimension_GetCumulVarSoftUpperBoundCoefficient",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_GetCumulVarSoftUpperBoundCoefficient" "', argument " "1"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingDimension_GetCumulVarSoftUpperBoundCoefficient" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (int64_t)((operations_research::RoutingDimension const *)arg1)->GetCumulVarSoftUpperBoundCoefficient(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_SetCumulVarSoftLowerBound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RoutingDimension_SetCumulVarSoftLowerBound",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_SetCumulVarSoftLowerBound" "', argument " "1"" of type '" "operations_research::RoutingDimension *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingDimension_SetCumulVarSoftLowerBound" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingDimension_SetCumulVarSoftLowerBound" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RoutingDimension_SetCumulVarSoftLowerBound" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      (arg1)->SetCumulVarSoftLowerBound(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_HasCumulVarSoftLowerBound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingDimension_HasCumulVarSoftLowerBound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_HasCumulVarSoftLowerBound" "', argument " "1"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingDimension_HasCumulVarSoftLowerBound" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (bool)((operations_research::RoutingDimension const *)arg1)->HasCumulVarSoftLowerBound(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_GetCumulVarSoftLowerBound(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingDimension_GetCumulVarSoftLowerBound",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_GetCumulVarSoftLowerBound" "', argument " "1"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingDimension_GetCumulVarSoftLowerBound" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (int64_t)((operations_research::RoutingDimension const *)arg1)->GetCumulVarSoftLowerBound(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_GetCumulVarSoftLowerBoundCoefficient(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingDimension_GetCumulVarSoftLowerBoundCoefficient",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_GetCumulVarSoftLowerBoundCoefficient" "', argument " "1"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingDimension_GetCumulVarSoftLowerBoundCoefficient" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (int64_t)((operations_research::RoutingDimension const *)arg1)->GetCumulVarSoftLowerBoundCoefficient(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_SetBreakIntervalsOfVehicle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  SwigValueWrapper< std::vector< operations_research::IntervalVar * > > arg2 ;
  int arg3 ;
  std::vector< int64_t > arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  std::vector< operations_research::IntervalVar * > temp2 ;
  int val3 ;
  int ecode3 = 0 ;
  std::vector< int64_t > temp4 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RoutingDimension_SetBreakIntervalsOfVehicle",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_SetBreakIntervalsOfVehicle" "', argument " "1"" of type '" "operations_research::RoutingDimension *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  {
    if (!vector_input_helper(obj1, &temp2, PyObjAs<operations_research::IntervalVar*>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(operations_research::IntervalVar*) expected");
      return NULL;
    }
    arg2 = std::move(temp2);
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingDimension_SetBreakIntervalsOfVehicle" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    if (!vector_input_helper(obj3, &temp4, PyObjAs<int64_t>)) {
      if (!PyErr_Occurred())
      SWIG_Error(SWIG_TypeError, "sequence(int64_t) expected");
      return NULL;
    }
    arg4 = std::move(temp4);
  }
  {
    try {
      (arg1)->SetBreakIntervalsOfVehicle(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_SetBreakDistanceDurationOfVehicle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  int arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  int val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RoutingDimension_SetBreakDistanceDurationOfVehicle",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_SetBreakDistanceDurationOfVehicle" "', argument " "1"" of type '" "operations_research::RoutingDimension *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingDimension_SetBreakDistanceDurationOfVehicle" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingDimension_SetBreakDistanceDurationOfVehicle" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_int(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RoutingDimension_SetBreakDistanceDurationOfVehicle" "', argument " "4"" of type '" "int""'");
  } 
  arg4 = static_cast< int >(val4);
  {
    try {
      (arg1)->SetBreakDistanceDurationOfVehicle(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_InitializeBreaks(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingDimension_InitializeBreaks",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_InitializeBreaks" "', argument " "1"" of type '" "operations_research::RoutingDimension *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  {
    try {
      (arg1)->InitializeBreaks(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_HasBreakConstraints(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingDimension_HasBreakConstraints",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_HasBreakConstraints" "', argument " "1"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  {
    try {
      result = (bool)((operations_research::RoutingDimension const *)arg1)->HasBreakConstraints(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_GetPreTravelEvaluatorOfVehicle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingDimension_GetPreTravelEvaluatorOfVehicle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_GetPreTravelEvaluatorOfVehicle" "', argument " "1"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingDimension_GetPreTravelEvaluatorOfVehicle" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)((operations_research::RoutingDimension const *)arg1)->GetPreTravelEvaluatorOfVehicle(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_GetPostTravelEvaluatorOfVehicle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingDimension_GetPostTravelEvaluatorOfVehicle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_GetPostTravelEvaluatorOfVehicle" "', argument " "1"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingDimension_GetPostTravelEvaluatorOfVehicle" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int)((operations_research::RoutingDimension const *)arg1)->GetPostTravelEvaluatorOfVehicle(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_int(static_cast< int >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_base_dimension(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  operations_research::RoutingDimension *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingDimension_base_dimension",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_base_dimension" "', argument " "1"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  {
    try {
      result = (operations_research::RoutingDimension *)((operations_research::RoutingDimension const *)arg1)->base_dimension(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj(SWIG_as_voidptr(result), SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_ShortestTransitionSlack(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64_t arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingDimension_ShortestTransitionSlack",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_ShortestTransitionSlack" "', argument " "1"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingDimension_ShortestTransitionSlack" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  {
    try {
      result = (int64_t)((operations_research::RoutingDimension const *)arg1)->ShortestTransitionSlack(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_name(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  std::string *result = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingDimension_name",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_name" "', argument " "1"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  {
    try {
      result = (std::string *) &((operations_research::RoutingDimension const *)arg1)->name(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_std_string(static_cast< std::string >(*result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_SetPickupToDeliveryLimitFunctionForPair(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  operations_research::RoutingDimension::PickupToDeliveryLimitFunction arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingDimension_SetPickupToDeliveryLimitFunctionForPair",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_SetPickupToDeliveryLimitFunctionForPair" "', argument " "1"" of type '" "operations_research::RoutingDimension *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  {
    SharedPyPtr input(obj1);
    arg2 = [input](int i, int j) {
      return InvokePythonCallableReturning<int64_t>(input.get(), "ii", i, j);
    };
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingDimension_SetPickupToDeliveryLimitFunctionForPair" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->SetPickupToDeliveryLimitFunctionForPair(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_HasPickupToDeliveryLimits(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingDimension_HasPickupToDeliveryLimits",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_HasPickupToDeliveryLimits" "', argument " "1"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  {
    try {
      result = (bool)((operations_research::RoutingDimension const *)arg1)->HasPickupToDeliveryLimits(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_AddNodePrecedence(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int64_t arg2 ;
  int64_t arg3 ;
  int64_t arg4 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  long val2 ;
  int ecode2 = 0 ;
  long val3 ;
  int ecode3 = 0 ;
  long val4 ;
  int ecode4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:RoutingDimension_AddNodePrecedence",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_AddNodePrecedence" "', argument " "1"" of type '" "operations_research::RoutingDimension *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  ecode2 = SWIG_AsVal_long(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingDimension_AddNodePrecedence" "', argument " "2"" of type '" "int64_t""'");
  } 
  arg2 = static_cast< int64_t >(val2);
  ecode3 = SWIG_AsVal_long(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingDimension_AddNodePrecedence" "', argument " "3"" of type '" "int64_t""'");
  } 
  arg3 = static_cast< int64_t >(val3);
  ecode4 = SWIG_AsVal_long(obj3, &val4);
  if (!SWIG_IsOK(ecode4)) {
    SWIG_exception_fail(SWIG_ArgError(ecode4), "in method '" "RoutingDimension_AddNodePrecedence" "', argument " "4"" of type '" "int64_t""'");
  } 
  arg4 = static_cast< int64_t >(val4);
  {
    try {
      (arg1)->AddNodePrecedence(arg2,arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_GetSpanUpperBoundForVehicle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingDimension_GetSpanUpperBoundForVehicle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_GetSpanUpperBoundForVehicle" "', argument " "1"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingDimension_GetSpanUpperBoundForVehicle" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int64_t)((operations_research::RoutingDimension const *)arg1)->GetSpanUpperBoundForVehicle(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_GetSpanCostCoefficientForVehicle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingDimension_GetSpanCostCoefficientForVehicle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_GetSpanCostCoefficientForVehicle" "', argument " "1"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingDimension_GetSpanCostCoefficientForVehicle" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int64_t)((operations_research::RoutingDimension const *)arg1)->GetSpanCostCoefficientForVehicle(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_global_span_cost_coefficient(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingDimension_global_span_cost_coefficient",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_global_span_cost_coefficient" "', argument " "1"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  {
    try {
      result = (int64_t)((operations_research::RoutingDimension const *)arg1)->global_span_cost_coefficient(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_GetGlobalOptimizerOffset(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingDimension_GetGlobalOptimizerOffset",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_GetGlobalOptimizerOffset" "', argument " "1"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  {
    try {
      result = (int64_t)((operations_research::RoutingDimension const *)arg1)->GetGlobalOptimizerOffset(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_GetLocalOptimizerOffsetForVehicle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  int64_t result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingDimension_GetLocalOptimizerOffsetForVehicle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_GetLocalOptimizerOffsetForVehicle" "', argument " "1"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingDimension_GetLocalOptimizerOffsetForVehicle" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = (int64_t)((operations_research::RoutingDimension const *)arg1)->GetLocalOptimizerOffsetForVehicle(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_long(static_cast< long >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_SetSoftSpanUpperBoundForVehicle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  operations_research::BoundCost arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingDimension_SetSoftSpanUpperBoundForVehicle",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_SetSoftSpanUpperBoundForVehicle" "', argument " "1"" of type '" "operations_research::RoutingDimension *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__BoundCost,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingDimension_SetSoftSpanUpperBoundForVehicle" "', argument " "2"" of type '" "operations_research::BoundCost""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingDimension_SetSoftSpanUpperBoundForVehicle" "', argument " "2"" of type '" "operations_research::BoundCost""'");
    } else {
      operations_research::BoundCost * temp = reinterpret_cast< operations_research::BoundCost * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingDimension_SetSoftSpanUpperBoundForVehicle" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->SetSoftSpanUpperBoundForVehicle(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_HasSoftSpanUpperBounds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingDimension_HasSoftSpanUpperBounds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_HasSoftSpanUpperBounds" "', argument " "1"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  {
    try {
      result = (bool)((operations_research::RoutingDimension const *)arg1)->HasSoftSpanUpperBounds(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_GetSoftSpanUpperBoundForVehicle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::BoundCost result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingDimension_GetSoftSpanUpperBoundForVehicle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_GetSoftSpanUpperBoundForVehicle" "', argument " "1"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingDimension_GetSoftSpanUpperBoundForVehicle" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((operations_research::RoutingDimension const *)arg1)->GetSoftSpanUpperBoundForVehicle(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new operations_research::BoundCost(static_cast< const operations_research::BoundCost& >(result))), SWIGTYPE_p_operations_research__BoundCost, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_SetQuadraticCostSoftSpanUpperBoundForVehicle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  operations_research::BoundCost arg2 ;
  int arg3 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp2 ;
  int res2 = 0 ;
  int val3 ;
  int ecode3 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  
  if (!PyArg_ParseTuple(args,(char *)"OOO:RoutingDimension_SetQuadraticCostSoftSpanUpperBoundForVehicle",&obj0,&obj1,&obj2)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_SetQuadraticCostSoftSpanUpperBoundForVehicle" "', argument " "1"" of type '" "operations_research::RoutingDimension *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  {
    res2 = SWIG_ConvertPtr(obj1, &argp2, SWIGTYPE_p_operations_research__BoundCost,  0  | 0);
    if (!SWIG_IsOK(res2)) {
      SWIG_exception_fail(SWIG_ArgError(res2), "in method '" "RoutingDimension_SetQuadraticCostSoftSpanUpperBoundForVehicle" "', argument " "2"" of type '" "operations_research::BoundCost""'"); 
    }  
    if (!argp2) {
      SWIG_exception_fail(SWIG_ValueError, "invalid null reference " "in method '" "RoutingDimension_SetQuadraticCostSoftSpanUpperBoundForVehicle" "', argument " "2"" of type '" "operations_research::BoundCost""'");
    } else {
      operations_research::BoundCost * temp = reinterpret_cast< operations_research::BoundCost * >(argp2);
      arg2 = *temp;
      if (SWIG_IsNewObj(res2)) delete temp;
    }
  }
  ecode3 = SWIG_AsVal_int(obj2, &val3);
  if (!SWIG_IsOK(ecode3)) {
    SWIG_exception_fail(SWIG_ArgError(ecode3), "in method '" "RoutingDimension_SetQuadraticCostSoftSpanUpperBoundForVehicle" "', argument " "3"" of type '" "int""'");
  } 
  arg3 = static_cast< int >(val3);
  {
    try {
      (arg1)->SetQuadraticCostSoftSpanUpperBoundForVehicle(arg2,arg3); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_Py_Void();
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_HasQuadraticCostSoftSpanUpperBounds(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  PyObject * obj0 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"O:RoutingDimension_HasQuadraticCostSoftSpanUpperBounds",&obj0)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_HasQuadraticCostSoftSpanUpperBounds" "', argument " "1"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  {
    try {
      result = (bool)((operations_research::RoutingDimension const *)arg1)->HasQuadraticCostSoftSpanUpperBounds(); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *_wrap_RoutingDimension_GetQuadraticCostSoftSpanUpperBoundForVehicle(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingDimension *arg1 = (operations_research::RoutingDimension *) 0 ;
  int arg2 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  int val2 ;
  int ecode2 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  operations_research::BoundCost result;
  
  if (!PyArg_ParseTuple(args,(char *)"OO:RoutingDimension_GetQuadraticCostSoftSpanUpperBoundForVehicle",&obj0,&obj1)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingDimension, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "RoutingDimension_GetQuadraticCostSoftSpanUpperBoundForVehicle" "', argument " "1"" of type '" "operations_research::RoutingDimension const *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingDimension * >(argp1);
  ecode2 = SWIG_AsVal_int(obj1, &val2);
  if (!SWIG_IsOK(ecode2)) {
    SWIG_exception_fail(SWIG_ArgError(ecode2), "in method '" "RoutingDimension_GetQuadraticCostSoftSpanUpperBoundForVehicle" "', argument " "2"" of type '" "int""'");
  } 
  arg2 = static_cast< int >(val2);
  {
    try {
      result = ((operations_research::RoutingDimension const *)arg1)->GetQuadraticCostSoftSpanUpperBoundForVehicle(arg2); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_NewPointerObj((new operations_research::BoundCost(static_cast< const operations_research::BoundCost& >(result))), SWIGTYPE_p_operations_research__BoundCost, SWIG_POINTER_OWN |  0 );
  return resultobj;
fail:
  return NULL;
}


SWIGINTERN PyObject *RoutingDimension_swigregister(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *obj;
  if (!PyArg_ParseTuple(args,(char *)"O:swigregister", &obj)) return NULL;
  SWIG_TypeNewClientData(SWIGTYPE_p_operations_research__RoutingDimension, SWIG_NewClientData(obj));
  return SWIG_Py_Void();
}

SWIGINTERN PyObject *_wrap_SolveModelWithSat(PyObject *SWIGUNUSEDPARM(self), PyObject *args) {
  PyObject *resultobj = 0;
  operations_research::RoutingModel *arg1 = (operations_research::RoutingModel *) 0 ;
  operations_research::RoutingSearchParameters *arg2 = 0 ;
  operations_research::Assignment *arg3 = (operations_research::Assignment *) 0 ;
  operations_research::Assignment *arg4 = (operations_research::Assignment *) 0 ;
  void *argp1 = 0 ;
  int res1 = 0 ;
  void *argp3 = 0 ;
  int res3 = 0 ;
  void *argp4 = 0 ;
  int res4 = 0 ;
  PyObject * obj0 = 0 ;
  PyObject * obj1 = 0 ;
  PyObject * obj2 = 0 ;
  PyObject * obj3 = 0 ;
  bool result;
  
  if (!PyArg_ParseTuple(args,(char *)"OOOO:SolveModelWithSat",&obj0,&obj1,&obj2,&obj3)) SWIG_fail;
  res1 = SWIG_ConvertPtr(obj0, &argp1,SWIGTYPE_p_operations_research__RoutingModel, 0 |  0 );
  if (!SWIG_IsOK(res1)) {
    SWIG_exception_fail(SWIG_ArgError(res1), "in method '" "SolveModelWithSat" "', argument " "1"" of type '" "operations_research::RoutingModel *""'"); 
  }
  arg1 = reinterpret_cast< operations_research::RoutingModel * >(argp1);
  {
    arg2 = new operations_research::RoutingSearchParameters;
    PyObject* const pyresult = PyObject_CallMethod(
      obj1, const_cast<char*>("SerializeToString"), nullptr);
    if (pyresult != nullptr) {
      char* buffer = nullptr;
      Py_ssize_t length = 0;
      int result = PyString_AsStringAndSize(pyresult, &buffer, &length);
      if (buffer != nullptr) {
        arg2->ParseFromArray(buffer, length);
      }
      Py_DECREF(pyresult);
    }
  }
  res3 = SWIG_ConvertPtr(obj2, &argp3,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res3)) {
    SWIG_exception_fail(SWIG_ArgError(res3), "in method '" "SolveModelWithSat" "', argument " "3"" of type '" "operations_research::Assignment const *""'"); 
  }
  arg3 = reinterpret_cast< operations_research::Assignment * >(argp3);
  res4 = SWIG_ConvertPtr(obj3, &argp4,SWIGTYPE_p_operations_research__Assignment, 0 |  0 );
  if (!SWIG_IsOK(res4)) {
    SWIG_exception_fail(SWIG_ArgError(res4), "in method '" "SolveModelWithSat" "', argument " "4"" of type '" "operations_research::Assignment *""'"); 
  }
  arg4 = reinterpret_cast< operations_research::Assignment * >(argp4);
  {
    try {
      result = (bool)operations_research::SolveModelWithSat(arg1,(operations_research::RoutingSearchParameters const &)*arg2,(operations_research::Assignment const *)arg3,arg4); 
    }
    catch (Swig::DirectorException &e) {
      SWIG_fail; 
    }
  }
  resultobj = SWIG_From_bool(static_cast< bool >(result));
  {
    delete arg2;
  }
  return resultobj;
fail:
  {
    delete arg2;
  }
  return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { (char *)"SWIG_PyInstanceMethod_New", (PyCFunction)SWIG_PyInstanceMethod_New, METH_O, NULL},
	 { (char *)"DefaultPhaseParameters_var_selection_schema_set", _wrap_DefaultPhaseParameters_var_selection_schema_set, METH_VARARGS, NULL},
	 { (char *)"DefaultPhaseParameters_var_selection_schema_get", _wrap_DefaultPhaseParameters_var_selection_schema_get, METH_VARARGS, NULL},
	 { (char *)"DefaultPhaseParameters_value_selection_schema_set", _wrap_DefaultPhaseParameters_value_selection_schema_set, METH_VARARGS, NULL},
	 { (char *)"DefaultPhaseParameters_value_selection_schema_get", _wrap_DefaultPhaseParameters_value_selection_schema_get, METH_VARARGS, NULL},
	 { (char *)"DefaultPhaseParameters_initialization_splits_set", _wrap_DefaultPhaseParameters_initialization_splits_set, METH_VARARGS, NULL},
	 { (char *)"DefaultPhaseParameters_initialization_splits_get", _wrap_DefaultPhaseParameters_initialization_splits_get, METH_VARARGS, NULL},
	 { (char *)"DefaultPhaseParameters_run_all_heuristics_set", _wrap_DefaultPhaseParameters_run_all_heuristics_set, METH_VARARGS, NULL},
	 { (char *)"DefaultPhaseParameters_run_all_heuristics_get", _wrap_DefaultPhaseParameters_run_all_heuristics_get, METH_VARARGS, NULL},
	 { (char *)"DefaultPhaseParameters_heuristic_period_set", _wrap_DefaultPhaseParameters_heuristic_period_set, METH_VARARGS, NULL},
	 { (char *)"DefaultPhaseParameters_heuristic_period_get", _wrap_DefaultPhaseParameters_heuristic_period_get, METH_VARARGS, NULL},
	 { (char *)"DefaultPhaseParameters_heuristic_num_failures_limit_set", _wrap_DefaultPhaseParameters_heuristic_num_failures_limit_set, METH_VARARGS, NULL},
	 { (char *)"DefaultPhaseParameters_heuristic_num_failures_limit_get", _wrap_DefaultPhaseParameters_heuristic_num_failures_limit_get, METH_VARARGS, NULL},
	 { (char *)"DefaultPhaseParameters_persistent_impact_set", _wrap_DefaultPhaseParameters_persistent_impact_set, METH_VARARGS, NULL},
	 { (char *)"DefaultPhaseParameters_persistent_impact_get", _wrap_DefaultPhaseParameters_persistent_impact_get, METH_VARARGS, NULL},
	 { (char *)"DefaultPhaseParameters_random_seed_set", _wrap_DefaultPhaseParameters_random_seed_set, METH_VARARGS, NULL},
	 { (char *)"DefaultPhaseParameters_random_seed_get", _wrap_DefaultPhaseParameters_random_seed_get, METH_VARARGS, NULL},
	 { (char *)"DefaultPhaseParameters_display_level_set", _wrap_DefaultPhaseParameters_display_level_set, METH_VARARGS, NULL},
	 { (char *)"DefaultPhaseParameters_display_level_get", _wrap_DefaultPhaseParameters_display_level_get, METH_VARARGS, NULL},
	 { (char *)"DefaultPhaseParameters_decision_builder_set", _wrap_DefaultPhaseParameters_decision_builder_set, METH_VARARGS, NULL},
	 { (char *)"DefaultPhaseParameters_decision_builder_get", _wrap_DefaultPhaseParameters_decision_builder_get, METH_VARARGS, NULL},
	 { (char *)"new_DefaultPhaseParameters", _wrap_new_DefaultPhaseParameters, METH_VARARGS, NULL},
	 { (char *)"delete_DefaultPhaseParameters", _wrap_delete_DefaultPhaseParameters, METH_VARARGS, NULL},
	 { (char *)"DefaultPhaseParameters_swigregister", DefaultPhaseParameters_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Solver", _wrap_new_Solver, METH_VARARGS, NULL},
	 { (char *)"delete_Solver", _wrap_delete_Solver, METH_VARARGS, NULL},
	 { (char *)"Solver_Parameters", _wrap_Solver_Parameters, METH_VARARGS, NULL},
	 { (char *)"Solver_DefaultSolverParameters", _wrap_Solver_DefaultSolverParameters, METH_VARARGS, NULL},
	 { (char *)"Solver_AddConstraint", _wrap_Solver_AddConstraint, METH_VARARGS, NULL},
	 { (char *)"Solver_Solve", _wrap_Solver_Solve, METH_VARARGS, NULL},
	 { (char *)"Solver_NewSearch", _wrap_Solver_NewSearch, METH_VARARGS, NULL},
	 { (char *)"Solver_NextSolution", _wrap_Solver_NextSolution, METH_VARARGS, NULL},
	 { (char *)"Solver_RestartSearch", _wrap_Solver_RestartSearch, METH_VARARGS, NULL},
	 { (char *)"Solver_EndSearch", _wrap_Solver_EndSearch, METH_VARARGS, NULL},
	 { (char *)"Solver_SolveAndCommit", _wrap_Solver_SolveAndCommit, METH_VARARGS, NULL},
	 { (char *)"Solver_CheckAssignment", _wrap_Solver_CheckAssignment, METH_VARARGS, NULL},
	 { (char *)"Solver_CheckConstraint", _wrap_Solver_CheckConstraint, METH_VARARGS, NULL},
	 { (char *)"Solver_Fail", _wrap_Solver_Fail, METH_VARARGS, NULL},
	 { (char *)"Solver_MemoryUsage", _wrap_Solver_MemoryUsage, METH_VARARGS, NULL},
	 { (char *)"Solver_WallTime", _wrap_Solver_WallTime, METH_VARARGS, NULL},
	 { (char *)"Solver_Branches", _wrap_Solver_Branches, METH_VARARGS, NULL},
	 { (char *)"Solver_Solutions", _wrap_Solver_Solutions, METH_VARARGS, NULL},
	 { (char *)"Solver_Failures", _wrap_Solver_Failures, METH_VARARGS, NULL},
	 { (char *)"Solver_AcceptedNeighbors", _wrap_Solver_AcceptedNeighbors, METH_VARARGS, NULL},
	 { (char *)"Solver_Stamp", _wrap_Solver_Stamp, METH_VARARGS, NULL},
	 { (char *)"Solver_FailStamp", _wrap_Solver_FailStamp, METH_VARARGS, NULL},
	 { (char *)"Solver_IntVar", _wrap_Solver_IntVar, METH_VARARGS, NULL},
	 { (char *)"Solver_BoolVar", _wrap_Solver_BoolVar, METH_VARARGS, NULL},
	 { (char *)"Solver_IntConst", _wrap_Solver_IntConst, METH_VARARGS, NULL},
	 { (char *)"Solver_Sum", _wrap_Solver_Sum, METH_VARARGS, NULL},
	 { (char *)"Solver_ScalProd", _wrap_Solver_ScalProd, METH_VARARGS, NULL},
	 { (char *)"Solver_MonotonicElement", _wrap_Solver_MonotonicElement, METH_VARARGS, NULL},
	 { (char *)"Solver_Element", _wrap_Solver_Element, METH_VARARGS, NULL},
	 { (char *)"Solver_IndexExpression", _wrap_Solver_IndexExpression, METH_VARARGS, NULL},
	 { (char *)"Solver_Min", _wrap_Solver_Min, METH_VARARGS, NULL},
	 { (char *)"Solver_Max", _wrap_Solver_Max, METH_VARARGS, NULL},
	 { (char *)"Solver_ConvexPiecewiseExpr", _wrap_Solver_ConvexPiecewiseExpr, METH_VARARGS, NULL},
	 { (char *)"Solver_SemiContinuousExpr", _wrap_Solver_SemiContinuousExpr, METH_VARARGS, NULL},
	 { (char *)"Solver_ConditionalExpression", _wrap_Solver_ConditionalExpression, METH_VARARGS, NULL},
	 { (char *)"Solver_TrueConstraint", _wrap_Solver_TrueConstraint, METH_VARARGS, NULL},
	 { (char *)"Solver_FalseConstraint", _wrap_Solver_FalseConstraint, METH_VARARGS, NULL},
	 { (char *)"Solver_IsEqualCstCt", _wrap_Solver_IsEqualCstCt, METH_VARARGS, NULL},
	 { (char *)"Solver_IsEqualCstVar", _wrap_Solver_IsEqualCstVar, METH_VARARGS, NULL},
	 { (char *)"Solver_IsEqualCt", _wrap_Solver_IsEqualCt, METH_VARARGS, NULL},
	 { (char *)"Solver_IsEqualVar", _wrap_Solver_IsEqualVar, METH_VARARGS, NULL},
	 { (char *)"Solver_IsDifferentCstCt", _wrap_Solver_IsDifferentCstCt, METH_VARARGS, NULL},
	 { (char *)"Solver_IsDifferentCstVar", _wrap_Solver_IsDifferentCstVar, METH_VARARGS, NULL},
	 { (char *)"Solver_IsDifferentVar", _wrap_Solver_IsDifferentVar, METH_VARARGS, NULL},
	 { (char *)"Solver_IsDifferentCt", _wrap_Solver_IsDifferentCt, METH_VARARGS, NULL},
	 { (char *)"Solver_IsLessOrEqualCstCt", _wrap_Solver_IsLessOrEqualCstCt, METH_VARARGS, NULL},
	 { (char *)"Solver_IsLessOrEqualCstVar", _wrap_Solver_IsLessOrEqualCstVar, METH_VARARGS, NULL},
	 { (char *)"Solver_IsLessOrEqualVar", _wrap_Solver_IsLessOrEqualVar, METH_VARARGS, NULL},
	 { (char *)"Solver_IsLessOrEqualCt", _wrap_Solver_IsLessOrEqualCt, METH_VARARGS, NULL},
	 { (char *)"Solver_IsGreaterOrEqualCstCt", _wrap_Solver_IsGreaterOrEqualCstCt, METH_VARARGS, NULL},
	 { (char *)"Solver_IsGreaterOrEqualCstVar", _wrap_Solver_IsGreaterOrEqualCstVar, METH_VARARGS, NULL},
	 { (char *)"Solver_IsGreaterOrEqualVar", _wrap_Solver_IsGreaterOrEqualVar, METH_VARARGS, NULL},
	 { (char *)"Solver_IsGreaterOrEqualCt", _wrap_Solver_IsGreaterOrEqualCt, METH_VARARGS, NULL},
	 { (char *)"Solver_IsGreaterCstCt", _wrap_Solver_IsGreaterCstCt, METH_VARARGS, NULL},
	 { (char *)"Solver_IsGreaterCstVar", _wrap_Solver_IsGreaterCstVar, METH_VARARGS, NULL},
	 { (char *)"Solver_IsGreaterVar", _wrap_Solver_IsGreaterVar, METH_VARARGS, NULL},
	 { (char *)"Solver_IsGreaterCt", _wrap_Solver_IsGreaterCt, METH_VARARGS, NULL},
	 { (char *)"Solver_IsLessCstCt", _wrap_Solver_IsLessCstCt, METH_VARARGS, NULL},
	 { (char *)"Solver_IsLessCstVar", _wrap_Solver_IsLessCstVar, METH_VARARGS, NULL},
	 { (char *)"Solver_IsLessVar", _wrap_Solver_IsLessVar, METH_VARARGS, NULL},
	 { (char *)"Solver_IsLessCt", _wrap_Solver_IsLessCt, METH_VARARGS, NULL},
	 { (char *)"Solver_SumLessOrEqual", _wrap_Solver_SumLessOrEqual, METH_VARARGS, NULL},
	 { (char *)"Solver_SumGreaterOrEqual", _wrap_Solver_SumGreaterOrEqual, METH_VARARGS, NULL},
	 { (char *)"Solver_SumEquality", _wrap_Solver_SumEquality, METH_VARARGS, NULL},
	 { (char *)"Solver_ScalProdEquality", _wrap_Solver_ScalProdEquality, METH_VARARGS, NULL},
	 { (char *)"Solver_ScalProdGreaterOrEqual", _wrap_Solver_ScalProdGreaterOrEqual, METH_VARARGS, NULL},
	 { (char *)"Solver_ScalProdLessOrEqual", _wrap_Solver_ScalProdLessOrEqual, METH_VARARGS, NULL},
	 { (char *)"Solver_MinEquality", _wrap_Solver_MinEquality, METH_VARARGS, NULL},
	 { (char *)"Solver_MaxEquality", _wrap_Solver_MaxEquality, METH_VARARGS, NULL},
	 { (char *)"Solver_ElementEquality", _wrap_Solver_ElementEquality, METH_VARARGS, NULL},
	 { (char *)"Solver_AbsEquality", _wrap_Solver_AbsEquality, METH_VARARGS, NULL},
	 { (char *)"Solver_IndexOfConstraint", _wrap_Solver_IndexOfConstraint, METH_VARARGS, NULL},
	 { (char *)"Solver_ConstraintInitialPropagateCallback", _wrap_Solver_ConstraintInitialPropagateCallback, METH_VARARGS, NULL},
	 { (char *)"Solver_DelayedConstraintInitialPropagateCallback", _wrap_Solver_DelayedConstraintInitialPropagateCallback, METH_VARARGS, NULL},
	 { (char *)"Solver_ClosureDemon", _wrap_Solver_ClosureDemon, METH_VARARGS, NULL},
	 { (char *)"Solver_BetweenCt", _wrap_Solver_BetweenCt, METH_VARARGS, NULL},
	 { (char *)"Solver_IsBetweenCt", _wrap_Solver_IsBetweenCt, METH_VARARGS, NULL},
	 { (char *)"Solver_IsBetweenVar", _wrap_Solver_IsBetweenVar, METH_VARARGS, NULL},
	 { (char *)"Solver_MemberCt", _wrap_Solver_MemberCt, METH_VARARGS, NULL},
	 { (char *)"Solver_NotMemberCt", _wrap_Solver_NotMemberCt, METH_VARARGS, NULL},
	 { (char *)"Solver_IsMemberCt", _wrap_Solver_IsMemberCt, METH_VARARGS, NULL},
	 { (char *)"Solver_IsMemberVar", _wrap_Solver_IsMemberVar, METH_VARARGS, NULL},
	 { (char *)"Solver_Count", _wrap_Solver_Count, METH_VARARGS, NULL},
	 { (char *)"Solver_Distribute", _wrap_Solver_Distribute, METH_VARARGS, NULL},
	 { (char *)"Solver_Deviation", _wrap_Solver_Deviation, METH_VARARGS, NULL},
	 { (char *)"Solver_AllDifferent", _wrap_Solver_AllDifferent, METH_VARARGS, NULL},
	 { (char *)"Solver_AllDifferentExcept", _wrap_Solver_AllDifferentExcept, METH_VARARGS, NULL},
	 { (char *)"Solver_SortingConstraint", _wrap_Solver_SortingConstraint, METH_VARARGS, NULL},
	 { (char *)"Solver_LexicalLess", _wrap_Solver_LexicalLess, METH_VARARGS, NULL},
	 { (char *)"Solver_LexicalLessOrEqual", _wrap_Solver_LexicalLessOrEqual, METH_VARARGS, NULL},
	 { (char *)"Solver_InversePermutationConstraint", _wrap_Solver_InversePermutationConstraint, METH_VARARGS, NULL},
	 { (char *)"Solver_NullIntersect", _wrap_Solver_NullIntersect, METH_VARARGS, NULL},
	 { (char *)"Solver_NullIntersectExcept", _wrap_Solver_NullIntersectExcept, METH_VARARGS, NULL},
	 { (char *)"Solver_Circuit", _wrap_Solver_Circuit, METH_VARARGS, NULL},
	 { (char *)"Solver_SubCircuit", _wrap_Solver_SubCircuit, METH_VARARGS, NULL},
	 { (char *)"Solver_DelayedPathCumul", _wrap_Solver_DelayedPathCumul, METH_VARARGS, NULL},
	 { (char *)"Solver_PathCumul", _wrap_Solver_PathCumul, METH_VARARGS, NULL},
	 { (char *)"Solver_AllowedAssignments", _wrap_Solver_AllowedAssignments, METH_VARARGS, NULL},
	 { (char *)"Solver_TransitionConstraint", _wrap_Solver_TransitionConstraint, METH_VARARGS, NULL},
	 { (char *)"Solver_NonOverlappingBoxesConstraint", _wrap_Solver_NonOverlappingBoxesConstraint, METH_VARARGS, NULL},
	 { (char *)"Solver_Pack", _wrap_Solver_Pack, METH_VARARGS, NULL},
	 { (char *)"Solver_FixedDurationIntervalVar", _wrap_Solver_FixedDurationIntervalVar, METH_VARARGS, NULL},
	 { (char *)"Solver_FixedInterval", _wrap_Solver_FixedInterval, METH_VARARGS, NULL},
	 { (char *)"Solver_IntervalVar", _wrap_Solver_IntervalVar, METH_VARARGS, NULL},
	 { (char *)"Solver_MirrorInterval", _wrap_Solver_MirrorInterval, METH_VARARGS, NULL},
	 { (char *)"Solver_FixedDurationStartSyncedOnStartIntervalVar", _wrap_Solver_FixedDurationStartSyncedOnStartIntervalVar, METH_VARARGS, NULL},
	 { (char *)"Solver_FixedDurationStartSyncedOnEndIntervalVar", _wrap_Solver_FixedDurationStartSyncedOnEndIntervalVar, METH_VARARGS, NULL},
	 { (char *)"Solver_FixedDurationEndSyncedOnStartIntervalVar", _wrap_Solver_FixedDurationEndSyncedOnStartIntervalVar, METH_VARARGS, NULL},
	 { (char *)"Solver_FixedDurationEndSyncedOnEndIntervalVar", _wrap_Solver_FixedDurationEndSyncedOnEndIntervalVar, METH_VARARGS, NULL},
	 { (char *)"Solver_IntervalRelaxedMin", _wrap_Solver_IntervalRelaxedMin, METH_VARARGS, NULL},
	 { (char *)"Solver_IntervalRelaxedMax", _wrap_Solver_IntervalRelaxedMax, METH_VARARGS, NULL},
	 { (char *)"Solver_TemporalDisjunction", _wrap_Solver_TemporalDisjunction, METH_VARARGS, NULL},
	 { (char *)"Solver_DisjunctiveConstraint", _wrap_Solver_DisjunctiveConstraint, METH_VARARGS, NULL},
	 { (char *)"Solver_Cumulative", _wrap_Solver_Cumulative, METH_VARARGS, NULL},
	 { (char *)"Solver_Cover", _wrap_Solver_Cover, METH_VARARGS, NULL},
	 { (char *)"Solver_Assignment", _wrap_Solver_Assignment, METH_VARARGS, NULL},
	 { (char *)"Solver_FirstSolutionCollector", _wrap_Solver_FirstSolutionCollector, METH_VARARGS, NULL},
	 { (char *)"Solver_LastSolutionCollector", _wrap_Solver_LastSolutionCollector, METH_VARARGS, NULL},
	 { (char *)"Solver_BestValueSolutionCollector", _wrap_Solver_BestValueSolutionCollector, METH_VARARGS, NULL},
	 { (char *)"Solver_AllSolutionCollector", _wrap_Solver_AllSolutionCollector, METH_VARARGS, NULL},
	 { (char *)"Solver_Minimize", _wrap_Solver_Minimize, METH_VARARGS, NULL},
	 { (char *)"Solver_Maximize", _wrap_Solver_Maximize, METH_VARARGS, NULL},
	 { (char *)"Solver_Optimize", _wrap_Solver_Optimize, METH_VARARGS, NULL},
	 { (char *)"Solver_WeightedMinimize", _wrap_Solver_WeightedMinimize, METH_VARARGS, NULL},
	 { (char *)"Solver_WeightedMaximize", _wrap_Solver_WeightedMaximize, METH_VARARGS, NULL},
	 { (char *)"Solver_WeightedOptimize", _wrap_Solver_WeightedOptimize, METH_VARARGS, NULL},
	 { (char *)"Solver_TabuSearch", _wrap_Solver_TabuSearch, METH_VARARGS, NULL},
	 { (char *)"Solver_SimulatedAnnealing", _wrap_Solver_SimulatedAnnealing, METH_VARARGS, NULL},
	 { (char *)"Solver_LubyRestart", _wrap_Solver_LubyRestart, METH_VARARGS, NULL},
	 { (char *)"Solver_ConstantRestart", _wrap_Solver_ConstantRestart, METH_VARARGS, NULL},
	 { (char *)"Solver_TimeLimit", _wrap_Solver_TimeLimit, METH_VARARGS, NULL},
	 { (char *)"Solver_BranchesLimit", _wrap_Solver_BranchesLimit, METH_VARARGS, NULL},
	 { (char *)"Solver_FailuresLimit", _wrap_Solver_FailuresLimit, METH_VARARGS, NULL},
	 { (char *)"Solver_SolutionsLimit", _wrap_Solver_SolutionsLimit, METH_VARARGS, NULL},
	 { (char *)"Solver_Limit", _wrap_Solver_Limit, METH_VARARGS, NULL},
	 { (char *)"Solver_CustomLimit", _wrap_Solver_CustomLimit, METH_VARARGS, NULL},
	 { (char *)"Solver_SearchLog", _wrap_Solver_SearchLog, METH_VARARGS, NULL},
	 { (char *)"Solver_SearchTrace", _wrap_Solver_SearchTrace, METH_VARARGS, NULL},
	 { (char *)"Solver_PrintModelVisitor", _wrap_Solver_PrintModelVisitor, METH_VARARGS, NULL},
	 { (char *)"Solver_StatisticsModelVisitor", _wrap_Solver_StatisticsModelVisitor, METH_VARARGS, NULL},
	 { (char *)"Solver_AssignVariableValue", _wrap_Solver_AssignVariableValue, METH_VARARGS, NULL},
	 { (char *)"Solver_VariableLessOrEqualValue", _wrap_Solver_VariableLessOrEqualValue, METH_VARARGS, NULL},
	 { (char *)"Solver_VariableGreaterOrEqualValue", _wrap_Solver_VariableGreaterOrEqualValue, METH_VARARGS, NULL},
	 { (char *)"Solver_SplitVariableDomain", _wrap_Solver_SplitVariableDomain, METH_VARARGS, NULL},
	 { (char *)"Solver_AssignVariableValueOrFail", _wrap_Solver_AssignVariableValueOrFail, METH_VARARGS, NULL},
	 { (char *)"Solver_AssignVariablesValues", _wrap_Solver_AssignVariablesValues, METH_VARARGS, NULL},
	 { (char *)"Solver_FailDecision", _wrap_Solver_FailDecision, METH_VARARGS, NULL},
	 { (char *)"Solver_Decision", _wrap_Solver_Decision, METH_VARARGS, NULL},
	 { (char *)"Solver_Compose", _wrap_Solver_Compose, METH_VARARGS, NULL},
	 { (char *)"Solver_Try", _wrap_Solver_Try, METH_VARARGS, NULL},
	 { (char *)"Solver_DefaultPhase", _wrap_Solver_DefaultPhase, METH_VARARGS, NULL},
	 { (char *)"Solver_ScheduleOrPostpone", _wrap_Solver_ScheduleOrPostpone, METH_VARARGS, NULL},
	 { (char *)"Solver_ScheduleOrExpedite", _wrap_Solver_ScheduleOrExpedite, METH_VARARGS, NULL},
	 { (char *)"Solver_RankFirstInterval", _wrap_Solver_RankFirstInterval, METH_VARARGS, NULL},
	 { (char *)"Solver_RankLastInterval", _wrap_Solver_RankLastInterval, METH_VARARGS, NULL},
	 { (char *)"Solver_Phase", _wrap_Solver_Phase, METH_VARARGS, NULL},
	 { (char *)"Solver_DecisionBuilderFromAssignment", _wrap_Solver_DecisionBuilderFromAssignment, METH_VARARGS, NULL},
	 { (char *)"Solver_ConstraintAdder", _wrap_Solver_ConstraintAdder, METH_VARARGS, NULL},
	 { (char *)"Solver_SolveOnce", _wrap_Solver_SolveOnce, METH_VARARGS, NULL},
	 { (char *)"Solver_NestedOptimize", _wrap_Solver_NestedOptimize, METH_VARARGS, NULL},
	 { (char *)"Solver_RestoreAssignment", _wrap_Solver_RestoreAssignment, METH_VARARGS, NULL},
	 { (char *)"Solver_StoreAssignment", _wrap_Solver_StoreAssignment, METH_VARARGS, NULL},
	 { (char *)"Solver_Operator", _wrap_Solver_Operator, METH_VARARGS, NULL},
	 { (char *)"Solver_RandomLnsOperator", _wrap_Solver_RandomLnsOperator, METH_VARARGS, NULL},
	 { (char *)"Solver_MoveTowardTargetOperator", _wrap_Solver_MoveTowardTargetOperator, METH_VARARGS, NULL},
	 { (char *)"Solver_ConcatenateOperators", _wrap_Solver_ConcatenateOperators, METH_VARARGS, NULL},
	 { (char *)"Solver_RandomConcatenateOperators", _wrap_Solver_RandomConcatenateOperators, METH_VARARGS, NULL},
	 { (char *)"Solver_NeighborhoodLimit", _wrap_Solver_NeighborhoodLimit, METH_VARARGS, NULL},
	 { (char *)"Solver_LocalSearchPhase", _wrap_Solver_LocalSearchPhase, METH_VARARGS, NULL},
	 { (char *)"Solver_LocalSearchPhaseParameters", _wrap_Solver_LocalSearchPhaseParameters, METH_VARARGS, NULL},
	 { (char *)"Solver_TopProgressPercent", _wrap_Solver_TopProgressPercent, METH_VARARGS, NULL},
	 { (char *)"Solver_SearchDepth", _wrap_Solver_SearchDepth, METH_VARARGS, NULL},
	 { (char *)"Solver_SearchLeftDepth", _wrap_Solver_SearchLeftDepth, METH_VARARGS, NULL},
	 { (char *)"Solver_SolveDepth", _wrap_Solver_SolveDepth, METH_VARARGS, NULL},
	 { (char *)"Solver_Rand64", _wrap_Solver_Rand64, METH_VARARGS, NULL},
	 { (char *)"Solver_Rand32", _wrap_Solver_Rand32, METH_VARARGS, NULL},
	 { (char *)"Solver_ReSeed", _wrap_Solver_ReSeed, METH_VARARGS, NULL},
	 { (char *)"Solver_LocalSearchProfile", _wrap_Solver_LocalSearchProfile, METH_VARARGS, NULL},
	 { (char *)"Solver_Constraints", _wrap_Solver_Constraints, METH_VARARGS, NULL},
	 { (char *)"Solver_Accept", _wrap_Solver_Accept, METH_VARARGS, NULL},
	 { (char *)"Solver_FinishCurrentSearch", _wrap_Solver_FinishCurrentSearch, METH_VARARGS, NULL},
	 { (char *)"Solver_RestartCurrentSearch", _wrap_Solver_RestartCurrentSearch, METH_VARARGS, NULL},
	 { (char *)"Solver_ShouldFail", _wrap_Solver_ShouldFail, METH_VARARGS, NULL},
	 { (char *)"Solver___str__", _wrap_Solver___str__, METH_VARARGS, NULL},
	 { (char *)"Solver_TreeNoCycle", _wrap_Solver_TreeNoCycle, METH_VARARGS, NULL},
	 { (char *)"Solver_SearchLogWithCallback", _wrap_Solver_SearchLogWithCallback, METH_VARARGS, NULL},
	 { (char *)"Solver_ElementFunction", _wrap_Solver_ElementFunction, METH_VARARGS, NULL},
	 { (char *)"Solver_VarEvalValStrPhase", _wrap_Solver_VarEvalValStrPhase, METH_VARARGS, NULL},
	 { (char *)"Solver_VarStrValEvalPhase", _wrap_Solver_VarStrValEvalPhase, METH_VARARGS, NULL},
	 { (char *)"Solver_VarEvalValEvalPhase", _wrap_Solver_VarEvalValEvalPhase, METH_VARARGS, NULL},
	 { (char *)"Solver_VarStrValEvalTieBreakPhase", _wrap_Solver_VarStrValEvalTieBreakPhase, METH_VARARGS, NULL},
	 { (char *)"Solver_VarEvalValEvalTieBreakPhase", _wrap_Solver_VarEvalValEvalTieBreakPhase, METH_VARARGS, NULL},
	 { (char *)"Solver_EvalEvalStrPhase", _wrap_Solver_EvalEvalStrPhase, METH_VARARGS, NULL},
	 { (char *)"Solver_EvalEvalStrTieBreakPhase", _wrap_Solver_EvalEvalStrTieBreakPhase, METH_VARARGS, NULL},
	 { (char *)"Solver_GuidedLocalSearch", _wrap_Solver_GuidedLocalSearch, METH_VARARGS, NULL},
	 { (char *)"Solver_SumObjectiveFilter", _wrap_Solver_SumObjectiveFilter, METH_VARARGS, NULL},
	 { (char *)"Solver_swigregister", Solver_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BaseObject", _wrap_new_BaseObject, METH_VARARGS, NULL},
	 { (char *)"delete_BaseObject", _wrap_delete_BaseObject, METH_VARARGS, NULL},
	 { (char *)"BaseObject_DebugString", _wrap_BaseObject_DebugString, METH_VARARGS, NULL},
	 { (char *)"BaseObject___str__", _wrap_BaseObject___str__, METH_VARARGS, NULL},
	 { (char *)"BaseObject___repr__", _wrap_BaseObject___repr__, METH_VARARGS, NULL},
	 { (char *)"disown_BaseObject", _wrap_disown_BaseObject, METH_VARARGS, NULL},
	 { (char *)"BaseObject_swigregister", BaseObject_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PropagationBaseObject", _wrap_new_PropagationBaseObject, METH_VARARGS, NULL},
	 { (char *)"delete_PropagationBaseObject", _wrap_delete_PropagationBaseObject, METH_VARARGS, NULL},
	 { (char *)"PropagationBaseObject_DebugString", _wrap_PropagationBaseObject_DebugString, METH_VARARGS, NULL},
	 { (char *)"PropagationBaseObject_solver", _wrap_PropagationBaseObject_solver, METH_VARARGS, NULL},
	 { (char *)"PropagationBaseObject_Name", _wrap_PropagationBaseObject_Name, METH_VARARGS, NULL},
	 { (char *)"disown_PropagationBaseObject", _wrap_disown_PropagationBaseObject, METH_VARARGS, NULL},
	 { (char *)"PropagationBaseObject_swigregister", PropagationBaseObject_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Decision", _wrap_new_Decision, METH_VARARGS, NULL},
	 { (char *)"delete_Decision", _wrap_delete_Decision, METH_VARARGS, NULL},
	 { (char *)"Decision_ApplyWrapper", _wrap_Decision_ApplyWrapper, METH_VARARGS, NULL},
	 { (char *)"Decision_RefuteWrapper", _wrap_Decision_RefuteWrapper, METH_VARARGS, NULL},
	 { (char *)"Decision_DebugString", _wrap_Decision_DebugString, METH_VARARGS, NULL},
	 { (char *)"Decision___repr__", _wrap_Decision___repr__, METH_VARARGS, NULL},
	 { (char *)"Decision___str__", _wrap_Decision___str__, METH_VARARGS, NULL},
	 { (char *)"disown_Decision", _wrap_disown_Decision, METH_VARARGS, NULL},
	 { (char *)"Decision_swigregister", Decision_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_DecisionBuilder", _wrap_new_DecisionBuilder, METH_VARARGS, NULL},
	 { (char *)"delete_DecisionBuilder", _wrap_delete_DecisionBuilder, METH_VARARGS, NULL},
	 { (char *)"DecisionBuilder_NextWrapper", _wrap_DecisionBuilder_NextWrapper, METH_VARARGS, NULL},
	 { (char *)"DecisionBuilder_DebugString", _wrap_DecisionBuilder_DebugString, METH_VARARGS, NULL},
	 { (char *)"DecisionBuilder___repr__", _wrap_DecisionBuilder___repr__, METH_VARARGS, NULL},
	 { (char *)"DecisionBuilder___str__", _wrap_DecisionBuilder___str__, METH_VARARGS, NULL},
	 { (char *)"disown_DecisionBuilder", _wrap_disown_DecisionBuilder, METH_VARARGS, NULL},
	 { (char *)"DecisionBuilder_swigregister", DecisionBuilder_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Demon", _wrap_new_Demon, METH_VARARGS, NULL},
	 { (char *)"delete_Demon", _wrap_delete_Demon, METH_VARARGS, NULL},
	 { (char *)"Demon_RunWrapper", _wrap_Demon_RunWrapper, METH_VARARGS, NULL},
	 { (char *)"Demon_Priority", _wrap_Demon_Priority, METH_VARARGS, NULL},
	 { (char *)"Demon_DebugString", _wrap_Demon_DebugString, METH_VARARGS, NULL},
	 { (char *)"Demon_Inhibit", _wrap_Demon_Inhibit, METH_VARARGS, NULL},
	 { (char *)"Demon_Desinhibit", _wrap_Demon_Desinhibit, METH_VARARGS, NULL},
	 { (char *)"disown_Demon", _wrap_disown_Demon, METH_VARARGS, NULL},
	 { (char *)"Demon_swigregister", Demon_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Constraint", _wrap_new_Constraint, METH_VARARGS, NULL},
	 { (char *)"delete_Constraint", _wrap_delete_Constraint, METH_VARARGS, NULL},
	 { (char *)"Constraint_Post", _wrap_Constraint_Post, METH_VARARGS, NULL},
	 { (char *)"Constraint_InitialPropagateWrapper", _wrap_Constraint_InitialPropagateWrapper, METH_VARARGS, NULL},
	 { (char *)"Constraint_DebugString", _wrap_Constraint_DebugString, METH_VARARGS, NULL},
	 { (char *)"Constraint_Var", _wrap_Constraint_Var, METH_VARARGS, NULL},
	 { (char *)"Constraint___repr__", _wrap_Constraint___repr__, METH_VARARGS, NULL},
	 { (char *)"Constraint___str__", _wrap_Constraint___str__, METH_VARARGS, NULL},
	 { (char *)"Constraint___add__", _wrap_Constraint___add__, METH_VARARGS, NULL},
	 { (char *)"Constraint___radd__", _wrap_Constraint___radd__, METH_VARARGS, NULL},
	 { (char *)"Constraint___sub__", _wrap_Constraint___sub__, METH_VARARGS, NULL},
	 { (char *)"Constraint___rsub__", _wrap_Constraint___rsub__, METH_VARARGS, NULL},
	 { (char *)"Constraint___mul__", _wrap_Constraint___mul__, METH_VARARGS, NULL},
	 { (char *)"Constraint___rmul__", _wrap_Constraint___rmul__, METH_VARARGS, NULL},
	 { (char *)"Constraint___floordiv__", _wrap_Constraint___floordiv__, METH_VARARGS, NULL},
	 { (char *)"Constraint___neg__", _wrap_Constraint___neg__, METH_VARARGS, NULL},
	 { (char *)"Constraint___abs__", _wrap_Constraint___abs__, METH_VARARGS, NULL},
	 { (char *)"Constraint_Square", _wrap_Constraint_Square, METH_VARARGS, NULL},
	 { (char *)"Constraint___eq__", _wrap_Constraint___eq__, METH_VARARGS, NULL},
	 { (char *)"Constraint___ne__", _wrap_Constraint___ne__, METH_VARARGS, NULL},
	 { (char *)"Constraint___ge__", _wrap_Constraint___ge__, METH_VARARGS, NULL},
	 { (char *)"Constraint___gt__", _wrap_Constraint___gt__, METH_VARARGS, NULL},
	 { (char *)"Constraint___le__", _wrap_Constraint___le__, METH_VARARGS, NULL},
	 { (char *)"Constraint___lt__", _wrap_Constraint___lt__, METH_VARARGS, NULL},
	 { (char *)"Constraint_MapTo", _wrap_Constraint_MapTo, METH_VARARGS, NULL},
	 { (char *)"Constraint_IndexOf", _wrap_Constraint_IndexOf, METH_VARARGS, NULL},
	 { (char *)"disown_Constraint", _wrap_disown_Constraint, METH_VARARGS, NULL},
	 { (char *)"Constraint_swigregister", Constraint_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SearchMonitor", _wrap_new_SearchMonitor, METH_VARARGS, NULL},
	 { (char *)"delete_SearchMonitor", _wrap_delete_SearchMonitor, METH_VARARGS, NULL},
	 { (char *)"SearchMonitor_EnterSearch", _wrap_SearchMonitor_EnterSearch, METH_VARARGS, NULL},
	 { (char *)"SearchMonitor_RestartSearch", _wrap_SearchMonitor_RestartSearch, METH_VARARGS, NULL},
	 { (char *)"SearchMonitor_ExitSearch", _wrap_SearchMonitor_ExitSearch, METH_VARARGS, NULL},
	 { (char *)"SearchMonitor_BeginNextDecision", _wrap_SearchMonitor_BeginNextDecision, METH_VARARGS, NULL},
	 { (char *)"SearchMonitor_EndNextDecision", _wrap_SearchMonitor_EndNextDecision, METH_VARARGS, NULL},
	 { (char *)"SearchMonitor_ApplyDecision", _wrap_SearchMonitor_ApplyDecision, METH_VARARGS, NULL},
	 { (char *)"SearchMonitor_RefuteDecision", _wrap_SearchMonitor_RefuteDecision, METH_VARARGS, NULL},
	 { (char *)"SearchMonitor_AfterDecision", _wrap_SearchMonitor_AfterDecision, METH_VARARGS, NULL},
	 { (char *)"SearchMonitor_BeginFail", _wrap_SearchMonitor_BeginFail, METH_VARARGS, NULL},
	 { (char *)"SearchMonitor_EndFail", _wrap_SearchMonitor_EndFail, METH_VARARGS, NULL},
	 { (char *)"SearchMonitor_BeginInitialPropagation", _wrap_SearchMonitor_BeginInitialPropagation, METH_VARARGS, NULL},
	 { (char *)"SearchMonitor_EndInitialPropagation", _wrap_SearchMonitor_EndInitialPropagation, METH_VARARGS, NULL},
	 { (char *)"SearchMonitor_AcceptSolution", _wrap_SearchMonitor_AcceptSolution, METH_VARARGS, NULL},
	 { (char *)"SearchMonitor_AtSolution", _wrap_SearchMonitor_AtSolution, METH_VARARGS, NULL},
	 { (char *)"SearchMonitor_NoMoreSolutions", _wrap_SearchMonitor_NoMoreSolutions, METH_VARARGS, NULL},
	 { (char *)"SearchMonitor_LocalOptimum", _wrap_SearchMonitor_LocalOptimum, METH_VARARGS, NULL},
	 { (char *)"SearchMonitor_AcceptDelta", _wrap_SearchMonitor_AcceptDelta, METH_VARARGS, NULL},
	 { (char *)"SearchMonitor_AcceptNeighbor", _wrap_SearchMonitor_AcceptNeighbor, METH_VARARGS, NULL},
	 { (char *)"SearchMonitor_ProgressPercent", _wrap_SearchMonitor_ProgressPercent, METH_VARARGS, NULL},
	 { (char *)"SearchMonitor_solver", _wrap_SearchMonitor_solver, METH_VARARGS, NULL},
	 { (char *)"SearchMonitor___repr__", _wrap_SearchMonitor___repr__, METH_VARARGS, NULL},
	 { (char *)"SearchMonitor___str__", _wrap_SearchMonitor___str__, METH_VARARGS, NULL},
	 { (char *)"disown_SearchMonitor", _wrap_disown_SearchMonitor, METH_VARARGS, NULL},
	 { (char *)"SearchMonitor_swigregister", SearchMonitor_swigregister, METH_VARARGS, NULL},
	 { (char *)"IntExpr_Min", _wrap_IntExpr_Min, METH_VARARGS, NULL},
	 { (char *)"IntExpr_SetMin", _wrap_IntExpr_SetMin, METH_VARARGS, NULL},
	 { (char *)"IntExpr_Max", _wrap_IntExpr_Max, METH_VARARGS, NULL},
	 { (char *)"IntExpr_SetMax", _wrap_IntExpr_SetMax, METH_VARARGS, NULL},
	 { (char *)"IntExpr_SetRange", _wrap_IntExpr_SetRange, METH_VARARGS, NULL},
	 { (char *)"IntExpr_SetValue", _wrap_IntExpr_SetValue, METH_VARARGS, NULL},
	 { (char *)"IntExpr_Bound", _wrap_IntExpr_Bound, METH_VARARGS, NULL},
	 { (char *)"IntExpr_IsVar", _wrap_IntExpr_IsVar, METH_VARARGS, NULL},
	 { (char *)"IntExpr_Var", _wrap_IntExpr_Var, METH_VARARGS, NULL},
	 { (char *)"IntExpr_VarWithName", _wrap_IntExpr_VarWithName, METH_VARARGS, NULL},
	 { (char *)"IntExpr_WhenRange", _wrap_IntExpr_WhenRange, METH_VARARGS, NULL},
	 { (char *)"IntExpr___repr__", _wrap_IntExpr___repr__, METH_VARARGS, NULL},
	 { (char *)"IntExpr___str__", _wrap_IntExpr___str__, METH_VARARGS, NULL},
	 { (char *)"IntExpr___add__", _wrap_IntExpr___add__, METH_VARARGS, NULL},
	 { (char *)"IntExpr___radd__", _wrap_IntExpr___radd__, METH_VARARGS, NULL},
	 { (char *)"IntExpr___sub__", _wrap_IntExpr___sub__, METH_VARARGS, NULL},
	 { (char *)"IntExpr___rsub__", _wrap_IntExpr___rsub__, METH_VARARGS, NULL},
	 { (char *)"IntExpr___mul__", _wrap_IntExpr___mul__, METH_VARARGS, NULL},
	 { (char *)"IntExpr___rmul__", _wrap_IntExpr___rmul__, METH_VARARGS, NULL},
	 { (char *)"IntExpr___floordiv__", _wrap_IntExpr___floordiv__, METH_VARARGS, NULL},
	 { (char *)"IntExpr___mod__", _wrap_IntExpr___mod__, METH_VARARGS, NULL},
	 { (char *)"IntExpr___neg__", _wrap_IntExpr___neg__, METH_VARARGS, NULL},
	 { (char *)"IntExpr___abs__", _wrap_IntExpr___abs__, METH_VARARGS, NULL},
	 { (char *)"IntExpr_Square", _wrap_IntExpr_Square, METH_VARARGS, NULL},
	 { (char *)"IntExpr___eq__", _wrap_IntExpr___eq__, METH_VARARGS, NULL},
	 { (char *)"IntExpr___ne__", _wrap_IntExpr___ne__, METH_VARARGS, NULL},
	 { (char *)"IntExpr___ge__", _wrap_IntExpr___ge__, METH_VARARGS, NULL},
	 { (char *)"IntExpr___gt__", _wrap_IntExpr___gt__, METH_VARARGS, NULL},
	 { (char *)"IntExpr___le__", _wrap_IntExpr___le__, METH_VARARGS, NULL},
	 { (char *)"IntExpr___lt__", _wrap_IntExpr___lt__, METH_VARARGS, NULL},
	 { (char *)"IntExpr_MapTo", _wrap_IntExpr_MapTo, METH_VARARGS, NULL},
	 { (char *)"IntExpr_IndexOf", _wrap_IntExpr_IndexOf, METH_VARARGS, NULL},
	 { (char *)"IntExpr_IsMember", _wrap_IntExpr_IsMember, METH_VARARGS, NULL},
	 { (char *)"IntExpr_Member", _wrap_IntExpr_Member, METH_VARARGS, NULL},
	 { (char *)"IntExpr_NotMember", _wrap_IntExpr_NotMember, METH_VARARGS, NULL},
	 { (char *)"IntExpr_swigregister", IntExpr_swigregister, METH_VARARGS, NULL},
	 { (char *)"IntVarIterator_Init", _wrap_IntVarIterator_Init, METH_VARARGS, NULL},
	 { (char *)"IntVarIterator_Ok", _wrap_IntVarIterator_Ok, METH_VARARGS, NULL},
	 { (char *)"IntVarIterator_Value", _wrap_IntVarIterator_Value, METH_VARARGS, NULL},
	 { (char *)"IntVarIterator_Next", _wrap_IntVarIterator_Next, METH_VARARGS, NULL},
	 { (char *)"IntVarIterator_DebugString", _wrap_IntVarIterator_DebugString, METH_VARARGS, NULL},
	 { (char *)"IntVarIterator_swigregister", IntVarIterator_swigregister, METH_VARARGS, NULL},
	 { (char *)"IntVar_IsVar", _wrap_IntVar_IsVar, METH_VARARGS, NULL},
	 { (char *)"IntVar_Var", _wrap_IntVar_Var, METH_VARARGS, NULL},
	 { (char *)"IntVar_Value", _wrap_IntVar_Value, METH_VARARGS, NULL},
	 { (char *)"IntVar_RemoveValue", _wrap_IntVar_RemoveValue, METH_VARARGS, NULL},
	 { (char *)"IntVar_RemoveInterval", _wrap_IntVar_RemoveInterval, METH_VARARGS, NULL},
	 { (char *)"IntVar_RemoveValues", _wrap_IntVar_RemoveValues, METH_VARARGS, NULL},
	 { (char *)"IntVar_SetValues", _wrap_IntVar_SetValues, METH_VARARGS, NULL},
	 { (char *)"IntVar_WhenBound", _wrap_IntVar_WhenBound, METH_VARARGS, NULL},
	 { (char *)"IntVar_WhenDomain", _wrap_IntVar_WhenDomain, METH_VARARGS, NULL},
	 { (char *)"IntVar_Size", _wrap_IntVar_Size, METH_VARARGS, NULL},
	 { (char *)"IntVar_Contains", _wrap_IntVar_Contains, METH_VARARGS, NULL},
	 { (char *)"IntVar_HoleIteratorAux", _wrap_IntVar_HoleIteratorAux, METH_VARARGS, NULL},
	 { (char *)"IntVar_DomainIteratorAux", _wrap_IntVar_DomainIteratorAux, METH_VARARGS, NULL},
	 { (char *)"IntVar_OldMin", _wrap_IntVar_OldMin, METH_VARARGS, NULL},
	 { (char *)"IntVar_OldMax", _wrap_IntVar_OldMax, METH_VARARGS, NULL},
	 { (char *)"IntVar___repr__", _wrap_IntVar___repr__, METH_VARARGS, NULL},
	 { (char *)"IntVar___str__", _wrap_IntVar___str__, METH_VARARGS, NULL},
	 { (char *)"IntVar_swigregister", IntVar_swigregister, METH_VARARGS, NULL},
	 { (char *)"SolutionCollector_DebugString", _wrap_SolutionCollector_DebugString, METH_VARARGS, NULL},
	 { (char *)"SolutionCollector_Add", _wrap_SolutionCollector_Add, METH_VARARGS, NULL},
	 { (char *)"SolutionCollector_AddObjective", _wrap_SolutionCollector_AddObjective, METH_VARARGS, NULL},
	 { (char *)"SolutionCollector_EnterSearch", _wrap_SolutionCollector_EnterSearch, METH_VARARGS, NULL},
	 { (char *)"SolutionCollector_SolutionCount", _wrap_SolutionCollector_SolutionCount, METH_VARARGS, NULL},
	 { (char *)"SolutionCollector_Solution", _wrap_SolutionCollector_Solution, METH_VARARGS, NULL},
	 { (char *)"SolutionCollector_WallTime", _wrap_SolutionCollector_WallTime, METH_VARARGS, NULL},
	 { (char *)"SolutionCollector_Branches", _wrap_SolutionCollector_Branches, METH_VARARGS, NULL},
	 { (char *)"SolutionCollector_Failures", _wrap_SolutionCollector_Failures, METH_VARARGS, NULL},
	 { (char *)"SolutionCollector_ObjectiveValue", _wrap_SolutionCollector_ObjectiveValue, METH_VARARGS, NULL},
	 { (char *)"SolutionCollector_Value", _wrap_SolutionCollector_Value, METH_VARARGS, NULL},
	 { (char *)"SolutionCollector_StartValue", _wrap_SolutionCollector_StartValue, METH_VARARGS, NULL},
	 { (char *)"SolutionCollector_EndValue", _wrap_SolutionCollector_EndValue, METH_VARARGS, NULL},
	 { (char *)"SolutionCollector_DurationValue", _wrap_SolutionCollector_DurationValue, METH_VARARGS, NULL},
	 { (char *)"SolutionCollector_PerformedValue", _wrap_SolutionCollector_PerformedValue, METH_VARARGS, NULL},
	 { (char *)"SolutionCollector_ForwardSequence", _wrap_SolutionCollector_ForwardSequence, METH_VARARGS, NULL},
	 { (char *)"SolutionCollector_BackwardSequence", _wrap_SolutionCollector_BackwardSequence, METH_VARARGS, NULL},
	 { (char *)"SolutionCollector_Unperformed", _wrap_SolutionCollector_Unperformed, METH_VARARGS, NULL},
	 { (char *)"SolutionCollector_swigregister", SolutionCollector_swigregister, METH_VARARGS, NULL},
	 { (char *)"OptimizeVar_Best", _wrap_OptimizeVar_Best, METH_VARARGS, NULL},
	 { (char *)"OptimizeVar_BeginNextDecision", _wrap_OptimizeVar_BeginNextDecision, METH_VARARGS, NULL},
	 { (char *)"OptimizeVar_RefuteDecision", _wrap_OptimizeVar_RefuteDecision, METH_VARARGS, NULL},
	 { (char *)"OptimizeVar_AtSolution", _wrap_OptimizeVar_AtSolution, METH_VARARGS, NULL},
	 { (char *)"OptimizeVar_AcceptSolution", _wrap_OptimizeVar_AcceptSolution, METH_VARARGS, NULL},
	 { (char *)"OptimizeVar_DebugString", _wrap_OptimizeVar_DebugString, METH_VARARGS, NULL},
	 { (char *)"delete_OptimizeVar", _wrap_delete_OptimizeVar, METH_VARARGS, NULL},
	 { (char *)"OptimizeVar_swigregister", OptimizeVar_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_SearchLimit", _wrap_delete_SearchLimit, METH_VARARGS, NULL},
	 { (char *)"SearchLimit_Crossed", _wrap_SearchLimit_Crossed, METH_VARARGS, NULL},
	 { (char *)"SearchLimit_Check", _wrap_SearchLimit_Check, METH_VARARGS, NULL},
	 { (char *)"SearchLimit_Init", _wrap_SearchLimit_Init, METH_VARARGS, NULL},
	 { (char *)"SearchLimit_EnterSearch", _wrap_SearchLimit_EnterSearch, METH_VARARGS, NULL},
	 { (char *)"SearchLimit_BeginNextDecision", _wrap_SearchLimit_BeginNextDecision, METH_VARARGS, NULL},
	 { (char *)"SearchLimit_RefuteDecision", _wrap_SearchLimit_RefuteDecision, METH_VARARGS, NULL},
	 { (char *)"SearchLimit_DebugString", _wrap_SearchLimit_DebugString, METH_VARARGS, NULL},
	 { (char *)"SearchLimit_swigregister", SearchLimit_swigregister, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_StartMin", _wrap_IntervalVar_StartMin, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_StartMax", _wrap_IntervalVar_StartMax, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_SetStartMin", _wrap_IntervalVar_SetStartMin, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_SetStartMax", _wrap_IntervalVar_SetStartMax, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_SetStartRange", _wrap_IntervalVar_SetStartRange, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_OldStartMin", _wrap_IntervalVar_OldStartMin, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_OldStartMax", _wrap_IntervalVar_OldStartMax, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_WhenStartRange", _wrap_IntervalVar_WhenStartRange, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_WhenStartBound", _wrap_IntervalVar_WhenStartBound, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_DurationMin", _wrap_IntervalVar_DurationMin, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_DurationMax", _wrap_IntervalVar_DurationMax, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_SetDurationMin", _wrap_IntervalVar_SetDurationMin, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_SetDurationMax", _wrap_IntervalVar_SetDurationMax, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_SetDurationRange", _wrap_IntervalVar_SetDurationRange, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_OldDurationMin", _wrap_IntervalVar_OldDurationMin, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_OldDurationMax", _wrap_IntervalVar_OldDurationMax, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_WhenDurationRange", _wrap_IntervalVar_WhenDurationRange, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_WhenDurationBound", _wrap_IntervalVar_WhenDurationBound, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_EndMin", _wrap_IntervalVar_EndMin, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_EndMax", _wrap_IntervalVar_EndMax, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_SetEndMin", _wrap_IntervalVar_SetEndMin, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_SetEndMax", _wrap_IntervalVar_SetEndMax, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_SetEndRange", _wrap_IntervalVar_SetEndRange, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_OldEndMin", _wrap_IntervalVar_OldEndMin, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_OldEndMax", _wrap_IntervalVar_OldEndMax, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_WhenEndRange", _wrap_IntervalVar_WhenEndRange, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_WhenEndBound", _wrap_IntervalVar_WhenEndBound, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_MustBePerformed", _wrap_IntervalVar_MustBePerformed, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_MayBePerformed", _wrap_IntervalVar_MayBePerformed, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_CannotBePerformed", _wrap_IntervalVar_CannotBePerformed, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_IsPerformedBound", _wrap_IntervalVar_IsPerformedBound, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_SetPerformed", _wrap_IntervalVar_SetPerformed, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_WasPerformedBound", _wrap_IntervalVar_WasPerformedBound, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_WhenPerformedBound", _wrap_IntervalVar_WhenPerformedBound, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_WhenAnything", _wrap_IntervalVar_WhenAnything, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_StartExpr", _wrap_IntervalVar_StartExpr, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_DurationExpr", _wrap_IntervalVar_DurationExpr, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_EndExpr", _wrap_IntervalVar_EndExpr, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_PerformedExpr", _wrap_IntervalVar_PerformedExpr, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_SafeStartExpr", _wrap_IntervalVar_SafeStartExpr, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_SafeDurationExpr", _wrap_IntervalVar_SafeDurationExpr, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_SafeEndExpr", _wrap_IntervalVar_SafeEndExpr, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_EndsAfterEnd", _wrap_IntervalVar_EndsAfterEnd, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_EndsAfterEndWithDelay", _wrap_IntervalVar_EndsAfterEndWithDelay, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_EndsAfterStart", _wrap_IntervalVar_EndsAfterStart, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_EndsAfterStartWithDelay", _wrap_IntervalVar_EndsAfterStartWithDelay, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_EndsAtEnd", _wrap_IntervalVar_EndsAtEnd, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_EndsAtEndWithDelay", _wrap_IntervalVar_EndsAtEndWithDelay, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_EndsAtStart", _wrap_IntervalVar_EndsAtStart, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_EndsAtStartWithDelay", _wrap_IntervalVar_EndsAtStartWithDelay, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_StartsAfterEnd", _wrap_IntervalVar_StartsAfterEnd, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_StartsAfterEndWithDelay", _wrap_IntervalVar_StartsAfterEndWithDelay, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_StartsAfterStart", _wrap_IntervalVar_StartsAfterStart, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_StartsAfterStartWithDelay", _wrap_IntervalVar_StartsAfterStartWithDelay, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_StartsAtEnd", _wrap_IntervalVar_StartsAtEnd, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_StartsAtEndWithDelay", _wrap_IntervalVar_StartsAtEndWithDelay, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_StartsAtStart", _wrap_IntervalVar_StartsAtStart, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_StartsAtStartWithDelay", _wrap_IntervalVar_StartsAtStartWithDelay, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_StaysInSync", _wrap_IntervalVar_StaysInSync, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_StaysInSyncWithDelay", _wrap_IntervalVar_StaysInSyncWithDelay, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_EndsAfter", _wrap_IntervalVar_EndsAfter, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_EndsAt", _wrap_IntervalVar_EndsAt, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_EndsBefore", _wrap_IntervalVar_EndsBefore, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_StartsAfter", _wrap_IntervalVar_StartsAfter, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_StartsAt", _wrap_IntervalVar_StartsAt, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_StartsBefore", _wrap_IntervalVar_StartsBefore, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_CrossesDate", _wrap_IntervalVar_CrossesDate, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_AvoidsDate", _wrap_IntervalVar_AvoidsDate, METH_VARARGS, NULL},
	 { (char *)"IntervalVar___repr__", _wrap_IntervalVar___repr__, METH_VARARGS, NULL},
	 { (char *)"IntervalVar___str__", _wrap_IntervalVar___str__, METH_VARARGS, NULL},
	 { (char *)"IntervalVar_swigregister", IntervalVar_swigregister, METH_VARARGS, NULL},
	 { (char *)"SequenceVar_DebugString", _wrap_SequenceVar_DebugString, METH_VARARGS, NULL},
	 { (char *)"SequenceVar_RankFirst", _wrap_SequenceVar_RankFirst, METH_VARARGS, NULL},
	 { (char *)"SequenceVar_RankNotFirst", _wrap_SequenceVar_RankNotFirst, METH_VARARGS, NULL},
	 { (char *)"SequenceVar_RankLast", _wrap_SequenceVar_RankLast, METH_VARARGS, NULL},
	 { (char *)"SequenceVar_RankNotLast", _wrap_SequenceVar_RankNotLast, METH_VARARGS, NULL},
	 { (char *)"SequenceVar_Interval", _wrap_SequenceVar_Interval, METH_VARARGS, NULL},
	 { (char *)"SequenceVar_Next", _wrap_SequenceVar_Next, METH_VARARGS, NULL},
	 { (char *)"SequenceVar_Size", _wrap_SequenceVar_Size, METH_VARARGS, NULL},
	 { (char *)"SequenceVar___repr__", _wrap_SequenceVar___repr__, METH_VARARGS, NULL},
	 { (char *)"SequenceVar___str__", _wrap_SequenceVar___str__, METH_VARARGS, NULL},
	 { (char *)"SequenceVar_swigregister", SequenceVar_swigregister, METH_VARARGS, NULL},
	 { (char *)"AssignmentElement_Activate", _wrap_AssignmentElement_Activate, METH_VARARGS, NULL},
	 { (char *)"AssignmentElement_Deactivate", _wrap_AssignmentElement_Deactivate, METH_VARARGS, NULL},
	 { (char *)"AssignmentElement_Activated", _wrap_AssignmentElement_Activated, METH_VARARGS, NULL},
	 { (char *)"delete_AssignmentElement", _wrap_delete_AssignmentElement, METH_VARARGS, NULL},
	 { (char *)"AssignmentElement_swigregister", AssignmentElement_swigregister, METH_VARARGS, NULL},
	 { (char *)"IntVarElement_Var", _wrap_IntVarElement_Var, METH_VARARGS, NULL},
	 { (char *)"IntVarElement_Min", _wrap_IntVarElement_Min, METH_VARARGS, NULL},
	 { (char *)"IntVarElement_SetMin", _wrap_IntVarElement_SetMin, METH_VARARGS, NULL},
	 { (char *)"IntVarElement_Max", _wrap_IntVarElement_Max, METH_VARARGS, NULL},
	 { (char *)"IntVarElement_SetMax", _wrap_IntVarElement_SetMax, METH_VARARGS, NULL},
	 { (char *)"IntVarElement_Value", _wrap_IntVarElement_Value, METH_VARARGS, NULL},
	 { (char *)"IntVarElement_Bound", _wrap_IntVarElement_Bound, METH_VARARGS, NULL},
	 { (char *)"IntVarElement_SetRange", _wrap_IntVarElement_SetRange, METH_VARARGS, NULL},
	 { (char *)"IntVarElement_SetValue", _wrap_IntVarElement_SetValue, METH_VARARGS, NULL},
	 { (char *)"IntVarElement___eq__", _wrap_IntVarElement___eq__, METH_VARARGS, NULL},
	 { (char *)"IntVarElement___ne__", _wrap_IntVarElement___ne__, METH_VARARGS, NULL},
	 { (char *)"delete_IntVarElement", _wrap_delete_IntVarElement, METH_VARARGS, NULL},
	 { (char *)"IntVarElement_swigregister", IntVarElement_swigregister, METH_VARARGS, NULL},
	 { (char *)"IntervalVarElement_Var", _wrap_IntervalVarElement_Var, METH_VARARGS, NULL},
	 { (char *)"IntervalVarElement_StartMin", _wrap_IntervalVarElement_StartMin, METH_VARARGS, NULL},
	 { (char *)"IntervalVarElement_StartMax", _wrap_IntervalVarElement_StartMax, METH_VARARGS, NULL},
	 { (char *)"IntervalVarElement_StartValue", _wrap_IntervalVarElement_StartValue, METH_VARARGS, NULL},
	 { (char *)"IntervalVarElement_DurationMin", _wrap_IntervalVarElement_DurationMin, METH_VARARGS, NULL},
	 { (char *)"IntervalVarElement_DurationMax", _wrap_IntervalVarElement_DurationMax, METH_VARARGS, NULL},
	 { (char *)"IntervalVarElement_DurationValue", _wrap_IntervalVarElement_DurationValue, METH_VARARGS, NULL},
	 { (char *)"IntervalVarElement_EndMin", _wrap_IntervalVarElement_EndMin, METH_VARARGS, NULL},
	 { (char *)"IntervalVarElement_EndMax", _wrap_IntervalVarElement_EndMax, METH_VARARGS, NULL},
	 { (char *)"IntervalVarElement_EndValue", _wrap_IntervalVarElement_EndValue, METH_VARARGS, NULL},
	 { (char *)"IntervalVarElement_PerformedMin", _wrap_IntervalVarElement_PerformedMin, METH_VARARGS, NULL},
	 { (char *)"IntervalVarElement_PerformedMax", _wrap_IntervalVarElement_PerformedMax, METH_VARARGS, NULL},
	 { (char *)"IntervalVarElement_PerformedValue", _wrap_IntervalVarElement_PerformedValue, METH_VARARGS, NULL},
	 { (char *)"IntervalVarElement_SetStartMin", _wrap_IntervalVarElement_SetStartMin, METH_VARARGS, NULL},
	 { (char *)"IntervalVarElement_SetStartMax", _wrap_IntervalVarElement_SetStartMax, METH_VARARGS, NULL},
	 { (char *)"IntervalVarElement_SetStartRange", _wrap_IntervalVarElement_SetStartRange, METH_VARARGS, NULL},
	 { (char *)"IntervalVarElement_SetStartValue", _wrap_IntervalVarElement_SetStartValue, METH_VARARGS, NULL},
	 { (char *)"IntervalVarElement_SetDurationMin", _wrap_IntervalVarElement_SetDurationMin, METH_VARARGS, NULL},
	 { (char *)"IntervalVarElement_SetDurationMax", _wrap_IntervalVarElement_SetDurationMax, METH_VARARGS, NULL},
	 { (char *)"IntervalVarElement_SetDurationRange", _wrap_IntervalVarElement_SetDurationRange, METH_VARARGS, NULL},
	 { (char *)"IntervalVarElement_SetDurationValue", _wrap_IntervalVarElement_SetDurationValue, METH_VARARGS, NULL},
	 { (char *)"IntervalVarElement_SetEndMin", _wrap_IntervalVarElement_SetEndMin, METH_VARARGS, NULL},
	 { (char *)"IntervalVarElement_SetEndMax", _wrap_IntervalVarElement_SetEndMax, METH_VARARGS, NULL},
	 { (char *)"IntervalVarElement_SetEndRange", _wrap_IntervalVarElement_SetEndRange, METH_VARARGS, NULL},
	 { (char *)"IntervalVarElement_SetEndValue", _wrap_IntervalVarElement_SetEndValue, METH_VARARGS, NULL},
	 { (char *)"IntervalVarElement_SetPerformedMin", _wrap_IntervalVarElement_SetPerformedMin, METH_VARARGS, NULL},
	 { (char *)"IntervalVarElement_SetPerformedMax", _wrap_IntervalVarElement_SetPerformedMax, METH_VARARGS, NULL},
	 { (char *)"IntervalVarElement_SetPerformedRange", _wrap_IntervalVarElement_SetPerformedRange, METH_VARARGS, NULL},
	 { (char *)"IntervalVarElement_SetPerformedValue", _wrap_IntervalVarElement_SetPerformedValue, METH_VARARGS, NULL},
	 { (char *)"IntervalVarElement___eq__", _wrap_IntervalVarElement___eq__, METH_VARARGS, NULL},
	 { (char *)"IntervalVarElement___ne__", _wrap_IntervalVarElement___ne__, METH_VARARGS, NULL},
	 { (char *)"delete_IntervalVarElement", _wrap_delete_IntervalVarElement, METH_VARARGS, NULL},
	 { (char *)"IntervalVarElement_swigregister", IntervalVarElement_swigregister, METH_VARARGS, NULL},
	 { (char *)"SequenceVarElement_Var", _wrap_SequenceVarElement_Var, METH_VARARGS, NULL},
	 { (char *)"SequenceVarElement_ForwardSequence", _wrap_SequenceVarElement_ForwardSequence, METH_VARARGS, NULL},
	 { (char *)"SequenceVarElement_BackwardSequence", _wrap_SequenceVarElement_BackwardSequence, METH_VARARGS, NULL},
	 { (char *)"SequenceVarElement_Unperformed", _wrap_SequenceVarElement_Unperformed, METH_VARARGS, NULL},
	 { (char *)"SequenceVarElement_SetSequence", _wrap_SequenceVarElement_SetSequence, METH_VARARGS, NULL},
	 { (char *)"SequenceVarElement_SetForwardSequence", _wrap_SequenceVarElement_SetForwardSequence, METH_VARARGS, NULL},
	 { (char *)"SequenceVarElement_SetBackwardSequence", _wrap_SequenceVarElement_SetBackwardSequence, METH_VARARGS, NULL},
	 { (char *)"SequenceVarElement_SetUnperformed", _wrap_SequenceVarElement_SetUnperformed, METH_VARARGS, NULL},
	 { (char *)"SequenceVarElement___eq__", _wrap_SequenceVarElement___eq__, METH_VARARGS, NULL},
	 { (char *)"SequenceVarElement___ne__", _wrap_SequenceVarElement___ne__, METH_VARARGS, NULL},
	 { (char *)"delete_SequenceVarElement", _wrap_delete_SequenceVarElement, METH_VARARGS, NULL},
	 { (char *)"SequenceVarElement_swigregister", SequenceVarElement_swigregister, METH_VARARGS, NULL},
	 { (char *)"Assignment_Clear", _wrap_Assignment_Clear, METH_VARARGS, NULL},
	 { (char *)"Assignment_Empty", _wrap_Assignment_Empty, METH_VARARGS, NULL},
	 { (char *)"Assignment_Size", _wrap_Assignment_Size, METH_VARARGS, NULL},
	 { (char *)"Assignment_NumIntVars", _wrap_Assignment_NumIntVars, METH_VARARGS, NULL},
	 { (char *)"Assignment_NumIntervalVars", _wrap_Assignment_NumIntervalVars, METH_VARARGS, NULL},
	 { (char *)"Assignment_NumSequenceVars", _wrap_Assignment_NumSequenceVars, METH_VARARGS, NULL},
	 { (char *)"Assignment_Store", _wrap_Assignment_Store, METH_VARARGS, NULL},
	 { (char *)"Assignment_Restore", _wrap_Assignment_Restore, METH_VARARGS, NULL},
	 { (char *)"Assignment_Load", _wrap_Assignment_Load, METH_VARARGS, NULL},
	 { (char *)"Assignment_Save", _wrap_Assignment_Save, METH_VARARGS, NULL},
	 { (char *)"Assignment_AddObjective", _wrap_Assignment_AddObjective, METH_VARARGS, NULL},
	 { (char *)"Assignment_Objective", _wrap_Assignment_Objective, METH_VARARGS, NULL},
	 { (char *)"Assignment_HasObjective", _wrap_Assignment_HasObjective, METH_VARARGS, NULL},
	 { (char *)"Assignment_ObjectiveMin", _wrap_Assignment_ObjectiveMin, METH_VARARGS, NULL},
	 { (char *)"Assignment_ObjectiveMax", _wrap_Assignment_ObjectiveMax, METH_VARARGS, NULL},
	 { (char *)"Assignment_ObjectiveValue", _wrap_Assignment_ObjectiveValue, METH_VARARGS, NULL},
	 { (char *)"Assignment_ObjectiveBound", _wrap_Assignment_ObjectiveBound, METH_VARARGS, NULL},
	 { (char *)"Assignment_SetObjectiveMin", _wrap_Assignment_SetObjectiveMin, METH_VARARGS, NULL},
	 { (char *)"Assignment_SetObjectiveMax", _wrap_Assignment_SetObjectiveMax, METH_VARARGS, NULL},
	 { (char *)"Assignment_SetObjectiveValue", _wrap_Assignment_SetObjectiveValue, METH_VARARGS, NULL},
	 { (char *)"Assignment_SetObjectiveRange", _wrap_Assignment_SetObjectiveRange, METH_VARARGS, NULL},
	 { (char *)"Assignment_Min", _wrap_Assignment_Min, METH_VARARGS, NULL},
	 { (char *)"Assignment_Max", _wrap_Assignment_Max, METH_VARARGS, NULL},
	 { (char *)"Assignment_Value", _wrap_Assignment_Value, METH_VARARGS, NULL},
	 { (char *)"Assignment_Bound", _wrap_Assignment_Bound, METH_VARARGS, NULL},
	 { (char *)"Assignment_SetMin", _wrap_Assignment_SetMin, METH_VARARGS, NULL},
	 { (char *)"Assignment_SetMax", _wrap_Assignment_SetMax, METH_VARARGS, NULL},
	 { (char *)"Assignment_SetRange", _wrap_Assignment_SetRange, METH_VARARGS, NULL},
	 { (char *)"Assignment_SetValue", _wrap_Assignment_SetValue, METH_VARARGS, NULL},
	 { (char *)"Assignment_StartMin", _wrap_Assignment_StartMin, METH_VARARGS, NULL},
	 { (char *)"Assignment_StartMax", _wrap_Assignment_StartMax, METH_VARARGS, NULL},
	 { (char *)"Assignment_StartValue", _wrap_Assignment_StartValue, METH_VARARGS, NULL},
	 { (char *)"Assignment_DurationMin", _wrap_Assignment_DurationMin, METH_VARARGS, NULL},
	 { (char *)"Assignment_DurationMax", _wrap_Assignment_DurationMax, METH_VARARGS, NULL},
	 { (char *)"Assignment_DurationValue", _wrap_Assignment_DurationValue, METH_VARARGS, NULL},
	 { (char *)"Assignment_EndMin", _wrap_Assignment_EndMin, METH_VARARGS, NULL},
	 { (char *)"Assignment_EndMax", _wrap_Assignment_EndMax, METH_VARARGS, NULL},
	 { (char *)"Assignment_EndValue", _wrap_Assignment_EndValue, METH_VARARGS, NULL},
	 { (char *)"Assignment_PerformedMin", _wrap_Assignment_PerformedMin, METH_VARARGS, NULL},
	 { (char *)"Assignment_PerformedMax", _wrap_Assignment_PerformedMax, METH_VARARGS, NULL},
	 { (char *)"Assignment_PerformedValue", _wrap_Assignment_PerformedValue, METH_VARARGS, NULL},
	 { (char *)"Assignment_SetStartMin", _wrap_Assignment_SetStartMin, METH_VARARGS, NULL},
	 { (char *)"Assignment_SetStartMax", _wrap_Assignment_SetStartMax, METH_VARARGS, NULL},
	 { (char *)"Assignment_SetStartRange", _wrap_Assignment_SetStartRange, METH_VARARGS, NULL},
	 { (char *)"Assignment_SetStartValue", _wrap_Assignment_SetStartValue, METH_VARARGS, NULL},
	 { (char *)"Assignment_SetDurationMin", _wrap_Assignment_SetDurationMin, METH_VARARGS, NULL},
	 { (char *)"Assignment_SetDurationMax", _wrap_Assignment_SetDurationMax, METH_VARARGS, NULL},
	 { (char *)"Assignment_SetDurationRange", _wrap_Assignment_SetDurationRange, METH_VARARGS, NULL},
	 { (char *)"Assignment_SetDurationValue", _wrap_Assignment_SetDurationValue, METH_VARARGS, NULL},
	 { (char *)"Assignment_SetEndMin", _wrap_Assignment_SetEndMin, METH_VARARGS, NULL},
	 { (char *)"Assignment_SetEndMax", _wrap_Assignment_SetEndMax, METH_VARARGS, NULL},
	 { (char *)"Assignment_SetEndRange", _wrap_Assignment_SetEndRange, METH_VARARGS, NULL},
	 { (char *)"Assignment_SetEndValue", _wrap_Assignment_SetEndValue, METH_VARARGS, NULL},
	 { (char *)"Assignment_SetPerformedMin", _wrap_Assignment_SetPerformedMin, METH_VARARGS, NULL},
	 { (char *)"Assignment_SetPerformedMax", _wrap_Assignment_SetPerformedMax, METH_VARARGS, NULL},
	 { (char *)"Assignment_SetPerformedRange", _wrap_Assignment_SetPerformedRange, METH_VARARGS, NULL},
	 { (char *)"Assignment_SetPerformedValue", _wrap_Assignment_SetPerformedValue, METH_VARARGS, NULL},
	 { (char *)"Assignment_Add", _wrap_Assignment_Add, METH_VARARGS, NULL},
	 { (char *)"Assignment_ForwardSequence", _wrap_Assignment_ForwardSequence, METH_VARARGS, NULL},
	 { (char *)"Assignment_BackwardSequence", _wrap_Assignment_BackwardSequence, METH_VARARGS, NULL},
	 { (char *)"Assignment_Unperformed", _wrap_Assignment_Unperformed, METH_VARARGS, NULL},
	 { (char *)"Assignment_SetSequence", _wrap_Assignment_SetSequence, METH_VARARGS, NULL},
	 { (char *)"Assignment_SetForwardSequence", _wrap_Assignment_SetForwardSequence, METH_VARARGS, NULL},
	 { (char *)"Assignment_SetBackwardSequence", _wrap_Assignment_SetBackwardSequence, METH_VARARGS, NULL},
	 { (char *)"Assignment_SetUnperformed", _wrap_Assignment_SetUnperformed, METH_VARARGS, NULL},
	 { (char *)"Assignment_Activate", _wrap_Assignment_Activate, METH_VARARGS, NULL},
	 { (char *)"Assignment_Deactivate", _wrap_Assignment_Deactivate, METH_VARARGS, NULL},
	 { (char *)"Assignment_Activated", _wrap_Assignment_Activated, METH_VARARGS, NULL},
	 { (char *)"Assignment_DebugString", _wrap_Assignment_DebugString, METH_VARARGS, NULL},
	 { (char *)"Assignment_IntVarContainer", _wrap_Assignment_IntVarContainer, METH_VARARGS, NULL},
	 { (char *)"Assignment_MutableIntVarContainer", _wrap_Assignment_MutableIntVarContainer, METH_VARARGS, NULL},
	 { (char *)"Assignment_IntervalVarContainer", _wrap_Assignment_IntervalVarContainer, METH_VARARGS, NULL},
	 { (char *)"Assignment_MutableIntervalVarContainer", _wrap_Assignment_MutableIntervalVarContainer, METH_VARARGS, NULL},
	 { (char *)"Assignment_SequenceVarContainer", _wrap_Assignment_SequenceVarContainer, METH_VARARGS, NULL},
	 { (char *)"Assignment_MutableSequenceVarContainer", _wrap_Assignment_MutableSequenceVarContainer, METH_VARARGS, NULL},
	 { (char *)"Assignment___eq__", _wrap_Assignment___eq__, METH_VARARGS, NULL},
	 { (char *)"Assignment___ne__", _wrap_Assignment___ne__, METH_VARARGS, NULL},
	 { (char *)"Assignment_swigregister", Assignment_swigregister, METH_VARARGS, NULL},
	 { (char *)"__lshift__", _wrap___lshift__, METH_VARARGS, NULL},
	 { (char *)"Pack_AddWeightedSumLessOrEqualConstantDimension", _wrap_Pack_AddWeightedSumLessOrEqualConstantDimension, METH_VARARGS, NULL},
	 { (char *)"Pack_AddWeightedSumEqualVarDimension", _wrap_Pack_AddWeightedSumEqualVarDimension, METH_VARARGS, NULL},
	 { (char *)"Pack_AddSumVariableWeightsLessOrEqualConstantDimension", _wrap_Pack_AddSumVariableWeightsLessOrEqualConstantDimension, METH_VARARGS, NULL},
	 { (char *)"Pack_AddWeightedSumOfAssignedDimension", _wrap_Pack_AddWeightedSumOfAssignedDimension, METH_VARARGS, NULL},
	 { (char *)"Pack_AddCountUsedBinDimension", _wrap_Pack_AddCountUsedBinDimension, METH_VARARGS, NULL},
	 { (char *)"Pack_AddCountAssignedItemsDimension", _wrap_Pack_AddCountAssignedItemsDimension, METH_VARARGS, NULL},
	 { (char *)"Pack_Post", _wrap_Pack_Post, METH_VARARGS, NULL},
	 { (char *)"Pack_InitialPropagateWrapper", _wrap_Pack_InitialPropagateWrapper, METH_VARARGS, NULL},
	 { (char *)"Pack_DebugString", _wrap_Pack_DebugString, METH_VARARGS, NULL},
	 { (char *)"Pack_swigregister", Pack_swigregister, METH_VARARGS, NULL},
	 { (char *)"DisjunctiveConstraint_SequenceVar", _wrap_DisjunctiveConstraint_SequenceVar, METH_VARARGS, NULL},
	 { (char *)"DisjunctiveConstraint_SetTransitionTime", _wrap_DisjunctiveConstraint_SetTransitionTime, METH_VARARGS, NULL},
	 { (char *)"DisjunctiveConstraint_TransitionTime", _wrap_DisjunctiveConstraint_TransitionTime, METH_VARARGS, NULL},
	 { (char *)"DisjunctiveConstraint_swigregister", DisjunctiveConstraint_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RevInteger", _wrap_new_RevInteger, METH_VARARGS, NULL},
	 { (char *)"RevInteger_Value", _wrap_RevInteger_Value, METH_VARARGS, NULL},
	 { (char *)"RevInteger_SetValue", _wrap_RevInteger_SetValue, METH_VARARGS, NULL},
	 { (char *)"delete_RevInteger", _wrap_delete_RevInteger, METH_VARARGS, NULL},
	 { (char *)"RevInteger_swigregister", RevInteger_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_NumericalRevInteger", _wrap_new_NumericalRevInteger, METH_VARARGS, NULL},
	 { (char *)"NumericalRevInteger_Add", _wrap_NumericalRevInteger_Add, METH_VARARGS, NULL},
	 { (char *)"NumericalRevInteger_Incr", _wrap_NumericalRevInteger_Incr, METH_VARARGS, NULL},
	 { (char *)"NumericalRevInteger_Decr", _wrap_NumericalRevInteger_Decr, METH_VARARGS, NULL},
	 { (char *)"delete_NumericalRevInteger", _wrap_delete_NumericalRevInteger, METH_VARARGS, NULL},
	 { (char *)"NumericalRevInteger_swigregister", NumericalRevInteger_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RevBool", _wrap_new_RevBool, METH_VARARGS, NULL},
	 { (char *)"RevBool_Value", _wrap_RevBool_Value, METH_VARARGS, NULL},
	 { (char *)"RevBool_SetValue", _wrap_RevBool_SetValue, METH_VARARGS, NULL},
	 { (char *)"delete_RevBool", _wrap_delete_RevBool, METH_VARARGS, NULL},
	 { (char *)"RevBool_swigregister", RevBool_swigregister, METH_VARARGS, NULL},
	 { (char *)"IntVarContainer_Contains", _wrap_IntVarContainer_Contains, METH_VARARGS, NULL},
	 { (char *)"IntVarContainer_Element", _wrap_IntVarContainer_Element, METH_VARARGS, NULL},
	 { (char *)"IntVarContainer_Size", _wrap_IntVarContainer_Size, METH_VARARGS, NULL},
	 { (char *)"IntVarContainer_Store", _wrap_IntVarContainer_Store, METH_VARARGS, NULL},
	 { (char *)"IntVarContainer_Restore", _wrap_IntVarContainer_Restore, METH_VARARGS, NULL},
	 { (char *)"IntVarContainer___eq__", _wrap_IntVarContainer___eq__, METH_VARARGS, NULL},
	 { (char *)"IntVarContainer___ne__", _wrap_IntVarContainer___ne__, METH_VARARGS, NULL},
	 { (char *)"delete_IntVarContainer", _wrap_delete_IntVarContainer, METH_VARARGS, NULL},
	 { (char *)"IntVarContainer_swigregister", IntVarContainer_swigregister, METH_VARARGS, NULL},
	 { (char *)"IntervalVarContainer_Contains", _wrap_IntervalVarContainer_Contains, METH_VARARGS, NULL},
	 { (char *)"IntervalVarContainer_Element", _wrap_IntervalVarContainer_Element, METH_VARARGS, NULL},
	 { (char *)"IntervalVarContainer_Size", _wrap_IntervalVarContainer_Size, METH_VARARGS, NULL},
	 { (char *)"IntervalVarContainer_Store", _wrap_IntervalVarContainer_Store, METH_VARARGS, NULL},
	 { (char *)"IntervalVarContainer_Restore", _wrap_IntervalVarContainer_Restore, METH_VARARGS, NULL},
	 { (char *)"IntervalVarContainer___eq__", _wrap_IntervalVarContainer___eq__, METH_VARARGS, NULL},
	 { (char *)"IntervalVarContainer___ne__", _wrap_IntervalVarContainer___ne__, METH_VARARGS, NULL},
	 { (char *)"delete_IntervalVarContainer", _wrap_delete_IntervalVarContainer, METH_VARARGS, NULL},
	 { (char *)"IntervalVarContainer_swigregister", IntervalVarContainer_swigregister, METH_VARARGS, NULL},
	 { (char *)"SequenceVarContainer_Contains", _wrap_SequenceVarContainer_Contains, METH_VARARGS, NULL},
	 { (char *)"SequenceVarContainer_Element", _wrap_SequenceVarContainer_Element, METH_VARARGS, NULL},
	 { (char *)"SequenceVarContainer_Size", _wrap_SequenceVarContainer_Size, METH_VARARGS, NULL},
	 { (char *)"SequenceVarContainer_Store", _wrap_SequenceVarContainer_Store, METH_VARARGS, NULL},
	 { (char *)"SequenceVarContainer_Restore", _wrap_SequenceVarContainer_Restore, METH_VARARGS, NULL},
	 { (char *)"SequenceVarContainer___eq__", _wrap_SequenceVarContainer___eq__, METH_VARARGS, NULL},
	 { (char *)"SequenceVarContainer___ne__", _wrap_SequenceVarContainer___ne__, METH_VARARGS, NULL},
	 { (char *)"delete_SequenceVarContainer", _wrap_delete_SequenceVarContainer, METH_VARARGS, NULL},
	 { (char *)"SequenceVarContainer_swigregister", SequenceVarContainer_swigregister, METH_VARARGS, NULL},
	 { (char *)"LocalSearchOperator_NextNeighbor", _wrap_LocalSearchOperator_NextNeighbor, METH_VARARGS, NULL},
	 { (char *)"LocalSearchOperator_Start", _wrap_LocalSearchOperator_Start, METH_VARARGS, NULL},
	 { (char *)"disown_LocalSearchOperator", _wrap_disown_LocalSearchOperator, METH_VARARGS, NULL},
	 { (char *)"LocalSearchOperator_swigregister", LocalSearchOperator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IntVarLocalSearchOperator", _wrap_new_IntVarLocalSearchOperator, METH_VARARGS, NULL},
	 { (char *)"delete_IntVarLocalSearchOperator", _wrap_delete_IntVarLocalSearchOperator, METH_VARARGS, NULL},
	 { (char *)"IntVarLocalSearchOperator_Start", _wrap_IntVarLocalSearchOperator_Start, METH_VARARGS, NULL},
	 { (char *)"IntVarLocalSearchOperator_IsIncremental", _wrap_IntVarLocalSearchOperator_IsIncremental, METH_VARARGS, NULL},
	 { (char *)"IntVarLocalSearchOperator_Size", _wrap_IntVarLocalSearchOperator_Size, METH_VARARGS, NULL},
	 { (char *)"IntVarLocalSearchOperator_Value", _wrap_IntVarLocalSearchOperator_Value, METH_VARARGS, NULL},
	 { (char *)"IntVarLocalSearchOperator_Var", _wrap_IntVarLocalSearchOperator_Var, METH_VARARGS, NULL},
	 { (char *)"IntVarLocalSearchOperator_OldValue", _wrap_IntVarLocalSearchOperator_OldValue, METH_VARARGS, NULL},
	 { (char *)"IntVarLocalSearchOperator_PrevValue", _wrap_IntVarLocalSearchOperator_PrevValue, METH_VARARGS, NULL},
	 { (char *)"IntVarLocalSearchOperator_SetValue", _wrap_IntVarLocalSearchOperator_SetValue, METH_VARARGS, NULL},
	 { (char *)"IntVarLocalSearchOperator_Activated", _wrap_IntVarLocalSearchOperator_Activated, METH_VARARGS, NULL},
	 { (char *)"IntVarLocalSearchOperator_Activate", _wrap_IntVarLocalSearchOperator_Activate, METH_VARARGS, NULL},
	 { (char *)"IntVarLocalSearchOperator_Deactivate", _wrap_IntVarLocalSearchOperator_Deactivate, METH_VARARGS, NULL},
	 { (char *)"IntVarLocalSearchOperator_AddVars", _wrap_IntVarLocalSearchOperator_AddVars, METH_VARARGS, NULL},
	 { (char *)"IntVarLocalSearchOperator_OnStart", _wrap_IntVarLocalSearchOperator_OnStart, METH_VARARGS, NULL},
	 { (char *)"IntVarLocalSearchOperator_NextNeighbor", _wrap_IntVarLocalSearchOperator_NextNeighbor, METH_VARARGS, NULL},
	 { (char *)"IntVarLocalSearchOperator_OneNeighbor", _wrap_IntVarLocalSearchOperator_OneNeighbor, METH_VARARGS, NULL},
	 { (char *)"disown_IntVarLocalSearchOperator", _wrap_disown_IntVarLocalSearchOperator, METH_VARARGS, NULL},
	 { (char *)"IntVarLocalSearchOperator_swigregister", IntVarLocalSearchOperator_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_BaseLns", _wrap_new_BaseLns, METH_VARARGS, NULL},
	 { (char *)"delete_BaseLns", _wrap_delete_BaseLns, METH_VARARGS, NULL},
	 { (char *)"BaseLns_InitFragments", _wrap_BaseLns_InitFragments, METH_VARARGS, NULL},
	 { (char *)"BaseLns_NextFragment", _wrap_BaseLns_NextFragment, METH_VARARGS, NULL},
	 { (char *)"BaseLns_AppendToFragment", _wrap_BaseLns_AppendToFragment, METH_VARARGS, NULL},
	 { (char *)"BaseLns_FragmentSize", _wrap_BaseLns_FragmentSize, METH_VARARGS, NULL},
	 { (char *)"BaseLns___getitem__", _wrap_BaseLns___getitem__, METH_VARARGS, NULL},
	 { (char *)"BaseLns___len__", _wrap_BaseLns___len__, METH_VARARGS, NULL},
	 { (char *)"disown_BaseLns", _wrap_disown_BaseLns, METH_VARARGS, NULL},
	 { (char *)"BaseLns_swigregister", BaseLns_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ChangeValue", _wrap_new_ChangeValue, METH_VARARGS, NULL},
	 { (char *)"delete_ChangeValue", _wrap_delete_ChangeValue, METH_VARARGS, NULL},
	 { (char *)"ChangeValue_ModifyValue", _wrap_ChangeValue_ModifyValue, METH_VARARGS, NULL},
	 { (char *)"ChangeValue_OneNeighbor", _wrap_ChangeValue_OneNeighbor, METH_VARARGS, NULL},
	 { (char *)"disown_ChangeValue", _wrap_disown_ChangeValue, METH_VARARGS, NULL},
	 { (char *)"ChangeValue_swigregister", ChangeValue_swigregister, METH_VARARGS, NULL},
	 { (char *)"PathOperator_Neighbor", _wrap_PathOperator_Neighbor, METH_VARARGS, NULL},
	 { (char *)"PathOperator_swigregister", PathOperator_swigregister, METH_VARARGS, NULL},
	 { (char *)"LocalSearchFilter_Accept", _wrap_LocalSearchFilter_Accept, METH_VARARGS, NULL},
	 { (char *)"LocalSearchFilter_IsIncremental", _wrap_LocalSearchFilter_IsIncremental, METH_VARARGS, NULL},
	 { (char *)"LocalSearchFilter_Synchronize", _wrap_LocalSearchFilter_Synchronize, METH_VARARGS, NULL},
	 { (char *)"delete_LocalSearchFilter", _wrap_delete_LocalSearchFilter, METH_VARARGS, NULL},
	 { (char *)"LocalSearchFilter_swigregister", LocalSearchFilter_swigregister, METH_VARARGS, NULL},
	 { (char *)"LocalSearchFilterManager_DebugString", _wrap_LocalSearchFilterManager_DebugString, METH_VARARGS, NULL},
	 { (char *)"new_LocalSearchFilterManager", _wrap_new_LocalSearchFilterManager, METH_VARARGS, NULL},
	 { (char *)"LocalSearchFilterManager_Accept", _wrap_LocalSearchFilterManager_Accept, METH_VARARGS, NULL},
	 { (char *)"LocalSearchFilterManager_Synchronize", _wrap_LocalSearchFilterManager_Synchronize, METH_VARARGS, NULL},
	 { (char *)"delete_LocalSearchFilterManager", _wrap_delete_LocalSearchFilterManager, METH_VARARGS, NULL},
	 { (char *)"LocalSearchFilterManager_swigregister", LocalSearchFilterManager_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_IntVarLocalSearchFilter", _wrap_new_IntVarLocalSearchFilter, METH_VARARGS, NULL},
	 { (char *)"delete_IntVarLocalSearchFilter", _wrap_delete_IntVarLocalSearchFilter, METH_VARARGS, NULL},
	 { (char *)"IntVarLocalSearchFilter_Synchronize", _wrap_IntVarLocalSearchFilter_Synchronize, METH_VARARGS, NULL},
	 { (char *)"IntVarLocalSearchFilter_Size", _wrap_IntVarLocalSearchFilter_Size, METH_VARARGS, NULL},
	 { (char *)"IntVarLocalSearchFilter_Value", _wrap_IntVarLocalSearchFilter_Value, METH_VARARGS, NULL},
	 { (char *)"IntVarLocalSearchFilter_IndexFromVar", _wrap_IntVarLocalSearchFilter_IndexFromVar, METH_VARARGS, NULL},
	 { (char *)"disown_IntVarLocalSearchFilter", _wrap_disown_IntVarLocalSearchFilter, METH_VARARGS, NULL},
	 { (char *)"IntVarLocalSearchFilter_swigregister", IntVarLocalSearchFilter_swigregister, METH_VARARGS, NULL},
	 { (char *)"BooleanVar_Min", _wrap_BooleanVar_Min, METH_VARARGS, NULL},
	 { (char *)"BooleanVar_SetMin", _wrap_BooleanVar_SetMin, METH_VARARGS, NULL},
	 { (char *)"BooleanVar_Max", _wrap_BooleanVar_Max, METH_VARARGS, NULL},
	 { (char *)"BooleanVar_SetMax", _wrap_BooleanVar_SetMax, METH_VARARGS, NULL},
	 { (char *)"BooleanVar_SetRange", _wrap_BooleanVar_SetRange, METH_VARARGS, NULL},
	 { (char *)"BooleanVar_Bound", _wrap_BooleanVar_Bound, METH_VARARGS, NULL},
	 { (char *)"BooleanVar_Value", _wrap_BooleanVar_Value, METH_VARARGS, NULL},
	 { (char *)"BooleanVar_RemoveValue", _wrap_BooleanVar_RemoveValue, METH_VARARGS, NULL},
	 { (char *)"BooleanVar_RemoveInterval", _wrap_BooleanVar_RemoveInterval, METH_VARARGS, NULL},
	 { (char *)"BooleanVar_WhenBound", _wrap_BooleanVar_WhenBound, METH_VARARGS, NULL},
	 { (char *)"BooleanVar_WhenRange", _wrap_BooleanVar_WhenRange, METH_VARARGS, NULL},
	 { (char *)"BooleanVar_WhenDomain", _wrap_BooleanVar_WhenDomain, METH_VARARGS, NULL},
	 { (char *)"BooleanVar_Size", _wrap_BooleanVar_Size, METH_VARARGS, NULL},
	 { (char *)"BooleanVar_Contains", _wrap_BooleanVar_Contains, METH_VARARGS, NULL},
	 { (char *)"BooleanVar_HoleIteratorAux", _wrap_BooleanVar_HoleIteratorAux, METH_VARARGS, NULL},
	 { (char *)"BooleanVar_DomainIteratorAux", _wrap_BooleanVar_DomainIteratorAux, METH_VARARGS, NULL},
	 { (char *)"BooleanVar_DebugString", _wrap_BooleanVar_DebugString, METH_VARARGS, NULL},
	 { (char *)"BooleanVar_swigregister", BooleanVar_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RoutingIndexManager", _wrap_new_RoutingIndexManager, METH_VARARGS, NULL},
	 { (char *)"RoutingIndexManager_GetNumberOfNodes", _wrap_RoutingIndexManager_GetNumberOfNodes, METH_VARARGS, NULL},
	 { (char *)"RoutingIndexManager_GetNumberOfVehicles", _wrap_RoutingIndexManager_GetNumberOfVehicles, METH_VARARGS, NULL},
	 { (char *)"RoutingIndexManager_GetNumberOfIndices", _wrap_RoutingIndexManager_GetNumberOfIndices, METH_VARARGS, NULL},
	 { (char *)"RoutingIndexManager_GetStartIndex", _wrap_RoutingIndexManager_GetStartIndex, METH_VARARGS, NULL},
	 { (char *)"RoutingIndexManager_GetEndIndex", _wrap_RoutingIndexManager_GetEndIndex, METH_VARARGS, NULL},
	 { (char *)"RoutingIndexManager_NodeToIndex", _wrap_RoutingIndexManager_NodeToIndex, METH_VARARGS, NULL},
	 { (char *)"RoutingIndexManager_IndexToNode", _wrap_RoutingIndexManager_IndexToNode, METH_VARARGS, NULL},
	 { (char *)"delete_RoutingIndexManager", _wrap_delete_RoutingIndexManager, METH_VARARGS, NULL},
	 { (char *)"RoutingIndexManager_swigregister", RoutingIndexManager_swigregister, METH_VARARGS, NULL},
	 { (char *)"DefaultRoutingModelParameters", _wrap_DefaultRoutingModelParameters, METH_VARARGS, NULL},
	 { (char *)"DefaultRoutingSearchParameters", _wrap_DefaultRoutingSearchParameters, METH_VARARGS, NULL},
	 { (char *)"FindErrorInRoutingSearchParameters", _wrap_FindErrorInRoutingSearchParameters, METH_VARARGS, NULL},
	 { (char *)"new_FirstSolutionStrategy", _wrap_new_FirstSolutionStrategy, METH_VARARGS, NULL},
	 { (char *)"delete_FirstSolutionStrategy", _wrap_delete_FirstSolutionStrategy, METH_VARARGS, NULL},
	 { (char *)"FirstSolutionStrategy_swigregister", FirstSolutionStrategy_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_LocalSearchMetaheuristic", _wrap_new_LocalSearchMetaheuristic, METH_VARARGS, NULL},
	 { (char *)"delete_LocalSearchMetaheuristic", _wrap_delete_LocalSearchMetaheuristic, METH_VARARGS, NULL},
	 { (char *)"LocalSearchMetaheuristic_swigregister", LocalSearchMetaheuristic_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_PathsMetadata", _wrap_new_PathsMetadata, METH_VARARGS, NULL},
	 { (char *)"PathsMetadata_IsStart", _wrap_PathsMetadata_IsStart, METH_VARARGS, NULL},
	 { (char *)"PathsMetadata_IsEnd", _wrap_PathsMetadata_IsEnd, METH_VARARGS, NULL},
	 { (char *)"PathsMetadata_GetPath", _wrap_PathsMetadata_GetPath, METH_VARARGS, NULL},
	 { (char *)"PathsMetadata_NumPaths", _wrap_PathsMetadata_NumPaths, METH_VARARGS, NULL},
	 { (char *)"PathsMetadata_Paths", _wrap_PathsMetadata_Paths, METH_VARARGS, NULL},
	 { (char *)"PathsMetadata_Starts", _wrap_PathsMetadata_Starts, METH_VARARGS, NULL},
	 { (char *)"PathsMetadata_Ends", _wrap_PathsMetadata_Ends, METH_VARARGS, NULL},
	 { (char *)"delete_PathsMetadata", _wrap_delete_PathsMetadata, METH_VARARGS, NULL},
	 { (char *)"PathsMetadata_swigregister", PathsMetadata_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RoutingModel", _wrap_new_RoutingModel, METH_VARARGS, NULL},
	 { (char *)"delete_RoutingModel", _wrap_delete_RoutingModel, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_RegisterUnaryTransitVector", _wrap_RoutingModel_RegisterUnaryTransitVector, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_RegisterUnaryTransitCallback", _wrap_RoutingModel_RegisterUnaryTransitCallback, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_RegisterTransitMatrix", _wrap_RoutingModel_RegisterTransitMatrix, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_RegisterTransitCallback", _wrap_RoutingModel_RegisterTransitCallback, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_TransitCallback", _wrap_RoutingModel_TransitCallback, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_UnaryTransitCallbackOrNull", _wrap_RoutingModel_UnaryTransitCallbackOrNull, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_AddDimension", _wrap_RoutingModel_AddDimension, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_AddDimensionWithVehicleTransits", _wrap_RoutingModel_AddDimensionWithVehicleTransits, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_AddDimensionWithVehicleCapacity", _wrap_RoutingModel_AddDimensionWithVehicleCapacity, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_AddDimensionWithVehicleTransitAndCapacity", _wrap_RoutingModel_AddDimensionWithVehicleTransitAndCapacity, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_AddConstantDimensionWithSlack", _wrap_RoutingModel_AddConstantDimensionWithSlack, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_AddConstantDimension", _wrap_RoutingModel_AddConstantDimension, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_AddVectorDimension", _wrap_RoutingModel_AddVectorDimension, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_AddMatrixDimension", _wrap_RoutingModel_AddMatrixDimension, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetAllDimensionNames", _wrap_RoutingModel_GetAllDimensionNames, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetDimensions", _wrap_RoutingModel_GetDimensions, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetDimensionsWithSoftOrSpanCosts", _wrap_RoutingModel_GetDimensionsWithSoftOrSpanCosts, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetDimensionsWithGlobalCumulOptimizers", _wrap_RoutingModel_GetDimensionsWithGlobalCumulOptimizers, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetDimensionsWithLocalCumulOptimizers", _wrap_RoutingModel_GetDimensionsWithLocalCumulOptimizers, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_HasGlobalCumulOptimizer", _wrap_RoutingModel_HasGlobalCumulOptimizer, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_HasLocalCumulOptimizer", _wrap_RoutingModel_HasLocalCumulOptimizer, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetMutableGlobalCumulLPOptimizer", _wrap_RoutingModel_GetMutableGlobalCumulLPOptimizer, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetMutableGlobalCumulMPOptimizer", _wrap_RoutingModel_GetMutableGlobalCumulMPOptimizer, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetMutableLocalCumulLPOptimizer", _wrap_RoutingModel_GetMutableLocalCumulLPOptimizer, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetMutableLocalCumulMPOptimizer", _wrap_RoutingModel_GetMutableLocalCumulMPOptimizer, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_HasDimension", _wrap_RoutingModel_HasDimension, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetDimensionOrDie", _wrap_RoutingModel_GetDimensionOrDie, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetMutableDimension", _wrap_RoutingModel_GetMutableDimension, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_SetPrimaryConstrainedDimension", _wrap_RoutingModel_SetPrimaryConstrainedDimension, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetPrimaryConstrainedDimension", _wrap_RoutingModel_GetPrimaryConstrainedDimension, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_AddResourceGroup", _wrap_RoutingModel_AddResourceGroup, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetResourceGroups", _wrap_RoutingModel_GetResourceGroups, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetResourceGroup", _wrap_RoutingModel_GetResourceGroup, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetDimensionResourceGroupIndices", _wrap_RoutingModel_GetDimensionResourceGroupIndices, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetDimensionResourceGroupIndex", _wrap_RoutingModel_GetDimensionResourceGroupIndex, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_AddDisjunction", _wrap_RoutingModel_AddDisjunction, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetDisjunctionIndices", _wrap_RoutingModel_GetDisjunctionIndices, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetDisjunctionPenalty", _wrap_RoutingModel_GetDisjunctionPenalty, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetDisjunctionMaxCardinality", _wrap_RoutingModel_GetDisjunctionMaxCardinality, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetNumberOfDisjunctions", _wrap_RoutingModel_GetNumberOfDisjunctions, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_HasMandatoryDisjunctions", _wrap_RoutingModel_HasMandatoryDisjunctions, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_HasMaxCardinalityConstrainedDisjunctions", _wrap_RoutingModel_HasMaxCardinalityConstrainedDisjunctions, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetPerfectBinaryDisjunctions", _wrap_RoutingModel_GetPerfectBinaryDisjunctions, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_IgnoreDisjunctionsAlreadyForcedToZero", _wrap_RoutingModel_IgnoreDisjunctionsAlreadyForcedToZero, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_AddSoftSameVehicleConstraint", _wrap_RoutingModel_AddSoftSameVehicleConstraint, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_SetAllowedVehiclesForIndex", _wrap_RoutingModel_SetAllowedVehiclesForIndex, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_IsVehicleAllowedForIndex", _wrap_RoutingModel_IsVehicleAllowedForIndex, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_AddPickupAndDelivery", _wrap_RoutingModel_AddPickupAndDelivery, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_AddPickupAndDeliverySets", _wrap_RoutingModel_AddPickupAndDeliverySets, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetPickupPositions", _wrap_RoutingModel_GetPickupPositions, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetDeliveryPositions", _wrap_RoutingModel_GetDeliveryPositions, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_IsPickup", _wrap_RoutingModel_IsPickup, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_IsDelivery", _wrap_RoutingModel_IsDelivery, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_SetPickupAndDeliveryPolicyOfAllVehicles", _wrap_RoutingModel_SetPickupAndDeliveryPolicyOfAllVehicles, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_SetPickupAndDeliveryPolicyOfVehicle", _wrap_RoutingModel_SetPickupAndDeliveryPolicyOfVehicle, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetPickupAndDeliveryPolicyOfVehicle", _wrap_RoutingModel_GetPickupAndDeliveryPolicyOfVehicle, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetNumOfSingletonNodes", _wrap_RoutingModel_GetNumOfSingletonNodes, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_SetVisitType", _wrap_RoutingModel_SetVisitType, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetVisitType", _wrap_RoutingModel_GetVisitType, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetSingleNodesOfType", _wrap_RoutingModel_GetSingleNodesOfType, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetPairIndicesOfType", _wrap_RoutingModel_GetPairIndicesOfType, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetVisitTypePolicy", _wrap_RoutingModel_GetVisitTypePolicy, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_CloseVisitTypes", _wrap_RoutingModel_CloseVisitTypes, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetNumberOfVisitTypes", _wrap_RoutingModel_GetNumberOfVisitTypes, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_AddHardTypeIncompatibility", _wrap_RoutingModel_AddHardTypeIncompatibility, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_AddTemporalTypeIncompatibility", _wrap_RoutingModel_AddTemporalTypeIncompatibility, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetHardTypeIncompatibilitiesOfType", _wrap_RoutingModel_GetHardTypeIncompatibilitiesOfType, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetTemporalTypeIncompatibilitiesOfType", _wrap_RoutingModel_GetTemporalTypeIncompatibilitiesOfType, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_HasHardTypeIncompatibilities", _wrap_RoutingModel_HasHardTypeIncompatibilities, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_HasTemporalTypeIncompatibilities", _wrap_RoutingModel_HasTemporalTypeIncompatibilities, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_AddSameVehicleRequiredTypeAlternatives", _wrap_RoutingModel_AddSameVehicleRequiredTypeAlternatives, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_AddRequiredTypeAlternativesWhenAddingType", _wrap_RoutingModel_AddRequiredTypeAlternativesWhenAddingType, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_AddRequiredTypeAlternativesWhenRemovingType", _wrap_RoutingModel_AddRequiredTypeAlternativesWhenRemovingType, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetSameVehicleRequiredTypeAlternativesOfType", _wrap_RoutingModel_GetSameVehicleRequiredTypeAlternativesOfType, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetRequiredTypeAlternativesWhenAddingType", _wrap_RoutingModel_GetRequiredTypeAlternativesWhenAddingType, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetRequiredTypeAlternativesWhenRemovingType", _wrap_RoutingModel_GetRequiredTypeAlternativesWhenRemovingType, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_HasSameVehicleTypeRequirements", _wrap_RoutingModel_HasSameVehicleTypeRequirements, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_HasTemporalTypeRequirements", _wrap_RoutingModel_HasTemporalTypeRequirements, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_HasTypeRegulations", _wrap_RoutingModel_HasTypeRegulations, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_UnperformedPenalty", _wrap_RoutingModel_UnperformedPenalty, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_UnperformedPenaltyOrValue", _wrap_RoutingModel_UnperformedPenaltyOrValue, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetDepot", _wrap_RoutingModel_GetDepot, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_SetMaximumNumberOfActiveVehicles", _wrap_RoutingModel_SetMaximumNumberOfActiveVehicles, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetMaximumNumberOfActiveVehicles", _wrap_RoutingModel_GetMaximumNumberOfActiveVehicles, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_SetArcCostEvaluatorOfAllVehicles", _wrap_RoutingModel_SetArcCostEvaluatorOfAllVehicles, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_SetArcCostEvaluatorOfVehicle", _wrap_RoutingModel_SetArcCostEvaluatorOfVehicle, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_SetFixedCostOfAllVehicles", _wrap_RoutingModel_SetFixedCostOfAllVehicles, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_SetFixedCostOfVehicle", _wrap_RoutingModel_SetFixedCostOfVehicle, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetFixedCostOfVehicle", _wrap_RoutingModel_GetFixedCostOfVehicle, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_SetPathEnergyCostOfVehicle", _wrap_RoutingModel_SetPathEnergyCostOfVehicle, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_SetAmortizedCostFactorsOfAllVehicles", _wrap_RoutingModel_SetAmortizedCostFactorsOfAllVehicles, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_SetAmortizedCostFactorsOfVehicle", _wrap_RoutingModel_SetAmortizedCostFactorsOfVehicle, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetAmortizedLinearCostFactorOfVehicles", _wrap_RoutingModel_GetAmortizedLinearCostFactorOfVehicles, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetAmortizedQuadraticCostFactorOfVehicles", _wrap_RoutingModel_GetAmortizedQuadraticCostFactorOfVehicles, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_SetVehicleUsedWhenEmpty", _wrap_RoutingModel_SetVehicleUsedWhenEmpty, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_IsVehicleUsedWhenEmpty", _wrap_RoutingModel_IsVehicleUsedWhenEmpty, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_SetFirstSolutionEvaluator", _wrap_RoutingModel_SetFirstSolutionEvaluator, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_AddLocalSearchOperator", _wrap_RoutingModel_AddLocalSearchOperator, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_AddSearchMonitor", _wrap_RoutingModel_AddSearchMonitor, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_AddAtSolutionCallback", _wrap_RoutingModel_AddAtSolutionCallback, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_AddVariableMinimizedByFinalizer", _wrap_RoutingModel_AddVariableMinimizedByFinalizer, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_AddVariableMaximizedByFinalizer", _wrap_RoutingModel_AddVariableMaximizedByFinalizer, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_AddWeightedVariableMinimizedByFinalizer", _wrap_RoutingModel_AddWeightedVariableMinimizedByFinalizer, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_AddWeightedVariableMaximizedByFinalizer", _wrap_RoutingModel_AddWeightedVariableMaximizedByFinalizer, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_AddVariableTargetToFinalizer", _wrap_RoutingModel_AddVariableTargetToFinalizer, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_AddWeightedVariableTargetToFinalizer", _wrap_RoutingModel_AddWeightedVariableTargetToFinalizer, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_CloseModel", _wrap_RoutingModel_CloseModel, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_CloseModelWithParameters", _wrap_RoutingModel_CloseModelWithParameters, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_Solve", _wrap_RoutingModel_Solve, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_SolveWithParameters", _wrap_RoutingModel_SolveWithParameters, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_SolveFromAssignmentWithParameters", _wrap_RoutingModel_SolveFromAssignmentWithParameters, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_SolveFromAssignmentsWithParameters", _wrap_RoutingModel_SolveFromAssignmentsWithParameters, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_SetAssignmentFromOtherModelAssignment", _wrap_RoutingModel_SetAssignmentFromOtherModelAssignment, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_ComputeLowerBound", _wrap_RoutingModel_ComputeLowerBound, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_objective_lower_bound", _wrap_RoutingModel_objective_lower_bound, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_status", _wrap_RoutingModel_status, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_enable_deep_serialization", _wrap_RoutingModel_enable_deep_serialization, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_ApplyLocks", _wrap_RoutingModel_ApplyLocks, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_ApplyLocksToAllVehicles", _wrap_RoutingModel_ApplyLocksToAllVehicles, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_PreAssignment", _wrap_RoutingModel_PreAssignment, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_MutablePreAssignment", _wrap_RoutingModel_MutablePreAssignment, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_WriteAssignment", _wrap_RoutingModel_WriteAssignment, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_ReadAssignment", _wrap_RoutingModel_ReadAssignment, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_RestoreAssignment", _wrap_RoutingModel_RestoreAssignment, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_ReadAssignmentFromRoutes", _wrap_RoutingModel_ReadAssignmentFromRoutes, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_RoutesToAssignment", _wrap_RoutingModel_RoutesToAssignment, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_AssignmentToRoutes", _wrap_RoutingModel_AssignmentToRoutes, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_CompactAssignment", _wrap_RoutingModel_CompactAssignment, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_CompactAndCheckAssignment", _wrap_RoutingModel_CompactAndCheckAssignment, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_AddToAssignment", _wrap_RoutingModel_AddToAssignment, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_AddIntervalToAssignment", _wrap_RoutingModel_AddIntervalToAssignment, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_PackCumulsOfOptimizerDimensionsFromAssignment", _wrap_RoutingModel_PackCumulsOfOptimizerDimensionsFromAssignment, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetOrCreateNodeNeighborsByCostClass", _wrap_RoutingModel_GetOrCreateNodeNeighborsByCostClass, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_AddLocalSearchFilter", _wrap_RoutingModel_AddLocalSearchFilter, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_Start", _wrap_RoutingModel_Start, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_End", _wrap_RoutingModel_End, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_IsStart", _wrap_RoutingModel_IsStart, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_IsEnd", _wrap_RoutingModel_IsEnd, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_VehicleIndex", _wrap_RoutingModel_VehicleIndex, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_Next", _wrap_RoutingModel_Next, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_IsVehicleUsed", _wrap_RoutingModel_IsVehicleUsed, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_NextVar", _wrap_RoutingModel_NextVar, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_ActiveVar", _wrap_RoutingModel_ActiveVar, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_ActiveVehicleVar", _wrap_RoutingModel_ActiveVehicleVar, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_VehicleRouteConsideredVar", _wrap_RoutingModel_VehicleRouteConsideredVar, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_VehicleVar", _wrap_RoutingModel_VehicleVar, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_ResourceVar", _wrap_RoutingModel_ResourceVar, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_CostVar", _wrap_RoutingModel_CostVar, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetArcCostForVehicle", _wrap_RoutingModel_GetArcCostForVehicle, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_CostsAreHomogeneousAcrossVehicles", _wrap_RoutingModel_CostsAreHomogeneousAcrossVehicles, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetHomogeneousCost", _wrap_RoutingModel_GetHomogeneousCost, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetArcCostForFirstSolution", _wrap_RoutingModel_GetArcCostForFirstSolution, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetArcCostForClass", _wrap_RoutingModel_GetArcCostForClass, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetCostClassIndexOfVehicle", _wrap_RoutingModel_GetCostClassIndexOfVehicle, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_HasVehicleWithCostClassIndex", _wrap_RoutingModel_HasVehicleWithCostClassIndex, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetCostClassesCount", _wrap_RoutingModel_GetCostClassesCount, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetNonZeroCostClassesCount", _wrap_RoutingModel_GetNonZeroCostClassesCount, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetVehicleClassIndexOfVehicle", _wrap_RoutingModel_GetVehicleClassIndexOfVehicle, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetVehicleOfClass", _wrap_RoutingModel_GetVehicleOfClass, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetVehicleClassesCount", _wrap_RoutingModel_GetVehicleClassesCount, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetSameVehicleIndicesOfIndex", _wrap_RoutingModel_GetSameVehicleIndicesOfIndex, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetVehicleTypeContainer", _wrap_RoutingModel_GetVehicleTypeContainer, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_ArcIsMoreConstrainedThanArc", _wrap_RoutingModel_ArcIsMoreConstrainedThanArc, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_DebugOutputAssignment", _wrap_RoutingModel_DebugOutputAssignment, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_CheckIfAssignmentIsFeasible", _wrap_RoutingModel_CheckIfAssignmentIsFeasible, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_solver", _wrap_RoutingModel_solver, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_CheckLimit", _wrap_RoutingModel_CheckLimit, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_RemainingTime", _wrap_RoutingModel_RemainingTime, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_UpdateTimeLimit", _wrap_RoutingModel_UpdateTimeLimit, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_TimeBuffer", _wrap_RoutingModel_TimeBuffer, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetMutableCPSatInterrupt", _wrap_RoutingModel_GetMutableCPSatInterrupt, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetMutableCPInterrupt", _wrap_RoutingModel_GetMutableCPInterrupt, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_CancelSearch", _wrap_RoutingModel_CancelSearch, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_nodes", _wrap_RoutingModel_nodes, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_vehicles", _wrap_RoutingModel_vehicles, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_Size", _wrap_RoutingModel_Size, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetNumberOfDecisionsInFirstSolution", _wrap_RoutingModel_GetNumberOfDecisionsInFirstSolution, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetNumberOfRejectsInFirstSolution", _wrap_RoutingModel_GetNumberOfRejectsInFirstSolution, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetAutomaticFirstSolutionStrategy", _wrap_RoutingModel_GetAutomaticFirstSolutionStrategy, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_IsMatchingModel", _wrap_RoutingModel_IsMatchingModel, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_AreRoutesInterdependent", _wrap_RoutingModel_AreRoutesInterdependent, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_MakeGuidedSlackFinalizer", _wrap_RoutingModel_MakeGuidedSlackFinalizer, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_MakeSelfDependentDimensionFinalizer", _wrap_RoutingModel_MakeSelfDependentDimensionFinalizer, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_GetPathsMetadata", _wrap_RoutingModel_GetPathsMetadata, METH_VARARGS, NULL},
	 { (char *)"RoutingModel_swigregister", RoutingModel_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_RoutingModelVisitor", _wrap_new_RoutingModelVisitor, METH_VARARGS, NULL},
	 { (char *)"delete_RoutingModelVisitor", _wrap_delete_RoutingModelVisitor, METH_VARARGS, NULL},
	 { (char *)"RoutingModelVisitor_swigregister", RoutingModelVisitor_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_GlobalVehicleBreaksConstraint", _wrap_new_GlobalVehicleBreaksConstraint, METH_VARARGS, NULL},
	 { (char *)"GlobalVehicleBreaksConstraint_DebugString", _wrap_GlobalVehicleBreaksConstraint_DebugString, METH_VARARGS, NULL},
	 { (char *)"GlobalVehicleBreaksConstraint_Post", _wrap_GlobalVehicleBreaksConstraint_Post, METH_VARARGS, NULL},
	 { (char *)"GlobalVehicleBreaksConstraint_InitialPropagateWrapper", _wrap_GlobalVehicleBreaksConstraint_InitialPropagateWrapper, METH_VARARGS, NULL},
	 { (char *)"delete_GlobalVehicleBreaksConstraint", _wrap_delete_GlobalVehicleBreaksConstraint, METH_VARARGS, NULL},
	 { (char *)"GlobalVehicleBreaksConstraint_swigregister", GlobalVehicleBreaksConstraint_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_TypeRegulationsChecker", _wrap_delete_TypeRegulationsChecker, METH_VARARGS, NULL},
	 { (char *)"TypeRegulationsChecker_CheckVehicle", _wrap_TypeRegulationsChecker_CheckVehicle, METH_VARARGS, NULL},
	 { (char *)"TypeRegulationsChecker_swigregister", TypeRegulationsChecker_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TypeIncompatibilityChecker", _wrap_new_TypeIncompatibilityChecker, METH_VARARGS, NULL},
	 { (char *)"delete_TypeIncompatibilityChecker", _wrap_delete_TypeIncompatibilityChecker, METH_VARARGS, NULL},
	 { (char *)"TypeIncompatibilityChecker_swigregister", TypeIncompatibilityChecker_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TypeRequirementChecker", _wrap_new_TypeRequirementChecker, METH_VARARGS, NULL},
	 { (char *)"delete_TypeRequirementChecker", _wrap_delete_TypeRequirementChecker, METH_VARARGS, NULL},
	 { (char *)"TypeRequirementChecker_swigregister", TypeRequirementChecker_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_TypeRegulationsConstraint", _wrap_new_TypeRegulationsConstraint, METH_VARARGS, NULL},
	 { (char *)"TypeRegulationsConstraint_Post", _wrap_TypeRegulationsConstraint_Post, METH_VARARGS, NULL},
	 { (char *)"TypeRegulationsConstraint_InitialPropagateWrapper", _wrap_TypeRegulationsConstraint_InitialPropagateWrapper, METH_VARARGS, NULL},
	 { (char *)"delete_TypeRegulationsConstraint", _wrap_delete_TypeRegulationsConstraint, METH_VARARGS, NULL},
	 { (char *)"TypeRegulationsConstraint_swigregister", TypeRegulationsConstraint_swigregister, METH_VARARGS, NULL},
	 { (char *)"BoundCost_bound_set", _wrap_BoundCost_bound_set, METH_VARARGS, NULL},
	 { (char *)"BoundCost_bound_get", _wrap_BoundCost_bound_get, METH_VARARGS, NULL},
	 { (char *)"BoundCost_cost_set", _wrap_BoundCost_cost_set, METH_VARARGS, NULL},
	 { (char *)"BoundCost_cost_get", _wrap_BoundCost_cost_get, METH_VARARGS, NULL},
	 { (char *)"new_BoundCost", _wrap_new_BoundCost, METH_VARARGS, NULL},
	 { (char *)"delete_BoundCost", _wrap_delete_BoundCost, METH_VARARGS, NULL},
	 { (char *)"BoundCost_swigregister", BoundCost_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_SimpleBoundCosts", _wrap_new_SimpleBoundCosts, METH_VARARGS, NULL},
	 { (char *)"SimpleBoundCosts_bound_cost", _wrap_SimpleBoundCosts_bound_cost, METH_VARARGS, NULL},
	 { (char *)"SimpleBoundCosts_size", _wrap_SimpleBoundCosts_size, METH_VARARGS, NULL},
	 { (char *)"delete_SimpleBoundCosts", _wrap_delete_SimpleBoundCosts, METH_VARARGS, NULL},
	 { (char *)"SimpleBoundCosts_swigregister", SimpleBoundCosts_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_RoutingDimension", _wrap_delete_RoutingDimension, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_model", _wrap_RoutingDimension_model, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_GetTransitValue", _wrap_RoutingDimension_GetTransitValue, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_GetTransitValueFromClass", _wrap_RoutingDimension_GetTransitValueFromClass, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_CumulVar", _wrap_RoutingDimension_CumulVar, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_TransitVar", _wrap_RoutingDimension_TransitVar, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_FixedTransitVar", _wrap_RoutingDimension_FixedTransitVar, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_SlackVar", _wrap_RoutingDimension_SlackVar, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_SetSpanUpperBoundForVehicle", _wrap_RoutingDimension_SetSpanUpperBoundForVehicle, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_SetSpanCostCoefficientForVehicle", _wrap_RoutingDimension_SetSpanCostCoefficientForVehicle, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_SetSpanCostCoefficientForAllVehicles", _wrap_RoutingDimension_SetSpanCostCoefficientForAllVehicles, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_SetGlobalSpanCostCoefficient", _wrap_RoutingDimension_SetGlobalSpanCostCoefficient, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_SetCumulVarSoftUpperBound", _wrap_RoutingDimension_SetCumulVarSoftUpperBound, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_HasCumulVarSoftUpperBound", _wrap_RoutingDimension_HasCumulVarSoftUpperBound, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_GetCumulVarSoftUpperBound", _wrap_RoutingDimension_GetCumulVarSoftUpperBound, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_GetCumulVarSoftUpperBoundCoefficient", _wrap_RoutingDimension_GetCumulVarSoftUpperBoundCoefficient, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_SetCumulVarSoftLowerBound", _wrap_RoutingDimension_SetCumulVarSoftLowerBound, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_HasCumulVarSoftLowerBound", _wrap_RoutingDimension_HasCumulVarSoftLowerBound, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_GetCumulVarSoftLowerBound", _wrap_RoutingDimension_GetCumulVarSoftLowerBound, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_GetCumulVarSoftLowerBoundCoefficient", _wrap_RoutingDimension_GetCumulVarSoftLowerBoundCoefficient, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_SetBreakIntervalsOfVehicle", _wrap_RoutingDimension_SetBreakIntervalsOfVehicle, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_SetBreakDistanceDurationOfVehicle", _wrap_RoutingDimension_SetBreakDistanceDurationOfVehicle, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_InitializeBreaks", _wrap_RoutingDimension_InitializeBreaks, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_HasBreakConstraints", _wrap_RoutingDimension_HasBreakConstraints, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_GetPreTravelEvaluatorOfVehicle", _wrap_RoutingDimension_GetPreTravelEvaluatorOfVehicle, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_GetPostTravelEvaluatorOfVehicle", _wrap_RoutingDimension_GetPostTravelEvaluatorOfVehicle, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_base_dimension", _wrap_RoutingDimension_base_dimension, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_ShortestTransitionSlack", _wrap_RoutingDimension_ShortestTransitionSlack, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_name", _wrap_RoutingDimension_name, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_SetPickupToDeliveryLimitFunctionForPair", _wrap_RoutingDimension_SetPickupToDeliveryLimitFunctionForPair, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_HasPickupToDeliveryLimits", _wrap_RoutingDimension_HasPickupToDeliveryLimits, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_AddNodePrecedence", _wrap_RoutingDimension_AddNodePrecedence, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_GetSpanUpperBoundForVehicle", _wrap_RoutingDimension_GetSpanUpperBoundForVehicle, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_GetSpanCostCoefficientForVehicle", _wrap_RoutingDimension_GetSpanCostCoefficientForVehicle, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_global_span_cost_coefficient", _wrap_RoutingDimension_global_span_cost_coefficient, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_GetGlobalOptimizerOffset", _wrap_RoutingDimension_GetGlobalOptimizerOffset, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_GetLocalOptimizerOffsetForVehicle", _wrap_RoutingDimension_GetLocalOptimizerOffsetForVehicle, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_SetSoftSpanUpperBoundForVehicle", _wrap_RoutingDimension_SetSoftSpanUpperBoundForVehicle, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_HasSoftSpanUpperBounds", _wrap_RoutingDimension_HasSoftSpanUpperBounds, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_GetSoftSpanUpperBoundForVehicle", _wrap_RoutingDimension_GetSoftSpanUpperBoundForVehicle, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_SetQuadraticCostSoftSpanUpperBoundForVehicle", _wrap_RoutingDimension_SetQuadraticCostSoftSpanUpperBoundForVehicle, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_HasQuadraticCostSoftSpanUpperBounds", _wrap_RoutingDimension_HasQuadraticCostSoftSpanUpperBounds, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_GetQuadraticCostSoftSpanUpperBoundForVehicle", _wrap_RoutingDimension_GetQuadraticCostSoftSpanUpperBoundForVehicle, METH_VARARGS, NULL},
	 { (char *)"RoutingDimension_swigregister", RoutingDimension_swigregister, METH_VARARGS, NULL},
	 { (char *)"SolveModelWithSat", _wrap_SolveModelWithSat, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_operations_research__PathOperatorTo_p_operations_research__IntVarLocalSearchOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::IntVarLocalSearchOperator *)  ((operations_research::PathOperator *) x));
}
static void *_p_operations_research__BaseLnsTo_p_operations_research__IntVarLocalSearchOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::IntVarLocalSearchOperator *)  ((operations_research::BaseLns *) x));
}
static void *_p_operations_research__ChangeValueTo_p_operations_research__IntVarLocalSearchOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::IntVarLocalSearchOperator *)  ((operations_research::ChangeValue *) x));
}
static void *_p_operations_research__IntVarLocalSearchOperatorTo_p_operations_research__LocalSearchOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::LocalSearchOperator *)  ((operations_research::IntVarLocalSearchOperator *) x));
}
static void *_p_operations_research__PathOperatorTo_p_operations_research__LocalSearchOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::LocalSearchOperator *) (operations_research::IntVarLocalSearchOperator *) ((operations_research::PathOperator *) x));
}
static void *_p_operations_research__BaseLnsTo_p_operations_research__LocalSearchOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::LocalSearchOperator *) (operations_research::IntVarLocalSearchOperator *) ((operations_research::BaseLns *) x));
}
static void *_p_operations_research__ChangeValueTo_p_operations_research__LocalSearchOperator(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::LocalSearchOperator *) (operations_research::IntVarLocalSearchOperator *) ((operations_research::ChangeValue *) x));
}
static void *_p_operations_research__CastConstraintTo_p_operations_research__Constraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::Constraint *)  ((operations_research::CastConstraint *) x));
}
static void *_p_operations_research__DisjunctiveConstraintTo_p_operations_research__Constraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::Constraint *)  ((operations_research::DisjunctiveConstraint *) x));
}
static void *_p_operations_research__GlobalVehicleBreaksConstraintTo_p_operations_research__Constraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::Constraint *)  ((operations_research::GlobalVehicleBreaksConstraint *) x));
}
static void *_p_operations_research__TypeRegulationsConstraintTo_p_operations_research__Constraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::Constraint *)  ((operations_research::TypeRegulationsConstraint *) x));
}
static void *_p_operations_research__PackTo_p_operations_research__Constraint(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::Constraint *)  ((operations_research::Pack *) x));
}
static void *_p_operations_research__RegularLimitTo_p_operations_research__SearchLimit(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::SearchLimit *)  ((operations_research::RegularLimit *) x));
}
static void *_p_operations_research__ImprovementSearchLimitTo_p_operations_research__SearchLimit(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::SearchLimit *)  ((operations_research::ImprovementSearchLimit *) x));
}
static void *_p_operations_research__BooleanVarTo_p_operations_research__PropagationBaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::PropagationBaseObject *) (operations_research::IntExpr *)(operations_research::IntVar *) ((operations_research::BooleanVar *) x));
}
static void *_p_operations_research__ConstraintTo_p_operations_research__PropagationBaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::PropagationBaseObject *)  ((operations_research::Constraint *) x));
}
static void *_p_operations_research__CastConstraintTo_p_operations_research__PropagationBaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::PropagationBaseObject *) (operations_research::Constraint *) ((operations_research::CastConstraint *) x));
}
static void *_p_operations_research__DisjunctiveConstraintTo_p_operations_research__PropagationBaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::PropagationBaseObject *) (operations_research::Constraint *) ((operations_research::DisjunctiveConstraint *) x));
}
static void *_p_operations_research__GlobalVehicleBreaksConstraintTo_p_operations_research__PropagationBaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::PropagationBaseObject *) (operations_research::Constraint *) ((operations_research::GlobalVehicleBreaksConstraint *) x));
}
static void *_p_operations_research__TypeRegulationsConstraintTo_p_operations_research__PropagationBaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::PropagationBaseObject *) (operations_research::Constraint *) ((operations_research::TypeRegulationsConstraint *) x));
}
static void *_p_operations_research__IntVarTo_p_operations_research__PropagationBaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::PropagationBaseObject *) (operations_research::IntExpr *) ((operations_research::IntVar *) x));
}
static void *_p_operations_research__SequenceVarTo_p_operations_research__PropagationBaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::PropagationBaseObject *)  ((operations_research::SequenceVar *) x));
}
static void *_p_operations_research__IntervalVarTo_p_operations_research__PropagationBaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::PropagationBaseObject *)  ((operations_research::IntervalVar *) x));
}
static void *_p_operations_research__IntExprTo_p_operations_research__PropagationBaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::PropagationBaseObject *)  ((operations_research::IntExpr *) x));
}
static void *_p_operations_research__AssignmentTo_p_operations_research__PropagationBaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::PropagationBaseObject *)  ((operations_research::Assignment *) x));
}
static void *_p_operations_research__PackTo_p_operations_research__PropagationBaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::PropagationBaseObject *) (operations_research::Constraint *) ((operations_research::Pack *) x));
}
static void *_p_operations_research__BaseIntExprTo_p_operations_research__PropagationBaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::PropagationBaseObject *) (operations_research::IntExpr *) ((operations_research::BaseIntExpr *) x));
}
static void *_p_operations_research__DisjunctiveConstraintTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *) (operations_research::PropagationBaseObject *)(operations_research::Constraint *) ((operations_research::DisjunctiveConstraint *) x));
}
static void *_p_operations_research__ConstraintTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *) (operations_research::PropagationBaseObject *) ((operations_research::Constraint *) x));
}
static void *_p_operations_research__CastConstraintTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *) (operations_research::PropagationBaseObject *)(operations_research::Constraint *) ((operations_research::CastConstraint *) x));
}
static void *_p_operations_research__GlobalVehicleBreaksConstraintTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *) (operations_research::PropagationBaseObject *)(operations_research::Constraint *) ((operations_research::GlobalVehicleBreaksConstraint *) x));
}
static void *_p_operations_research__TypeRegulationsConstraintTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *) (operations_research::PropagationBaseObject *)(operations_research::Constraint *) ((operations_research::TypeRegulationsConstraint *) x));
}
static void *_p_operations_research__SymmetryBreakerTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *) (operations_research::DecisionVisitor *) ((operations_research::SymmetryBreaker *) x));
}
static void *_p_operations_research__AssignmentTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *) (operations_research::PropagationBaseObject *) ((operations_research::Assignment *) x));
}
static void *_p_operations_research__IntVarTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *) (operations_research::PropagationBaseObject *)(operations_research::IntExpr *) ((operations_research::IntVar *) x));
}
static void *_p_operations_research__RegularLimitTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *) (operations_research::SearchMonitor *)(operations_research::SearchLimit *) ((operations_research::RegularLimit *) x));
}
static void *_p_operations_research__DemonTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *)  ((operations_research::Demon *) x));
}
static void *_p_operations_research__PathOperatorTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *) (operations_research::LocalSearchOperator *)(operations_research::IntVarLocalSearchOperator *) ((operations_research::PathOperator *) x));
}
static void *_p_operations_research__IntVarLocalSearchOperatorTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *) (operations_research::LocalSearchOperator *) ((operations_research::IntVarLocalSearchOperator *) x));
}
static void *_p_operations_research__LocalSearchOperatorTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *)  ((operations_research::LocalSearchOperator *) x));
}
static void *_p_operations_research__IntVarIteratorTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *)  ((operations_research::IntVarIterator *) x));
}
static void *_p_operations_research__DecisionBuilderTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *)  ((operations_research::DecisionBuilder *) x));
}
static void *_p_operations_research__DecisionVisitorTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *)  ((operations_research::DecisionVisitor *) x));
}
static void *_p_operations_research__ModelVisitorTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *)  ((operations_research::ModelVisitor *) x));
}
static void *_p_operations_research__RoutingModelVisitorTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *)  ((operations_research::RoutingModelVisitor *) x));
}
static void *_p_operations_research__OptimizeVarTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *) (operations_research::SearchMonitor *)(operations_research::ObjectiveMonitor *) ((operations_research::OptimizeVar *) x));
}
static void *_p_operations_research__ChangeValueTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *) (operations_research::LocalSearchOperator *)(operations_research::IntVarLocalSearchOperator *) ((operations_research::ChangeValue *) x));
}
static void *_p_operations_research__DecisionTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *)  ((operations_research::Decision *) x));
}
static void *_p_operations_research__PropagationBaseObjectTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *)  ((operations_research::PropagationBaseObject *) x));
}
static void *_p_operations_research__SequenceVarTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *) (operations_research::PropagationBaseObject *) ((operations_research::SequenceVar *) x));
}
static void *_p_operations_research__BaseLnsTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *) (operations_research::LocalSearchOperator *)(operations_research::IntVarLocalSearchOperator *) ((operations_research::BaseLns *) x));
}
static void *_p_operations_research__SearchLogTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *) (operations_research::SearchMonitor *) ((operations_research::SearchLog *) x));
}
static void *_p_operations_research__IntVarLocalSearchFilterTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *) (operations_research::LocalSearchFilter *) ((operations_research::IntVarLocalSearchFilter *) x));
}
static void *_p_operations_research__LocalSearchFilterTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *)  ((operations_research::LocalSearchFilter *) x));
}
static void *_p_operations_research__SolutionCollectorTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *) (operations_research::SearchMonitor *) ((operations_research::SolutionCollector *) x));
}
static void *_p_operations_research__PackTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *) (operations_research::PropagationBaseObject *)(operations_research::Constraint *) ((operations_research::Pack *) x));
}
static void *_p_operations_research__SolutionPoolTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *)  ((operations_research::SolutionPool *) x));
}
static void *_p_operations_research__IntervalVarTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *) (operations_research::PropagationBaseObject *) ((operations_research::IntervalVar *) x));
}
static void *_p_operations_research__PropagationMonitorTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *) (operations_research::SearchMonitor *) ((operations_research::PropagationMonitor *) x));
}
static void *_p_operations_research__SearchMonitorTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *)  ((operations_research::SearchMonitor *) x));
}
static void *_p_operations_research__ObjectiveMonitorTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *) (operations_research::SearchMonitor *) ((operations_research::ObjectiveMonitor *) x));
}
static void *_p_operations_research__BaseIntExprTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *) (operations_research::PropagationBaseObject *)(operations_research::IntExpr *) ((operations_research::BaseIntExpr *) x));
}
static void *_p_operations_research__IntExprTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *) (operations_research::PropagationBaseObject *) ((operations_research::IntExpr *) x));
}
static void *_p_operations_research__LocalSearchMonitorTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *) (operations_research::SearchMonitor *) ((operations_research::LocalSearchMonitor *) x));
}
static void *_p_operations_research__ImprovementSearchLimitTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *) (operations_research::SearchMonitor *)(operations_research::SearchLimit *) ((operations_research::ImprovementSearchLimit *) x));
}
static void *_p_operations_research__SearchLimitTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *) (operations_research::SearchMonitor *) ((operations_research::SearchLimit *) x));
}
static void *_p_operations_research__LocalSearchFilterManagerTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *)  ((operations_research::LocalSearchFilterManager *) x));
}
static void *_p_operations_research__BooleanVarTo_p_operations_research__BaseObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::BaseObject *) (operations_research::PropagationBaseObject *)(operations_research::IntExpr *)(operations_research::IntVar *) ((operations_research::BooleanVar *) x));
}
static void *_p_operations_research__IntVarLocalSearchFilterTo_p_operations_research__LocalSearchFilter(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::LocalSearchFilter *)  ((operations_research::IntVarLocalSearchFilter *) x));
}
static void *_p_operations_research__OptimizeVarTo_p_operations_research__ObjectiveMonitor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::ObjectiveMonitor *)  ((operations_research::OptimizeVar *) x));
}
static void *_p_operations_research__ObjectiveMonitorTo_p_operations_research__SearchMonitor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::SearchMonitor *)  ((operations_research::ObjectiveMonitor *) x));
}
static void *_p_operations_research__OptimizeVarTo_p_operations_research__SearchMonitor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::SearchMonitor *) (operations_research::ObjectiveMonitor *) ((operations_research::OptimizeVar *) x));
}
static void *_p_operations_research__PropagationMonitorTo_p_operations_research__SearchMonitor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::SearchMonitor *)  ((operations_research::PropagationMonitor *) x));
}
static void *_p_operations_research__LocalSearchMonitorTo_p_operations_research__SearchMonitor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::SearchMonitor *)  ((operations_research::LocalSearchMonitor *) x));
}
static void *_p_operations_research__SolutionCollectorTo_p_operations_research__SearchMonitor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::SearchMonitor *)  ((operations_research::SolutionCollector *) x));
}
static void *_p_operations_research__RegularLimitTo_p_operations_research__SearchMonitor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::SearchMonitor *) (operations_research::SearchLimit *) ((operations_research::RegularLimit *) x));
}
static void *_p_operations_research__SearchLimitTo_p_operations_research__SearchMonitor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::SearchMonitor *)  ((operations_research::SearchLimit *) x));
}
static void *_p_operations_research__ImprovementSearchLimitTo_p_operations_research__SearchMonitor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::SearchMonitor *) (operations_research::SearchLimit *) ((operations_research::ImprovementSearchLimit *) x));
}
static void *_p_operations_research__SearchLogTo_p_operations_research__SearchMonitor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::SearchMonitor *)  ((operations_research::SearchLog *) x));
}
static void *_p_operations_research__BooleanVarTo_p_operations_research__IntExpr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::IntExpr *) (operations_research::IntVar *) ((operations_research::BooleanVar *) x));
}
static void *_p_operations_research__IntVarTo_p_operations_research__IntExpr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::IntExpr *)  ((operations_research::IntVar *) x));
}
static void *_p_operations_research__BaseIntExprTo_p_operations_research__IntExpr(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::IntExpr *)  ((operations_research::BaseIntExpr *) x));
}
static void *_p_operations_research__TypeIncompatibilityCheckerTo_p_operations_research__TypeRegulationsChecker(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::TypeRegulationsChecker *)  ((operations_research::TypeIncompatibilityChecker *) x));
}
static void *_p_operations_research__TypeRequirementCheckerTo_p_operations_research__TypeRegulationsChecker(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::TypeRegulationsChecker *)  ((operations_research::TypeRequirementChecker *) x));
}
static void *_p_operations_research__BooleanVarTo_p_operations_research__IntVar(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::IntVar *)  ((operations_research::BooleanVar *) x));
}
static void *_p_operations_research__NumericalRevT_long_tTo_p_operations_research__RevT_long_t(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::Rev< long > *)  ((operations_research::NumericalRev< long > *) x));
}
static void *_p_operations_research__SymmetryBreakerTo_p_operations_research__DecisionVisitor(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::DecisionVisitor *)  ((operations_research::SymmetryBreaker *) x));
}
static void *_p_operations_research__IntVarElementTo_p_operations_research__AssignmentElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::AssignmentElement *)  ((operations_research::IntVarElement *) x));
}
static void *_p_operations_research__IntervalVarElementTo_p_operations_research__AssignmentElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::AssignmentElement *)  ((operations_research::IntervalVarElement *) x));
}
static void *_p_operations_research__SequenceVarElementTo_p_operations_research__AssignmentElement(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((operations_research::AssignmentElement *)  ((operations_research::SequenceVarElement *) x));
}
static swig_type_info _swigt__p_CostClassIndex = {"_p_CostClassIndex", "CostClassIndex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DimensionIndex = {"_p_DimensionIndex", "DimensionIndex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DisjunctionIndex = {"_p_DisjunctionIndex", "DisjunctionIndex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PickupToDeliveryLimitFunction = {"_p_PickupToDeliveryLimitFunction", "PickupToDeliveryLimitFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RoutingDimensionIndex = {"_p_RoutingDimensionIndex", "RoutingDimensionIndex *|operations_research::RoutingModel::DimensionIndex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RoutingDisjunctionIndex = {"_p_RoutingDisjunctionIndex", "RoutingDisjunctionIndex *|operations_research::RoutingModel::DisjunctionIndex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TransitCallback1 = {"_p_TransitCallback1", "TransitCallback1 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_TransitCallback2 = {"_p_TransitCallback2", "TransitCallback2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_VehicleClassIndex = {"_p_VehicleClassIndex", "VehicleClassIndex *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_absl__Duration = {"_p_absl__Duration", "absl::Duration *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_absl__SpanT_int64_t_const_t = {"_p_absl__SpanT_int64_t_const_t", "absl::Span< int64_t const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_absl__SpanT_int_const_t = {"_p_absl__SpanT_int_const_t", "absl::Span< int const > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_absl__flat_hash_setT_int_t = {"_p_absl__flat_hash_setT_int_t", "absl::flat_hash_set< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *|int_least32_t *|int32_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "intptr_t *|int_least64_t *|int_fast32_t *|int_fast64_t *|int64_t *|long *|int_fast16_t *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__Assignment = {"_p_operations_research__Assignment", "operations_research::Assignment *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__AssignmentContainerT_operations_research__IntVar_operations_research__IntVarElement_t = {"_p_operations_research__AssignmentContainerT_operations_research__IntVar_operations_research__IntVarElement_t", "operations_research::AssignmentContainer< operations_research::IntVar,operations_research::IntVarElement > *|operations_research::Assignment::IntContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__AssignmentContainerT_operations_research__IntervalVar_operations_research__IntervalVarElement_t = {"_p_operations_research__AssignmentContainerT_operations_research__IntervalVar_operations_research__IntervalVarElement_t", "operations_research::AssignmentContainer< operations_research::IntervalVar,operations_research::IntervalVarElement > *|operations_research::Assignment::IntervalContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__AssignmentContainerT_operations_research__SequenceVar_operations_research__SequenceVarElement_t = {"_p_operations_research__AssignmentContainerT_operations_research__SequenceVar_operations_research__SequenceVarElement_t", "operations_research::AssignmentContainer< operations_research::SequenceVar,operations_research::SequenceVarElement > *|operations_research::Assignment::SequenceContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__AssignmentElement = {"_p_operations_research__AssignmentElement", "operations_research::AssignmentElement *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__BaseLns = {"_p_operations_research__BaseLns", "operations_research::BaseLns *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__BaseObject = {"_p_operations_research__BaseObject", "operations_research::BaseObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__CastConstraint = {"_p_operations_research__CastConstraint", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_operations_research__SymmetryBreaker = {"_p_operations_research__SymmetryBreaker", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_operations_research__SearchLog = {"_p_operations_research__SearchLog", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_operations_research__BaseIntExpr = {"_p_operations_research__BaseIntExpr", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_operations_research__PropagationMonitor = {"_p_operations_research__PropagationMonitor", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_operations_research__ImprovementSearchLimit = {"_p_operations_research__ImprovementSearchLimit", 0, 0, 0, 0, 0};
static swig_type_info _swigt__p_operations_research__BooleanVar = {"_p_operations_research__BooleanVar", "operations_research::BooleanVar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__BoundCost = {"_p_operations_research__BoundCost", "operations_research::BoundCost *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__ChangeValue = {"_p_operations_research__ChangeValue", "operations_research::ChangeValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__Constraint = {"_p_operations_research__Constraint", "operations_research::Constraint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__Decision = {"_p_operations_research__Decision", "operations_research::Decision *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__DecisionBuilder = {"_p_operations_research__DecisionBuilder", "operations_research::DecisionBuilder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__DecisionVisitor = {"_p_operations_research__DecisionVisitor", "operations_research::DecisionVisitor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__DefaultPhaseParameters = {"_p_operations_research__DefaultPhaseParameters", "operations_research::DefaultPhaseParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__Demon = {"_p_operations_research__Demon", "operations_research::Demon *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__DisjunctiveConstraint = {"_p_operations_research__DisjunctiveConstraint", "operations_research::DisjunctiveConstraint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__FirstSolutionStrategy = {"_p_operations_research__FirstSolutionStrategy", "operations_research::FirstSolutionStrategy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__GlobalDimensionCumulOptimizer = {"_p_operations_research__GlobalDimensionCumulOptimizer", "operations_research::GlobalDimensionCumulOptimizer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__GlobalVehicleBreaksConstraint = {"_p_operations_research__GlobalVehicleBreaksConstraint", "operations_research::GlobalVehicleBreaksConstraint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__IntExpr = {"_p_operations_research__IntExpr", "operations_research::IntExpr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__IntTupleSet = {"_p_operations_research__IntTupleSet", "operations_research::IntTupleSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__IntVar = {"_p_operations_research__IntVar", "operations_research::IntVar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__IntVarElement = {"_p_operations_research__IntVarElement", "operations_research::IntVarElement *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__IntVarIterator = {"_p_operations_research__IntVarIterator", "operations_research::IntVarIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__IntVarLocalSearchFilter = {"_p_operations_research__IntVarLocalSearchFilter", "operations_research::IntVarLocalSearchFilter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__IntVarLocalSearchOperator = {"_p_operations_research__IntVarLocalSearchOperator", "operations_research::IntVarLocalSearchOperator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__IntervalVar = {"_p_operations_research__IntervalVar", "operations_research::IntervalVar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__IntervalVarElement = {"_p_operations_research__IntervalVarElement", "operations_research::IntervalVarElement *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__LocalDimensionCumulOptimizer = {"_p_operations_research__LocalDimensionCumulOptimizer", "operations_research::LocalDimensionCumulOptimizer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__LocalSearchFilter = {"_p_operations_research__LocalSearchFilter", "operations_research::LocalSearchFilter *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__LocalSearchFilterManager = {"_p_operations_research__LocalSearchFilterManager", "operations_research::LocalSearchFilterManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__LocalSearchMetaheuristic = {"_p_operations_research__LocalSearchMetaheuristic", "operations_research::LocalSearchMetaheuristic *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__LocalSearchMonitor = {"_p_operations_research__LocalSearchMonitor", "operations_research::LocalSearchMonitor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__LocalSearchOperator = {"_p_operations_research__LocalSearchOperator", "operations_research::LocalSearchOperator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__LocalSearchPhaseParameters = {"_p_operations_research__LocalSearchPhaseParameters", "operations_research::LocalSearchPhaseParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__ModelVisitor = {"_p_operations_research__ModelVisitor", "operations_research::ModelVisitor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__NumericalRevT_long_t = {"_p_operations_research__NumericalRevT_long_t", "operations_research::NumericalRev< long > *|operations_research::NumericalRev< int64_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__ObjectiveMonitor = {"_p_operations_research__ObjectiveMonitor", "operations_research::ObjectiveMonitor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__OptimizeVar = {"_p_operations_research__OptimizeVar", "operations_research::OptimizeVar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__Pack = {"_p_operations_research__Pack", "operations_research::Pack *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__PathOperator = {"_p_operations_research__PathOperator", "operations_research::PathOperator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__PathsMetadata = {"_p_operations_research__PathsMetadata", "operations_research::PathsMetadata *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__PropagationBaseObject = {"_p_operations_research__PropagationBaseObject", "operations_research::PropagationBaseObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__RegularLimit = {"_p_operations_research__RegularLimit", "operations_research::RegularLimit *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__RevT_bool_t = {"_p_operations_research__RevT_bool_t", "operations_research::Rev< bool > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__RevT_long_t = {"_p_operations_research__RevT_long_t", "operations_research::Rev< long > *|operations_research::Rev< int64_t > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__RoutingDimension = {"_p_operations_research__RoutingDimension", "operations_research::RoutingDimension *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__RoutingIndexManager = {"_p_operations_research__RoutingIndexManager", "operations_research::RoutingIndexManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__RoutingModel = {"_p_operations_research__RoutingModel", "operations_research::RoutingModel *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__RoutingModelVisitor = {"_p_operations_research__RoutingModelVisitor", "operations_research::RoutingModelVisitor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__RoutingModel__NodeNeighborsByCostClass = {"_p_operations_research__RoutingModel__NodeNeighborsByCostClass", "operations_research::RoutingModel::NodeNeighborsByCostClass *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__RoutingModel__ResourceGroup = {"_p_operations_research__RoutingModel__ResourceGroup", "operations_research::RoutingModel::ResourceGroup *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__RoutingModel__VehicleTypeContainer = {"_p_operations_research__RoutingModel__VehicleTypeContainer", "operations_research::RoutingModel::VehicleTypeContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__SearchLimit = {"_p_operations_research__SearchLimit", "operations_research::SearchLimit *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__SearchMonitor = {"_p_operations_research__SearchMonitor", "operations_research::SearchMonitor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__SequenceVar = {"_p_operations_research__SequenceVar", "operations_research::SequenceVar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__SequenceVarElement = {"_p_operations_research__SequenceVarElement", "operations_research::SequenceVarElement *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__SimpleBoundCosts = {"_p_operations_research__SimpleBoundCosts", "operations_research::SimpleBoundCosts *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__SolutionCollector = {"_p_operations_research__SolutionCollector", "operations_research::SolutionCollector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__SolutionPool = {"_p_operations_research__SolutionPool", "operations_research::SolutionPool *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__Solver = {"_p_operations_research__Solver", "operations_research::Solver *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__Solver__SearchLogParameters = {"_p_operations_research__Solver__SearchLogParameters", "operations_research::Solver::SearchLogParameters *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__TypeIncompatibilityChecker = {"_p_operations_research__TypeIncompatibilityChecker", "operations_research::TypeIncompatibilityChecker *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__TypeRegulationsChecker = {"_p_operations_research__TypeRegulationsChecker", "operations_research::TypeRegulationsChecker *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__TypeRegulationsConstraint = {"_p_operations_research__TypeRegulationsConstraint", "operations_research::TypeRegulationsConstraint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_operations_research__TypeRequirementChecker = {"_p_operations_research__TypeRequirementChecker", "operations_research::TypeRequirementChecker *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__atomicT_bool_t = {"_p_std__atomicT_bool_t", "std::atomic< bool > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_long_flongF_t = {"_p_std__functionT_long_flongF_t", "std::function< long (long) > *|operations_research::RoutingTransitCallback1 *|std::function< int64_t (int64_t) > *|operations_research::RoutingModel::TransitCallback1 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_long_flong_longF_t = {"_p_std__functionT_long_flong_longF_t", "std::function< long (long,long) > *|operations_research::RoutingModel::TransitCallback2 *|operations_research::RoutingTransitCallback2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_std__vectorT_int_t_const_Rfint_intF_t = {"_p_std__functionT_std__vectorT_int_t_const_Rfint_intF_t", "std::function< std::vector< int > const &(int,int) > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__ostream = {"_p_std__ostream", "std::ostream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_absl__flat_hash_setT_int_t_t = {"_p_std__vectorT_absl__flat_hash_setT_int_t_t", "std::vector< absl::flat_hash_set< int > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_operations_research__Assignment_const_p_t = {"_p_std__vectorT_operations_research__Assignment_const_p_t", "std::vector< operations_research::Assignment const * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_operations_research__LocalSearchFilterManager__FilterEvent_t = {"_p_std__vectorT_operations_research__LocalSearchFilterManager__FilterEvent_t", "std::vector< operations_research::LocalSearchFilterManager::FilterEvent > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_operations_research__RoutingDimension_const_p_t = {"_p_std__vectorT_operations_research__RoutingDimension_const_p_t", "std::vector< operations_research::RoutingDimension const * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_operations_research__RoutingDimension_p_t = {"_p_std__vectorT_operations_research__RoutingDimension_p_t", "std::vector< operations_research::RoutingDimension * > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_operations_research__RoutingModel__PickupDeliveryPosition_t = {"_p_std__vectorT_operations_research__RoutingModel__PickupDeliveryPosition_t", "std::vector< operations_research::RoutingModel::PickupDeliveryPosition > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__pairT_long_long_t_t = {"_p_std__vectorT_std__pairT_long_long_t_t", "std::vector< std::pair< long,long > > *|std::vector< std::pair< int64_t,int64_t > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__unique_ptrT_operations_research__RoutingModel__ResourceGroup_t_t = {"_p_std__vectorT_std__unique_ptrT_operations_research__RoutingModel__ResourceGroup_t_t", "std::vector< std::unique_ptr< operations_research::RoutingModel::ResourceGroup > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__vectorT_long_t_t = {"_p_std__vectorT_std__vectorT_long_t_t", "std::vector< std::vector< long > > *|std::vector< std::vector< int64_t > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uint_least32_t *|uint32_t *|unsigned int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "uintptr_t *|uint_least64_t *|uint_fast32_t *|uint_fast64_t *|uint64_t *|unsigned long *|uint_fast16_t *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_CostClassIndex,
  &_swigt__p_DimensionIndex,
  &_swigt__p_DisjunctionIndex,
  &_swigt__p_PickupToDeliveryLimitFunction,
  &_swigt__p_RoutingDimensionIndex,
  &_swigt__p_RoutingDisjunctionIndex,
  &_swigt__p_TransitCallback1,
  &_swigt__p_TransitCallback2,
  &_swigt__p_VehicleClassIndex,
  &_swigt__p_absl__Duration,
  &_swigt__p_absl__SpanT_int64_t_const_t,
  &_swigt__p_absl__SpanT_int_const_t,
  &_swigt__p_absl__flat_hash_setT_int_t,
  &_swigt__p_bool,
  &_swigt__p_char,
  &_swigt__p_double,
  &_swigt__p_int,
  &_swigt__p_long,
  &_swigt__p_operations_research__Assignment,
  &_swigt__p_operations_research__AssignmentContainerT_operations_research__IntVar_operations_research__IntVarElement_t,
  &_swigt__p_operations_research__AssignmentContainerT_operations_research__IntervalVar_operations_research__IntervalVarElement_t,
  &_swigt__p_operations_research__AssignmentContainerT_operations_research__SequenceVar_operations_research__SequenceVarElement_t,
  &_swigt__p_operations_research__AssignmentElement,
  &_swigt__p_operations_research__BaseIntExpr,
  &_swigt__p_operations_research__BaseLns,
  &_swigt__p_operations_research__BaseObject,
  &_swigt__p_operations_research__BooleanVar,
  &_swigt__p_operations_research__BoundCost,
  &_swigt__p_operations_research__CastConstraint,
  &_swigt__p_operations_research__ChangeValue,
  &_swigt__p_operations_research__Constraint,
  &_swigt__p_operations_research__Decision,
  &_swigt__p_operations_research__DecisionBuilder,
  &_swigt__p_operations_research__DecisionVisitor,
  &_swigt__p_operations_research__DefaultPhaseParameters,
  &_swigt__p_operations_research__Demon,
  &_swigt__p_operations_research__DisjunctiveConstraint,
  &_swigt__p_operations_research__FirstSolutionStrategy,
  &_swigt__p_operations_research__GlobalDimensionCumulOptimizer,
  &_swigt__p_operations_research__GlobalVehicleBreaksConstraint,
  &_swigt__p_operations_research__ImprovementSearchLimit,
  &_swigt__p_operations_research__IntExpr,
  &_swigt__p_operations_research__IntTupleSet,
  &_swigt__p_operations_research__IntVar,
  &_swigt__p_operations_research__IntVarElement,
  &_swigt__p_operations_research__IntVarIterator,
  &_swigt__p_operations_research__IntVarLocalSearchFilter,
  &_swigt__p_operations_research__IntVarLocalSearchOperator,
  &_swigt__p_operations_research__IntervalVar,
  &_swigt__p_operations_research__IntervalVarElement,
  &_swigt__p_operations_research__LocalDimensionCumulOptimizer,
  &_swigt__p_operations_research__LocalSearchFilter,
  &_swigt__p_operations_research__LocalSearchFilterManager,
  &_swigt__p_operations_research__LocalSearchMetaheuristic,
  &_swigt__p_operations_research__LocalSearchMonitor,
  &_swigt__p_operations_research__LocalSearchOperator,
  &_swigt__p_operations_research__LocalSearchPhaseParameters,
  &_swigt__p_operations_research__ModelVisitor,
  &_swigt__p_operations_research__NumericalRevT_long_t,
  &_swigt__p_operations_research__ObjectiveMonitor,
  &_swigt__p_operations_research__OptimizeVar,
  &_swigt__p_operations_research__Pack,
  &_swigt__p_operations_research__PathOperator,
  &_swigt__p_operations_research__PathsMetadata,
  &_swigt__p_operations_research__PropagationBaseObject,
  &_swigt__p_operations_research__PropagationMonitor,
  &_swigt__p_operations_research__RegularLimit,
  &_swigt__p_operations_research__RevT_bool_t,
  &_swigt__p_operations_research__RevT_long_t,
  &_swigt__p_operations_research__RoutingDimension,
  &_swigt__p_operations_research__RoutingIndexManager,
  &_swigt__p_operations_research__RoutingModel,
  &_swigt__p_operations_research__RoutingModelVisitor,
  &_swigt__p_operations_research__RoutingModel__NodeNeighborsByCostClass,
  &_swigt__p_operations_research__RoutingModel__ResourceGroup,
  &_swigt__p_operations_research__RoutingModel__VehicleTypeContainer,
  &_swigt__p_operations_research__SearchLimit,
  &_swigt__p_operations_research__SearchLog,
  &_swigt__p_operations_research__SearchMonitor,
  &_swigt__p_operations_research__SequenceVar,
  &_swigt__p_operations_research__SequenceVarElement,
  &_swigt__p_operations_research__SimpleBoundCosts,
  &_swigt__p_operations_research__SolutionCollector,
  &_swigt__p_operations_research__SolutionPool,
  &_swigt__p_operations_research__Solver,
  &_swigt__p_operations_research__Solver__SearchLogParameters,
  &_swigt__p_operations_research__SymmetryBreaker,
  &_swigt__p_operations_research__TypeIncompatibilityChecker,
  &_swigt__p_operations_research__TypeRegulationsChecker,
  &_swigt__p_operations_research__TypeRegulationsConstraint,
  &_swigt__p_operations_research__TypeRequirementChecker,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_std__atomicT_bool_t,
  &_swigt__p_std__functionT_long_flongF_t,
  &_swigt__p_std__functionT_long_flong_longF_t,
  &_swigt__p_std__functionT_std__vectorT_int_t_const_Rfint_intF_t,
  &_swigt__p_std__ostream,
  &_swigt__p_std__vectorT_absl__flat_hash_setT_int_t_t,
  &_swigt__p_std__vectorT_operations_research__Assignment_const_p_t,
  &_swigt__p_std__vectorT_operations_research__LocalSearchFilterManager__FilterEvent_t,
  &_swigt__p_std__vectorT_operations_research__RoutingDimension_const_p_t,
  &_swigt__p_std__vectorT_operations_research__RoutingDimension_p_t,
  &_swigt__p_std__vectorT_operations_research__RoutingModel__PickupDeliveryPosition_t,
  &_swigt__p_std__vectorT_std__pairT_long_long_t_t,
  &_swigt__p_std__vectorT_std__unique_ptrT_operations_research__RoutingModel__ResourceGroup_t_t,
  &_swigt__p_std__vectorT_std__vectorT_long_t_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_short,
};

static swig_cast_info _swigc__p_CostClassIndex[] = {  {&_swigt__p_CostClassIndex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DimensionIndex[] = {  {&_swigt__p_DimensionIndex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DisjunctionIndex[] = {  {&_swigt__p_DisjunctionIndex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PickupToDeliveryLimitFunction[] = {  {&_swigt__p_PickupToDeliveryLimitFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RoutingDimensionIndex[] = {  {&_swigt__p_RoutingDimensionIndex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RoutingDisjunctionIndex[] = {  {&_swigt__p_RoutingDisjunctionIndex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TransitCallback1[] = {  {&_swigt__p_TransitCallback1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_TransitCallback2[] = {  {&_swigt__p_TransitCallback2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_VehicleClassIndex[] = {  {&_swigt__p_VehicleClassIndex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_absl__Duration[] = {  {&_swigt__p_absl__Duration, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_absl__SpanT_int64_t_const_t[] = {  {&_swigt__p_absl__SpanT_int64_t_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_absl__SpanT_int_const_t[] = {  {&_swigt__p_absl__SpanT_int_const_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_absl__flat_hash_setT_int_t[] = {  {&_swigt__p_absl__flat_hash_setT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__Assignment[] = {  {&_swigt__p_operations_research__Assignment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__AssignmentContainerT_operations_research__IntVar_operations_research__IntVarElement_t[] = {  {&_swigt__p_operations_research__AssignmentContainerT_operations_research__IntVar_operations_research__IntVarElement_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__AssignmentContainerT_operations_research__IntervalVar_operations_research__IntervalVarElement_t[] = {  {&_swigt__p_operations_research__AssignmentContainerT_operations_research__IntervalVar_operations_research__IntervalVarElement_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__AssignmentContainerT_operations_research__SequenceVar_operations_research__SequenceVarElement_t[] = {  {&_swigt__p_operations_research__AssignmentContainerT_operations_research__SequenceVar_operations_research__SequenceVarElement_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__AssignmentElement[] = {  {&_swigt__p_operations_research__AssignmentElement, 0, 0, 0},  {&_swigt__p_operations_research__IntVarElement, _p_operations_research__IntVarElementTo_p_operations_research__AssignmentElement, 0, 0},  {&_swigt__p_operations_research__IntervalVarElement, _p_operations_research__IntervalVarElementTo_p_operations_research__AssignmentElement, 0, 0},  {&_swigt__p_operations_research__SequenceVarElement, _p_operations_research__SequenceVarElementTo_p_operations_research__AssignmentElement, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__BaseLns[] = {  {&_swigt__p_operations_research__BaseLns, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__CastConstraint[] = {{&_swigt__p_operations_research__CastConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__SymmetryBreaker[] = {{&_swigt__p_operations_research__SymmetryBreaker, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__SearchLog[] = {{&_swigt__p_operations_research__SearchLog, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__BaseIntExpr[] = {{&_swigt__p_operations_research__BaseIntExpr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__PropagationMonitor[] = {{&_swigt__p_operations_research__PropagationMonitor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__ImprovementSearchLimit[] = {{&_swigt__p_operations_research__ImprovementSearchLimit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__BaseObject[] = {  {&_swigt__p_operations_research__DisjunctiveConstraint, _p_operations_research__DisjunctiveConstraintTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__Constraint, _p_operations_research__ConstraintTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__CastConstraint, _p_operations_research__CastConstraintTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__TypeRegulationsConstraint, _p_operations_research__TypeRegulationsConstraintTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__SymmetryBreaker, _p_operations_research__SymmetryBreakerTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__Assignment, _p_operations_research__AssignmentTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__Pack, _p_operations_research__PackTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__GlobalVehicleBreaksConstraint, _p_operations_research__GlobalVehicleBreaksConstraintTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__RegularLimit, _p_operations_research__RegularLimitTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__LocalSearchOperator, _p_operations_research__LocalSearchOperatorTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__IntVarIterator, _p_operations_research__IntVarIteratorTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__PathOperator, _p_operations_research__PathOperatorTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__IntVarLocalSearchOperator, _p_operations_research__IntVarLocalSearchOperatorTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__DecisionBuilder, _p_operations_research__DecisionBuilderTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__DecisionVisitor, _p_operations_research__DecisionVisitorTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__ModelVisitor, _p_operations_research__ModelVisitorTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__RoutingModelVisitor, _p_operations_research__RoutingModelVisitorTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__IntVar, _p_operations_research__IntVarTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__Demon, _p_operations_research__DemonTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__OptimizeVar, _p_operations_research__OptimizeVarTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__ChangeValue, _p_operations_research__ChangeValueTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__Decision, _p_operations_research__DecisionTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__PropagationBaseObject, _p_operations_research__PropagationBaseObjectTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__BaseObject, 0, 0, 0},  {&_swigt__p_operations_research__SequenceVar, _p_operations_research__SequenceVarTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__BaseLns, _p_operations_research__BaseLnsTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__SearchLog, _p_operations_research__SearchLogTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__IntVarLocalSearchFilter, _p_operations_research__IntVarLocalSearchFilterTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__LocalSearchFilter, _p_operations_research__LocalSearchFilterTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__SolutionCollector, _p_operations_research__SolutionCollectorTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__SolutionPool, _p_operations_research__SolutionPoolTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__IntervalVar, _p_operations_research__IntervalVarTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__IntExpr, _p_operations_research__IntExprTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__BaseIntExpr, _p_operations_research__BaseIntExprTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__SearchMonitor, _p_operations_research__SearchMonitorTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__ObjectiveMonitor, _p_operations_research__ObjectiveMonitorTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__PropagationMonitor, _p_operations_research__PropagationMonitorTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__LocalSearchMonitor, _p_operations_research__LocalSearchMonitorTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__BooleanVar, _p_operations_research__BooleanVarTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__SearchLimit, _p_operations_research__SearchLimitTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__ImprovementSearchLimit, _p_operations_research__ImprovementSearchLimitTo_p_operations_research__BaseObject, 0, 0},  {&_swigt__p_operations_research__LocalSearchFilterManager, _p_operations_research__LocalSearchFilterManagerTo_p_operations_research__BaseObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__BooleanVar[] = {  {&_swigt__p_operations_research__BooleanVar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__BoundCost[] = {  {&_swigt__p_operations_research__BoundCost, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__ChangeValue[] = {  {&_swigt__p_operations_research__ChangeValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__Constraint[] = {  {&_swigt__p_operations_research__Constraint, 0, 0, 0},  {&_swigt__p_operations_research__CastConstraint, _p_operations_research__CastConstraintTo_p_operations_research__Constraint, 0, 0},  {&_swigt__p_operations_research__DisjunctiveConstraint, _p_operations_research__DisjunctiveConstraintTo_p_operations_research__Constraint, 0, 0},  {&_swigt__p_operations_research__TypeRegulationsConstraint, _p_operations_research__TypeRegulationsConstraintTo_p_operations_research__Constraint, 0, 0},  {&_swigt__p_operations_research__Pack, _p_operations_research__PackTo_p_operations_research__Constraint, 0, 0},  {&_swigt__p_operations_research__GlobalVehicleBreaksConstraint, _p_operations_research__GlobalVehicleBreaksConstraintTo_p_operations_research__Constraint, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__Decision[] = {  {&_swigt__p_operations_research__Decision, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__DecisionBuilder[] = {  {&_swigt__p_operations_research__DecisionBuilder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__DecisionVisitor[] = {  {&_swigt__p_operations_research__DecisionVisitor, 0, 0, 0},  {&_swigt__p_operations_research__SymmetryBreaker, _p_operations_research__SymmetryBreakerTo_p_operations_research__DecisionVisitor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__DefaultPhaseParameters[] = {  {&_swigt__p_operations_research__DefaultPhaseParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__Demon[] = {  {&_swigt__p_operations_research__Demon, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__DisjunctiveConstraint[] = {  {&_swigt__p_operations_research__DisjunctiveConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__FirstSolutionStrategy[] = {  {&_swigt__p_operations_research__FirstSolutionStrategy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__GlobalDimensionCumulOptimizer[] = {  {&_swigt__p_operations_research__GlobalDimensionCumulOptimizer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__GlobalVehicleBreaksConstraint[] = {  {&_swigt__p_operations_research__GlobalVehicleBreaksConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__IntExpr[] = {  {&_swigt__p_operations_research__BooleanVar, _p_operations_research__BooleanVarTo_p_operations_research__IntExpr, 0, 0},  {&_swigt__p_operations_research__IntVar, _p_operations_research__IntVarTo_p_operations_research__IntExpr, 0, 0},  {&_swigt__p_operations_research__IntExpr, 0, 0, 0},  {&_swigt__p_operations_research__BaseIntExpr, _p_operations_research__BaseIntExprTo_p_operations_research__IntExpr, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__IntTupleSet[] = {  {&_swigt__p_operations_research__IntTupleSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__IntVar[] = {  {&_swigt__p_operations_research__BooleanVar, _p_operations_research__BooleanVarTo_p_operations_research__IntVar, 0, 0},  {&_swigt__p_operations_research__IntVar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__IntVarElement[] = {  {&_swigt__p_operations_research__IntVarElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__IntVarIterator[] = {  {&_swigt__p_operations_research__IntVarIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__IntVarLocalSearchFilter[] = {  {&_swigt__p_operations_research__IntVarLocalSearchFilter, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__IntVarLocalSearchOperator[] = {  {&_swigt__p_operations_research__IntVarLocalSearchOperator, 0, 0, 0},  {&_swigt__p_operations_research__PathOperator, _p_operations_research__PathOperatorTo_p_operations_research__IntVarLocalSearchOperator, 0, 0},  {&_swigt__p_operations_research__BaseLns, _p_operations_research__BaseLnsTo_p_operations_research__IntVarLocalSearchOperator, 0, 0},  {&_swigt__p_operations_research__ChangeValue, _p_operations_research__ChangeValueTo_p_operations_research__IntVarLocalSearchOperator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__IntervalVar[] = {  {&_swigt__p_operations_research__IntervalVar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__IntervalVarElement[] = {  {&_swigt__p_operations_research__IntervalVarElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__LocalDimensionCumulOptimizer[] = {  {&_swigt__p_operations_research__LocalDimensionCumulOptimizer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__LocalSearchFilter[] = {  {&_swigt__p_operations_research__LocalSearchFilter, 0, 0, 0},  {&_swigt__p_operations_research__IntVarLocalSearchFilter, _p_operations_research__IntVarLocalSearchFilterTo_p_operations_research__LocalSearchFilter, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__LocalSearchFilterManager[] = {  {&_swigt__p_operations_research__LocalSearchFilterManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__LocalSearchMetaheuristic[] = {  {&_swigt__p_operations_research__LocalSearchMetaheuristic, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__LocalSearchMonitor[] = {  {&_swigt__p_operations_research__LocalSearchMonitor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__LocalSearchOperator[] = {  {&_swigt__p_operations_research__LocalSearchOperator, 0, 0, 0},  {&_swigt__p_operations_research__IntVarLocalSearchOperator, _p_operations_research__IntVarLocalSearchOperatorTo_p_operations_research__LocalSearchOperator, 0, 0},  {&_swigt__p_operations_research__PathOperator, _p_operations_research__PathOperatorTo_p_operations_research__LocalSearchOperator, 0, 0},  {&_swigt__p_operations_research__BaseLns, _p_operations_research__BaseLnsTo_p_operations_research__LocalSearchOperator, 0, 0},  {&_swigt__p_operations_research__ChangeValue, _p_operations_research__ChangeValueTo_p_operations_research__LocalSearchOperator, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__LocalSearchPhaseParameters[] = {  {&_swigt__p_operations_research__LocalSearchPhaseParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__ModelVisitor[] = {  {&_swigt__p_operations_research__ModelVisitor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__NumericalRevT_long_t[] = {  {&_swigt__p_operations_research__NumericalRevT_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__ObjectiveMonitor[] = {  {&_swigt__p_operations_research__ObjectiveMonitor, 0, 0, 0},  {&_swigt__p_operations_research__OptimizeVar, _p_operations_research__OptimizeVarTo_p_operations_research__ObjectiveMonitor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__OptimizeVar[] = {  {&_swigt__p_operations_research__OptimizeVar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__Pack[] = {  {&_swigt__p_operations_research__Pack, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__PathOperator[] = {  {&_swigt__p_operations_research__PathOperator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__PathsMetadata[] = {  {&_swigt__p_operations_research__PathsMetadata, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__PropagationBaseObject[] = {  {&_swigt__p_operations_research__IntExpr, _p_operations_research__IntExprTo_p_operations_research__PropagationBaseObject, 0, 0},  {&_swigt__p_operations_research__BaseIntExpr, _p_operations_research__BaseIntExprTo_p_operations_research__PropagationBaseObject, 0, 0},  {&_swigt__p_operations_research__IntVar, _p_operations_research__IntVarTo_p_operations_research__PropagationBaseObject, 0, 0},  {&_swigt__p_operations_research__IntervalVar, _p_operations_research__IntervalVarTo_p_operations_research__PropagationBaseObject, 0, 0},  {&_swigt__p_operations_research__BooleanVar, _p_operations_research__BooleanVarTo_p_operations_research__PropagationBaseObject, 0, 0},  {&_swigt__p_operations_research__Constraint, _p_operations_research__ConstraintTo_p_operations_research__PropagationBaseObject, 0, 0},  {&_swigt__p_operations_research__CastConstraint, _p_operations_research__CastConstraintTo_p_operations_research__PropagationBaseObject, 0, 0},  {&_swigt__p_operations_research__DisjunctiveConstraint, _p_operations_research__DisjunctiveConstraintTo_p_operations_research__PropagationBaseObject, 0, 0},  {&_swigt__p_operations_research__TypeRegulationsConstraint, _p_operations_research__TypeRegulationsConstraintTo_p_operations_research__PropagationBaseObject, 0, 0},  {&_swigt__p_operations_research__Assignment, _p_operations_research__AssignmentTo_p_operations_research__PropagationBaseObject, 0, 0},  {&_swigt__p_operations_research__GlobalVehicleBreaksConstraint, _p_operations_research__GlobalVehicleBreaksConstraintTo_p_operations_research__PropagationBaseObject, 0, 0},  {&_swigt__p_operations_research__PropagationBaseObject, 0, 0, 0},  {&_swigt__p_operations_research__SequenceVar, _p_operations_research__SequenceVarTo_p_operations_research__PropagationBaseObject, 0, 0},  {&_swigt__p_operations_research__Pack, _p_operations_research__PackTo_p_operations_research__PropagationBaseObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__RegularLimit[] = {  {&_swigt__p_operations_research__RegularLimit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__RevT_bool_t[] = {  {&_swigt__p_operations_research__RevT_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__RevT_long_t[] = {  {&_swigt__p_operations_research__RevT_long_t, 0, 0, 0},  {&_swigt__p_operations_research__NumericalRevT_long_t, _p_operations_research__NumericalRevT_long_tTo_p_operations_research__RevT_long_t, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__RoutingDimension[] = {  {&_swigt__p_operations_research__RoutingDimension, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__RoutingIndexManager[] = {  {&_swigt__p_operations_research__RoutingIndexManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__RoutingModel[] = {  {&_swigt__p_operations_research__RoutingModel, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__RoutingModelVisitor[] = {  {&_swigt__p_operations_research__RoutingModelVisitor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__RoutingModel__NodeNeighborsByCostClass[] = {  {&_swigt__p_operations_research__RoutingModel__NodeNeighborsByCostClass, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__RoutingModel__ResourceGroup[] = {  {&_swigt__p_operations_research__RoutingModel__ResourceGroup, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__RoutingModel__VehicleTypeContainer[] = {  {&_swigt__p_operations_research__RoutingModel__VehicleTypeContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__SearchLimit[] = {  {&_swigt__p_operations_research__RegularLimit, _p_operations_research__RegularLimitTo_p_operations_research__SearchLimit, 0, 0},  {&_swigt__p_operations_research__SearchLimit, 0, 0, 0},  {&_swigt__p_operations_research__ImprovementSearchLimit, _p_operations_research__ImprovementSearchLimitTo_p_operations_research__SearchLimit, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__SearchMonitor[] = {  {&_swigt__p_operations_research__SearchMonitor, 0, 0, 0},  {&_swigt__p_operations_research__ObjectiveMonitor, _p_operations_research__ObjectiveMonitorTo_p_operations_research__SearchMonitor, 0, 0},  {&_swigt__p_operations_research__OptimizeVar, _p_operations_research__OptimizeVarTo_p_operations_research__SearchMonitor, 0, 0},  {&_swigt__p_operations_research__PropagationMonitor, _p_operations_research__PropagationMonitorTo_p_operations_research__SearchMonitor, 0, 0},  {&_swigt__p_operations_research__LocalSearchMonitor, _p_operations_research__LocalSearchMonitorTo_p_operations_research__SearchMonitor, 0, 0},  {&_swigt__p_operations_research__SolutionCollector, _p_operations_research__SolutionCollectorTo_p_operations_research__SearchMonitor, 0, 0},  {&_swigt__p_operations_research__RegularLimit, _p_operations_research__RegularLimitTo_p_operations_research__SearchMonitor, 0, 0},  {&_swigt__p_operations_research__SearchLimit, _p_operations_research__SearchLimitTo_p_operations_research__SearchMonitor, 0, 0},  {&_swigt__p_operations_research__ImprovementSearchLimit, _p_operations_research__ImprovementSearchLimitTo_p_operations_research__SearchMonitor, 0, 0},  {&_swigt__p_operations_research__SearchLog, _p_operations_research__SearchLogTo_p_operations_research__SearchMonitor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__SequenceVar[] = {  {&_swigt__p_operations_research__SequenceVar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__SequenceVarElement[] = {  {&_swigt__p_operations_research__SequenceVarElement, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__SimpleBoundCosts[] = {  {&_swigt__p_operations_research__SimpleBoundCosts, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__SolutionCollector[] = {  {&_swigt__p_operations_research__SolutionCollector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__SolutionPool[] = {  {&_swigt__p_operations_research__SolutionPool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__Solver[] = {  {&_swigt__p_operations_research__Solver, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__Solver__SearchLogParameters[] = {  {&_swigt__p_operations_research__Solver__SearchLogParameters, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__TypeIncompatibilityChecker[] = {  {&_swigt__p_operations_research__TypeIncompatibilityChecker, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__TypeRegulationsChecker[] = {  {&_swigt__p_operations_research__TypeRegulationsChecker, 0, 0, 0},  {&_swigt__p_operations_research__TypeIncompatibilityChecker, _p_operations_research__TypeIncompatibilityCheckerTo_p_operations_research__TypeRegulationsChecker, 0, 0},  {&_swigt__p_operations_research__TypeRequirementChecker, _p_operations_research__TypeRequirementCheckerTo_p_operations_research__TypeRegulationsChecker, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__TypeRegulationsConstraint[] = {  {&_swigt__p_operations_research__TypeRegulationsConstraint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_operations_research__TypeRequirementChecker[] = {  {&_swigt__p_operations_research__TypeRequirementChecker, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__atomicT_bool_t[] = {  {&_swigt__p_std__atomicT_bool_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_long_flongF_t[] = {  {&_swigt__p_std__functionT_long_flongF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_long_flong_longF_t[] = {  {&_swigt__p_std__functionT_long_flong_longF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_std__vectorT_int_t_const_Rfint_intF_t[] = {  {&_swigt__p_std__functionT_std__vectorT_int_t_const_Rfint_intF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__ostream[] = {  {&_swigt__p_std__ostream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_absl__flat_hash_setT_int_t_t[] = {  {&_swigt__p_std__vectorT_absl__flat_hash_setT_int_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_operations_research__Assignment_const_p_t[] = {  {&_swigt__p_std__vectorT_operations_research__Assignment_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_operations_research__LocalSearchFilterManager__FilterEvent_t[] = {  {&_swigt__p_std__vectorT_operations_research__LocalSearchFilterManager__FilterEvent_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_operations_research__RoutingDimension_const_p_t[] = {  {&_swigt__p_std__vectorT_operations_research__RoutingDimension_const_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_operations_research__RoutingDimension_p_t[] = {  {&_swigt__p_std__vectorT_operations_research__RoutingDimension_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_operations_research__RoutingModel__PickupDeliveryPosition_t[] = {  {&_swigt__p_std__vectorT_operations_research__RoutingModel__PickupDeliveryPosition_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__pairT_long_long_t_t[] = {  {&_swigt__p_std__vectorT_std__pairT_long_long_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__unique_ptrT_operations_research__RoutingModel__ResourceGroup_t_t[] = {  {&_swigt__p_std__vectorT_std__unique_ptrT_operations_research__RoutingModel__ResourceGroup_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__vectorT_long_t_t[] = {  {&_swigt__p_std__vectorT_std__vectorT_long_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_CostClassIndex,
  _swigc__p_DimensionIndex,
  _swigc__p_DisjunctionIndex,
  _swigc__p_PickupToDeliveryLimitFunction,
  _swigc__p_RoutingDimensionIndex,
  _swigc__p_RoutingDisjunctionIndex,
  _swigc__p_TransitCallback1,
  _swigc__p_TransitCallback2,
  _swigc__p_VehicleClassIndex,
  _swigc__p_absl__Duration,
  _swigc__p_absl__SpanT_int64_t_const_t,
  _swigc__p_absl__SpanT_int_const_t,
  _swigc__p_absl__flat_hash_setT_int_t,
  _swigc__p_bool,
  _swigc__p_char,
  _swigc__p_double,
  _swigc__p_int,
  _swigc__p_long,
  _swigc__p_operations_research__Assignment,
  _swigc__p_operations_research__AssignmentContainerT_operations_research__IntVar_operations_research__IntVarElement_t,
  _swigc__p_operations_research__AssignmentContainerT_operations_research__IntervalVar_operations_research__IntervalVarElement_t,
  _swigc__p_operations_research__AssignmentContainerT_operations_research__SequenceVar_operations_research__SequenceVarElement_t,
  _swigc__p_operations_research__AssignmentElement,
  _swigc__p_operations_research__BaseIntExpr,
  _swigc__p_operations_research__BaseLns,
  _swigc__p_operations_research__BaseObject,
  _swigc__p_operations_research__BooleanVar,
  _swigc__p_operations_research__BoundCost,
  _swigc__p_operations_research__CastConstraint,
  _swigc__p_operations_research__ChangeValue,
  _swigc__p_operations_research__Constraint,
  _swigc__p_operations_research__Decision,
  _swigc__p_operations_research__DecisionBuilder,
  _swigc__p_operations_research__DecisionVisitor,
  _swigc__p_operations_research__DefaultPhaseParameters,
  _swigc__p_operations_research__Demon,
  _swigc__p_operations_research__DisjunctiveConstraint,
  _swigc__p_operations_research__FirstSolutionStrategy,
  _swigc__p_operations_research__GlobalDimensionCumulOptimizer,
  _swigc__p_operations_research__GlobalVehicleBreaksConstraint,
  _swigc__p_operations_research__ImprovementSearchLimit,
  _swigc__p_operations_research__IntExpr,
  _swigc__p_operations_research__IntTupleSet,
  _swigc__p_operations_research__IntVar,
  _swigc__p_operations_research__IntVarElement,
  _swigc__p_operations_research__IntVarIterator,
  _swigc__p_operations_research__IntVarLocalSearchFilter,
  _swigc__p_operations_research__IntVarLocalSearchOperator,
  _swigc__p_operations_research__IntervalVar,
  _swigc__p_operations_research__IntervalVarElement,
  _swigc__p_operations_research__LocalDimensionCumulOptimizer,
  _swigc__p_operations_research__LocalSearchFilter,
  _swigc__p_operations_research__LocalSearchFilterManager,
  _swigc__p_operations_research__LocalSearchMetaheuristic,
  _swigc__p_operations_research__LocalSearchMonitor,
  _swigc__p_operations_research__LocalSearchOperator,
  _swigc__p_operations_research__LocalSearchPhaseParameters,
  _swigc__p_operations_research__ModelVisitor,
  _swigc__p_operations_research__NumericalRevT_long_t,
  _swigc__p_operations_research__ObjectiveMonitor,
  _swigc__p_operations_research__OptimizeVar,
  _swigc__p_operations_research__Pack,
  _swigc__p_operations_research__PathOperator,
  _swigc__p_operations_research__PathsMetadata,
  _swigc__p_operations_research__PropagationBaseObject,
  _swigc__p_operations_research__PropagationMonitor,
  _swigc__p_operations_research__RegularLimit,
  _swigc__p_operations_research__RevT_bool_t,
  _swigc__p_operations_research__RevT_long_t,
  _swigc__p_operations_research__RoutingDimension,
  _swigc__p_operations_research__RoutingIndexManager,
  _swigc__p_operations_research__RoutingModel,
  _swigc__p_operations_research__RoutingModelVisitor,
  _swigc__p_operations_research__RoutingModel__NodeNeighborsByCostClass,
  _swigc__p_operations_research__RoutingModel__ResourceGroup,
  _swigc__p_operations_research__RoutingModel__VehicleTypeContainer,
  _swigc__p_operations_research__SearchLimit,
  _swigc__p_operations_research__SearchLog,
  _swigc__p_operations_research__SearchMonitor,
  _swigc__p_operations_research__SequenceVar,
  _swigc__p_operations_research__SequenceVarElement,
  _swigc__p_operations_research__SimpleBoundCosts,
  _swigc__p_operations_research__SolutionCollector,
  _swigc__p_operations_research__SolutionPool,
  _swigc__p_operations_research__Solver,
  _swigc__p_operations_research__Solver__SearchLogParameters,
  _swigc__p_operations_research__SymmetryBreaker,
  _swigc__p_operations_research__TypeIncompatibilityChecker,
  _swigc__p_operations_research__TypeRegulationsChecker,
  _swigc__p_operations_research__TypeRegulationsConstraint,
  _swigc__p_operations_research__TypeRequirementChecker,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_std__atomicT_bool_t,
  _swigc__p_std__functionT_long_flongF_t,
  _swigc__p_std__functionT_long_flong_longF_t,
  _swigc__p_std__functionT_std__vectorT_int_t_const_Rfint_intF_t,
  _swigc__p_std__ostream,
  _swigc__p_std__vectorT_absl__flat_hash_setT_int_t_t,
  _swigc__p_std__vectorT_operations_research__Assignment_const_p_t,
  _swigc__p_std__vectorT_operations_research__LocalSearchFilterManager__FilterEvent_t,
  _swigc__p_std__vectorT_operations_research__RoutingDimension_const_p_t,
  _swigc__p_std__vectorT_operations_research__RoutingDimension_p_t,
  _swigc__p_std__vectorT_operations_research__RoutingModel__PickupDeliveryPosition_t,
  _swigc__p_std__vectorT_std__pairT_long_long_t_t,
  _swigc__p_std__vectorT_std__unique_ptrT_operations_research__RoutingModel__ResourceGroup_t_t,
  _swigc__p_std__vectorT_std__vectorT_long_t_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_short,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;
  
  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }
  
  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);
    
    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }
  
  /* When multiple interpreters are used, a module could have already been initialized in
       a different interpreter, but not yet have a pointer in this interpreter.
       In this case, we do not want to continue adding types... everything should be
       set up already */
  if (init == 0) return;
  
  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
    
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif
    
    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
        type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }
    
    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
        if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
        if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
          printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
          cast->type = ret;
          ret = 0;
        } else {
          /* Check for casting already in the list */
          swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
          if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
          if (!ocast) ret = 0;
        }
      }
      
      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
        printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;
  
#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
    printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;
  
  if (init_run) return;
  init_run = 1;
  
  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
          SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{
  /* c-mode */
#endif
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
  
  /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
  
  /* -----------------------------------------------------------------------------
   * global variable support code.
   * ----------------------------------------------------------------------------- */
  
  typedef struct swig_globalvar {
    char       *name;                  /* Name of global variable */
    PyObject *(*get_attr)(void);       /* Return the current value */
    int       (*set_attr)(PyObject *); /* Set the value */
    struct swig_globalvar *next;
  } swig_globalvar;
  
  typedef struct swig_varlinkobject {
    PyObject_HEAD
    swig_globalvar *vars;
  } swig_varlinkobject;
  
  SWIGINTERN PyObject *
  swig_varlink_repr(swig_varlinkobject *SWIGUNUSEDPARM(v)) {
#if PY_VERSION_HEX >= 0x03000000
    return PyUnicode_InternFromString("<Swig global variables>");
#else
    return PyString_FromString("<Swig global variables>");
#endif
  }
  
  SWIGINTERN PyObject *
  swig_varlink_str(swig_varlinkobject *v) {
#if PY_VERSION_HEX >= 0x03000000
    PyObject *str = PyUnicode_InternFromString("(");
    PyObject *tail;
    PyObject *joined;
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      tail = PyUnicode_FromString(var->name);
      joined = PyUnicode_Concat(str, tail);
      Py_DecRef(str);
      Py_DecRef(tail);
      str = joined;
      if (var->next) {
        tail = PyUnicode_InternFromString(", ");
        joined = PyUnicode_Concat(str, tail);
        Py_DecRef(str);
        Py_DecRef(tail);
        str = joined;
      }
    }
    tail = PyUnicode_InternFromString(")");
    joined = PyUnicode_Concat(str, tail);
    Py_DecRef(str);
    Py_DecRef(tail);
    str = joined;
#else
    PyObject *str = PyString_FromString("(");
    swig_globalvar *var;
    for (var = v->vars; var; var=var->next) {
      PyString_ConcatAndDel(&str,PyString_FromString(var->name));
      if (var->next) PyString_ConcatAndDel(&str,PyString_FromString(", "));
    }
    PyString_ConcatAndDel(&str,PyString_FromString(")"));
#endif
    return str;
  }
  
  SWIGINTERN int
  swig_varlink_print(swig_varlinkobject *v, FILE *fp, int SWIGUNUSEDPARM(flags)) {
    char *tmp;
    PyObject *str = swig_varlink_str(v);
    fprintf(fp,"Swig global variables ");
    fprintf(fp,"%s\n", tmp = SWIG_Python_str_AsChar(str));
    SWIG_Python_str_DelForPy3(tmp);
    Py_DECREF(str);
    return 0;
  }
  
  SWIGINTERN void
  swig_varlink_dealloc(swig_varlinkobject *v) {
    swig_globalvar *var = v->vars;
    while (var) {
      swig_globalvar *n = var->next;
      free(var->name);
      free(var);
      var = n;
    }
  }
  
  SWIGINTERN PyObject *
  swig_varlink_getattr(swig_varlinkobject *v, char *n) {
    PyObject *res = NULL;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->get_attr)();
        break;
      }
      var = var->next;
    }
    if (res == NULL && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN int
  swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
    int res = 1;
    swig_globalvar *var = v->vars;
    while (var) {
      if (strcmp(var->name,n) == 0) {
        res = (*var->set_attr)(p);
        break;
      }
      var = var->next;
    }
    if (res == 1 && !PyErr_Occurred()) {
      PyErr_Format(PyExc_AttributeError, "Unknown C global variable '%s'", n);
    }
    return res;
  }
  
  SWIGINTERN PyTypeObject*
  swig_varlink_type(void) {
    static char varlink__doc__[] = "Swig var link object";
    static PyTypeObject varlink_type;
    static int type_init = 0;
    if (!type_init) {
      const PyTypeObject tmp = {
#if PY_VERSION_HEX >= 0x03000000
        PyVarObject_HEAD_INIT(NULL, 0)
#else
        PyObject_HEAD_INIT(NULL)
        0,                                  /* ob_size */
#endif
        (char *)"swigvarlink",              /* tp_name */
        sizeof(swig_varlinkobject),         /* tp_basicsize */
        0,                                  /* tp_itemsize */
        (destructor) swig_varlink_dealloc,  /* tp_dealloc */
        (printfunc) swig_varlink_print,     /* tp_print */
        (getattrfunc) swig_varlink_getattr, /* tp_getattr */
        (setattrfunc) swig_varlink_setattr, /* tp_setattr */
        0,                                  /* tp_compare */
        (reprfunc) swig_varlink_repr,       /* tp_repr */
        0,                                  /* tp_as_number */
        0,                                  /* tp_as_sequence */
        0,                                  /* tp_as_mapping */
        0,                                  /* tp_hash */
        0,                                  /* tp_call */
        (reprfunc) swig_varlink_str,        /* tp_str */
        0,                                  /* tp_getattro */
        0,                                  /* tp_setattro */
        0,                                  /* tp_as_buffer */
        0,                                  /* tp_flags */
        varlink__doc__,                     /* tp_doc */
        0,                                  /* tp_traverse */
        0,                                  /* tp_clear */
        0,                                  /* tp_richcompare */
        0,                                  /* tp_weaklistoffset */
#if PY_VERSION_HEX >= 0x02020000
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
        0,                                  /* tp_del */
#endif
#if PY_VERSION_HEX >= 0x02060000
        0,                                  /* tp_version_tag */
#endif
#if PY_VERSION_HEX >= 0x03040000
        0,                                  /* tp_finalize */
#endif
#ifdef COUNT_ALLOCS
        0,                                  /* tp_allocs */
        0,                                  /* tp_frees */
        0,                                  /* tp_maxalloc */
#if PY_VERSION_HEX >= 0x02050000
        0,                                  /* tp_prev */
#endif
        0                                   /* tp_next */
#endif
      };
      varlink_type = tmp;
      type_init = 1;
#if PY_VERSION_HEX < 0x02020000
      varlink_type.ob_type = &PyType_Type;
#else
      if (PyType_Ready(&varlink_type) < 0)
      return NULL;
#endif
    }
    return &varlink_type;
  }
  
  /* Create a variable linking object for use later */
  SWIGINTERN PyObject *
  SWIG_Python_newvarlink(void) {
    swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
    if (result) {
      result->vars = 0;
    }
    return ((PyObject*) result);
  }
  
  SWIGINTERN void 
  SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
    swig_varlinkobject *v = (swig_varlinkobject *) p;
    swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
    if (gv) {
      size_t size = strlen(name)+1;
      gv->name = (char *)malloc(size);
      if (gv->name) {
        strncpy(gv->name,name,size);
        gv->get_attr = get_attr;
        gv->set_attr = set_attr;
        gv->next = v->vars;
      }
    }
    v->vars = gv;
  }
  
  SWIGINTERN PyObject *
  SWIG_globals(void) {
    static PyObject *_SWIG_globals = 0; 
    if (!_SWIG_globals) _SWIG_globals = SWIG_newvarlink();  
    return _SWIG_globals;
  }
  
  /* -----------------------------------------------------------------------------
   * constants/methods manipulation
   * ----------------------------------------------------------------------------- */
  
  /* Install Constants */
  SWIGINTERN void
  SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
    PyObject *obj = 0;
    size_t i;
    for (i = 0; constants[i].type; ++i) {
      switch(constants[i].type) {
      case SWIG_PY_POINTER:
        obj = SWIG_InternalNewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
        break;
      case SWIG_PY_BINARY:
        obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
        break;
      default:
        obj = 0;
        break;
      }
      if (obj) {
        PyDict_SetItemString(d, constants[i].name, obj);
        Py_DECREF(obj);
      }
    }
  }
  
  /* -----------------------------------------------------------------------------*/
  /* Fix SwigMethods to carry the callback ptrs when needed */
  /* -----------------------------------------------------------------------------*/
  
  SWIGINTERN void
  SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
    size_t i;
    for (i = 0; methods[i].ml_name; ++i) {
      const char *c = methods[i].ml_doc;
      if (!c) continue;
      c = strstr(c, "swig_ptr: ");
      if (c) {
        int j;
        swig_const_info *ci = 0;
        const char *name = c + 10;
        for (j = 0; const_table[j].type; ++j) {
          if (strncmp(const_table[j].name, name, 
              strlen(const_table[j].name)) == 0) {
            ci = &(const_table[j]);
            break;
          }
        }
        if (ci) {
          void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
          if (ptr) {
            size_t shift = (ci->ptype) - types;
            swig_type_info *ty = types_initial[shift];
            size_t ldoc = (c - methods[i].ml_doc);
            size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
            char *ndoc = (char*)malloc(ldoc + lptr + 10);
            if (ndoc) {
              char *buff = ndoc;
              strncpy(buff, methods[i].ml_doc, ldoc);
              buff += ldoc;
              strncpy(buff, "swig_ptr: ", 10);
              buff += 10;
              SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
              methods[i].ml_doc = ndoc;
            }
          }
        }
      }
    }
  } 
  
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif

SWIGEXPORT 
#if PY_VERSION_HEX >= 0x03000000
PyObject*
#else
void
#endif
SWIG_init(void) {
  PyObject *m, *d, *md;
#if PY_VERSION_HEX >= 0x03000000
  static struct PyModuleDef SWIG_module = {
# if PY_VERSION_HEX >= 0x03020000
    PyModuleDef_HEAD_INIT,
# else
    {
      PyObject_HEAD_INIT(NULL)
      NULL, /* m_init */
      0,    /* m_index */
      NULL, /* m_copy */
    },
# endif
    (char *) SWIG_name,
    NULL,
    -1,
    SwigMethods,
    NULL,
    NULL,
    NULL,
    NULL
  };
#endif
  
#if defined(SWIGPYTHON_BUILTIN)
  static SwigPyClientData SwigPyObject_clientdata = {
    0, 0, 0, 0, 0, 0, 0
  };
  static PyGetSetDef this_getset_def = {
    (char *)"this", &SwigPyBuiltin_ThisClosure, NULL, NULL, NULL
  };
  static SwigPyGetSet thisown_getset_closure = {
    (PyCFunction) SwigPyObject_own,
    (PyCFunction) SwigPyObject_own
  };
  static PyGetSetDef thisown_getset_def = {
    (char *)"thisown", SwigPyBuiltin_GetterClosure, SwigPyBuiltin_SetterClosure, NULL, &thisown_getset_closure
  };
  PyTypeObject *builtin_pytype;
  int builtin_base_count;
  swig_type_info *builtin_basetype;
  PyObject *tuple;
  PyGetSetDescrObject *static_getset;
  PyTypeObject *metatype;
  PyTypeObject *swigpyobject;
  SwigPyClientData *cd;
  PyObject *public_interface, *public_symbol;
  PyObject *this_descr;
  PyObject *thisown_descr;
  PyObject *self = 0;
  int i;
  
  (void)builtin_pytype;
  (void)builtin_base_count;
  (void)builtin_basetype;
  (void)tuple;
  (void)static_getset;
  (void)self;
  
  /* Metaclass is used to implement static member variables */
  metatype = SwigPyObjectType();
  assert(metatype);
#endif
  
  /* Fix SwigMethods to carry the callback ptrs when needed */
  SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
  
#if PY_VERSION_HEX >= 0x03000000
  m = PyModule_Create(&SWIG_module);
#else
  m = Py_InitModule((char *) SWIG_name, SwigMethods);
#endif
  
  md = d = PyModule_GetDict(m);
  (void)md;
  
  SWIG_InitializeModule(0);
  
#ifdef SWIGPYTHON_BUILTIN
  swigpyobject = SwigPyObject_TypeOnce();
  
  SwigPyObject_stype = SWIG_MangledTypeQuery("_p_SwigPyObject");
  assert(SwigPyObject_stype);
  cd = (SwigPyClientData*) SwigPyObject_stype->clientdata;
  if (!cd) {
    SwigPyObject_stype->clientdata = &SwigPyObject_clientdata;
    SwigPyObject_clientdata.pytype = swigpyobject;
  } else if (swigpyobject->tp_basicsize != cd->pytype->tp_basicsize) {
    PyErr_SetString(PyExc_RuntimeError, "Import error: attempted to load two incompatible swig-generated modules.");
# if PY_VERSION_HEX >= 0x03000000
    return NULL;
# else
    return;
# endif
  }
  
  /* All objects have a 'this' attribute */
  this_descr = PyDescr_NewGetSet(SwigPyObject_type(), &this_getset_def);
  (void)this_descr;
  
  /* All objects have a 'thisown' attribute */
  thisown_descr = PyDescr_NewGetSet(SwigPyObject_type(), &thisown_getset_def);
  (void)thisown_descr;
  
  public_interface = PyList_New(0);
  public_symbol = 0;
  (void)public_symbol;
  
  PyDict_SetItemString(md, "__all__", public_interface);
  Py_DECREF(public_interface);
  for (i = 0; SwigMethods[i].ml_name != NULL; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, SwigMethods[i].ml_name);
  for (i = 0; swig_const_table[i].name != 0; ++i)
  SwigPyBuiltin_AddPublicSymbol(public_interface, swig_const_table[i].name);
#endif
  
  SWIG_InstallConstants(d,swig_const_table);
  
  SWIG_Python_SetConstant(d, "DefaultPhaseParameters_CHOOSE_MAX_SUM_IMPACT",SWIG_From_int(static_cast< int >(operations_research::DefaultPhaseParameters::CHOOSE_MAX_SUM_IMPACT)));
  SWIG_Python_SetConstant(d, "DefaultPhaseParameters_CHOOSE_MAX_AVERAGE_IMPACT",SWIG_From_int(static_cast< int >(operations_research::DefaultPhaseParameters::CHOOSE_MAX_AVERAGE_IMPACT)));
  SWIG_Python_SetConstant(d, "DefaultPhaseParameters_CHOOSE_MAX_VALUE_IMPACT",SWIG_From_int(static_cast< int >(operations_research::DefaultPhaseParameters::CHOOSE_MAX_VALUE_IMPACT)));
  SWIG_Python_SetConstant(d, "DefaultPhaseParameters_SELECT_MIN_IMPACT",SWIG_From_int(static_cast< int >(operations_research::DefaultPhaseParameters::SELECT_MIN_IMPACT)));
  SWIG_Python_SetConstant(d, "DefaultPhaseParameters_SELECT_MAX_IMPACT",SWIG_From_int(static_cast< int >(operations_research::DefaultPhaseParameters::SELECT_MAX_IMPACT)));
  SWIG_Python_SetConstant(d, "DefaultPhaseParameters_NONE",SWIG_From_int(static_cast< int >(operations_research::DefaultPhaseParameters::NONE)));
  SWIG_Python_SetConstant(d, "DefaultPhaseParameters_NORMAL",SWIG_From_int(static_cast< int >(operations_research::DefaultPhaseParameters::NORMAL)));
  SWIG_Python_SetConstant(d, "DefaultPhaseParameters_VERBOSE",SWIG_From_int(static_cast< int >(operations_research::DefaultPhaseParameters::VERBOSE)));
  SWIG_Python_SetConstant(d, "Solver_INT_VAR_DEFAULT",SWIG_From_int(static_cast< int >(operations_research::Solver::INT_VAR_DEFAULT)));
  SWIG_Python_SetConstant(d, "Solver_INT_VAR_SIMPLE",SWIG_From_int(static_cast< int >(operations_research::Solver::INT_VAR_SIMPLE)));
  SWIG_Python_SetConstant(d, "Solver_CHOOSE_FIRST_UNBOUND",SWIG_From_int(static_cast< int >(operations_research::Solver::CHOOSE_FIRST_UNBOUND)));
  SWIG_Python_SetConstant(d, "Solver_CHOOSE_RANDOM",SWIG_From_int(static_cast< int >(operations_research::Solver::CHOOSE_RANDOM)));
  SWIG_Python_SetConstant(d, "Solver_CHOOSE_MIN_SIZE_LOWEST_MIN",SWIG_From_int(static_cast< int >(operations_research::Solver::CHOOSE_MIN_SIZE_LOWEST_MIN)));
  SWIG_Python_SetConstant(d, "Solver_CHOOSE_MIN_SIZE_HIGHEST_MIN",SWIG_From_int(static_cast< int >(operations_research::Solver::CHOOSE_MIN_SIZE_HIGHEST_MIN)));
  SWIG_Python_SetConstant(d, "Solver_CHOOSE_MIN_SIZE_LOWEST_MAX",SWIG_From_int(static_cast< int >(operations_research::Solver::CHOOSE_MIN_SIZE_LOWEST_MAX)));
  SWIG_Python_SetConstant(d, "Solver_CHOOSE_MIN_SIZE_HIGHEST_MAX",SWIG_From_int(static_cast< int >(operations_research::Solver::CHOOSE_MIN_SIZE_HIGHEST_MAX)));
  SWIG_Python_SetConstant(d, "Solver_CHOOSE_LOWEST_MIN",SWIG_From_int(static_cast< int >(operations_research::Solver::CHOOSE_LOWEST_MIN)));
  SWIG_Python_SetConstant(d, "Solver_CHOOSE_HIGHEST_MAX",SWIG_From_int(static_cast< int >(operations_research::Solver::CHOOSE_HIGHEST_MAX)));
  SWIG_Python_SetConstant(d, "Solver_CHOOSE_MIN_SIZE",SWIG_From_int(static_cast< int >(operations_research::Solver::CHOOSE_MIN_SIZE)));
  SWIG_Python_SetConstant(d, "Solver_CHOOSE_MAX_SIZE",SWIG_From_int(static_cast< int >(operations_research::Solver::CHOOSE_MAX_SIZE)));
  SWIG_Python_SetConstant(d, "Solver_CHOOSE_MAX_REGRET_ON_MIN",SWIG_From_int(static_cast< int >(operations_research::Solver::CHOOSE_MAX_REGRET_ON_MIN)));
  SWIG_Python_SetConstant(d, "Solver_CHOOSE_PATH",SWIG_From_int(static_cast< int >(operations_research::Solver::CHOOSE_PATH)));
  SWIG_Python_SetConstant(d, "Solver_INT_VALUE_DEFAULT",SWIG_From_int(static_cast< int >(operations_research::Solver::INT_VALUE_DEFAULT)));
  SWIG_Python_SetConstant(d, "Solver_INT_VALUE_SIMPLE",SWIG_From_int(static_cast< int >(operations_research::Solver::INT_VALUE_SIMPLE)));
  SWIG_Python_SetConstant(d, "Solver_ASSIGN_MIN_VALUE",SWIG_From_int(static_cast< int >(operations_research::Solver::ASSIGN_MIN_VALUE)));
  SWIG_Python_SetConstant(d, "Solver_ASSIGN_MAX_VALUE",SWIG_From_int(static_cast< int >(operations_research::Solver::ASSIGN_MAX_VALUE)));
  SWIG_Python_SetConstant(d, "Solver_ASSIGN_RANDOM_VALUE",SWIG_From_int(static_cast< int >(operations_research::Solver::ASSIGN_RANDOM_VALUE)));
  SWIG_Python_SetConstant(d, "Solver_ASSIGN_CENTER_VALUE",SWIG_From_int(static_cast< int >(operations_research::Solver::ASSIGN_CENTER_VALUE)));
  SWIG_Python_SetConstant(d, "Solver_SPLIT_LOWER_HALF",SWIG_From_int(static_cast< int >(operations_research::Solver::SPLIT_LOWER_HALF)));
  SWIG_Python_SetConstant(d, "Solver_SPLIT_UPPER_HALF",SWIG_From_int(static_cast< int >(operations_research::Solver::SPLIT_UPPER_HALF)));
  SWIG_Python_SetConstant(d, "Solver_SEQUENCE_DEFAULT",SWIG_From_int(static_cast< int >(operations_research::Solver::SEQUENCE_DEFAULT)));
  SWIG_Python_SetConstant(d, "Solver_SEQUENCE_SIMPLE",SWIG_From_int(static_cast< int >(operations_research::Solver::SEQUENCE_SIMPLE)));
  SWIG_Python_SetConstant(d, "Solver_CHOOSE_MIN_SLACK_RANK_FORWARD",SWIG_From_int(static_cast< int >(operations_research::Solver::CHOOSE_MIN_SLACK_RANK_FORWARD)));
  SWIG_Python_SetConstant(d, "Solver_CHOOSE_RANDOM_RANK_FORWARD",SWIG_From_int(static_cast< int >(operations_research::Solver::CHOOSE_RANDOM_RANK_FORWARD)));
  SWIG_Python_SetConstant(d, "Solver_INTERVAL_DEFAULT",SWIG_From_int(static_cast< int >(operations_research::Solver::INTERVAL_DEFAULT)));
  SWIG_Python_SetConstant(d, "Solver_INTERVAL_SIMPLE",SWIG_From_int(static_cast< int >(operations_research::Solver::INTERVAL_SIMPLE)));
  SWIG_Python_SetConstant(d, "Solver_INTERVAL_SET_TIMES_FORWARD",SWIG_From_int(static_cast< int >(operations_research::Solver::INTERVAL_SET_TIMES_FORWARD)));
  SWIG_Python_SetConstant(d, "Solver_INTERVAL_SET_TIMES_BACKWARD",SWIG_From_int(static_cast< int >(operations_research::Solver::INTERVAL_SET_TIMES_BACKWARD)));
  SWIG_Python_SetConstant(d, "Solver_TWOOPT",SWIG_From_int(static_cast< int >(operations_research::Solver::TWOOPT)));
  SWIG_Python_SetConstant(d, "Solver_OROPT",SWIG_From_int(static_cast< int >(operations_research::Solver::OROPT)));
  SWIG_Python_SetConstant(d, "Solver_RELOCATE",SWIG_From_int(static_cast< int >(operations_research::Solver::RELOCATE)));
  SWIG_Python_SetConstant(d, "Solver_EXCHANGE",SWIG_From_int(static_cast< int >(operations_research::Solver::EXCHANGE)));
  SWIG_Python_SetConstant(d, "Solver_CROSS",SWIG_From_int(static_cast< int >(operations_research::Solver::CROSS)));
  SWIG_Python_SetConstant(d, "Solver_MAKEACTIVE",SWIG_From_int(static_cast< int >(operations_research::Solver::MAKEACTIVE)));
  SWIG_Python_SetConstant(d, "Solver_MAKEINACTIVE",SWIG_From_int(static_cast< int >(operations_research::Solver::MAKEINACTIVE)));
  SWIG_Python_SetConstant(d, "Solver_MAKECHAININACTIVE",SWIG_From_int(static_cast< int >(operations_research::Solver::MAKECHAININACTIVE)));
  SWIG_Python_SetConstant(d, "Solver_SWAPACTIVE",SWIG_From_int(static_cast< int >(operations_research::Solver::SWAPACTIVE)));
  SWIG_Python_SetConstant(d, "Solver_EXTENDEDSWAPACTIVE",SWIG_From_int(static_cast< int >(operations_research::Solver::EXTENDEDSWAPACTIVE)));
  SWIG_Python_SetConstant(d, "Solver_PATHLNS",SWIG_From_int(static_cast< int >(operations_research::Solver::PATHLNS)));
  SWIG_Python_SetConstant(d, "Solver_FULLPATHLNS",SWIG_From_int(static_cast< int >(operations_research::Solver::FULLPATHLNS)));
  SWIG_Python_SetConstant(d, "Solver_UNACTIVELNS",SWIG_From_int(static_cast< int >(operations_research::Solver::UNACTIVELNS)));
  SWIG_Python_SetConstant(d, "Solver_INCREMENT",SWIG_From_int(static_cast< int >(operations_research::Solver::INCREMENT)));
  SWIG_Python_SetConstant(d, "Solver_DECREMENT",SWIG_From_int(static_cast< int >(operations_research::Solver::DECREMENT)));
  SWIG_Python_SetConstant(d, "Solver_SIMPLELNS",SWIG_From_int(static_cast< int >(operations_research::Solver::SIMPLELNS)));
  SWIG_Python_SetConstant(d, "Solver_GE",SWIG_From_int(static_cast< int >(operations_research::Solver::GE)));
  SWIG_Python_SetConstant(d, "Solver_LE",SWIG_From_int(static_cast< int >(operations_research::Solver::LE)));
  SWIG_Python_SetConstant(d, "Solver_EQ",SWIG_From_int(static_cast< int >(operations_research::Solver::EQ)));
  SWIG_Python_SetConstant(d, "Solver_DELAYED_PRIORITY",SWIG_From_int(static_cast< int >(operations_research::Solver::DELAYED_PRIORITY)));
  SWIG_Python_SetConstant(d, "Solver_VAR_PRIORITY",SWIG_From_int(static_cast< int >(operations_research::Solver::VAR_PRIORITY)));
  SWIG_Python_SetConstant(d, "Solver_NORMAL_PRIORITY",SWIG_From_int(static_cast< int >(operations_research::Solver::NORMAL_PRIORITY)));
  SWIG_Python_SetConstant(d, "SearchMonitor_kNoProgress",SWIG_From_int(static_cast< int >(operations_research::SearchMonitor::kNoProgress)));
  SWIG_Python_SetConstant(d, "BOOL_UNSPECIFIED",SWIG_From_int(static_cast< int >(operations_research::BOOL_UNSPECIFIED)));
  SWIG_Python_SetConstant(d, "BOOL_FALSE",SWIG_From_int(static_cast< int >(operations_research::BOOL_FALSE)));
  SWIG_Python_SetConstant(d, "BOOL_TRUE",SWIG_From_int(static_cast< int >(operations_research::BOOL_TRUE)));
  SWIG_Python_SetConstant(d, "RoutingModel_ROUTING_NOT_SOLVED",SWIG_From_int(static_cast< int >(operations_research::RoutingModel::ROUTING_NOT_SOLVED)));
  SWIG_Python_SetConstant(d, "RoutingModel_ROUTING_SUCCESS",SWIG_From_int(static_cast< int >(operations_research::RoutingModel::ROUTING_SUCCESS)));
  SWIG_Python_SetConstant(d, "RoutingModel_ROUTING_PARTIAL_SUCCESS_LOCAL_OPTIMUM_NOT_REACHED",SWIG_From_int(static_cast< int >(operations_research::RoutingModel::ROUTING_PARTIAL_SUCCESS_LOCAL_OPTIMUM_NOT_REACHED)));
  SWIG_Python_SetConstant(d, "RoutingModel_ROUTING_FAIL",SWIG_From_int(static_cast< int >(operations_research::RoutingModel::ROUTING_FAIL)));
  SWIG_Python_SetConstant(d, "RoutingModel_ROUTING_FAIL_TIMEOUT",SWIG_From_int(static_cast< int >(operations_research::RoutingModel::ROUTING_FAIL_TIMEOUT)));
  SWIG_Python_SetConstant(d, "RoutingModel_ROUTING_INVALID",SWIG_From_int(static_cast< int >(operations_research::RoutingModel::ROUTING_INVALID)));
  SWIG_Python_SetConstant(d, "RoutingModel_ROUTING_INFEASIBLE",SWIG_From_int(static_cast< int >(operations_research::RoutingModel::ROUTING_INFEASIBLE)));
  SWIG_Python_SetConstant(d, "RoutingModel_ROUTING_OPTIMAL",SWIG_From_int(static_cast< int >(operations_research::RoutingModel::ROUTING_OPTIMAL)));
  SWIG_Python_SetConstant(d, "RoutingModel_PICKUP_AND_DELIVERY_NO_ORDER",SWIG_From_int(static_cast< int >(operations_research::RoutingModel::PICKUP_AND_DELIVERY_NO_ORDER)));
  SWIG_Python_SetConstant(d, "RoutingModel_PICKUP_AND_DELIVERY_LIFO",SWIG_From_int(static_cast< int >(operations_research::RoutingModel::PICKUP_AND_DELIVERY_LIFO)));
  SWIG_Python_SetConstant(d, "RoutingModel_PICKUP_AND_DELIVERY_FIFO",SWIG_From_int(static_cast< int >(operations_research::RoutingModel::PICKUP_AND_DELIVERY_FIFO)));
  PyDict_SetItemString(md,(char *)"cvar", SWIG_globals());
  SWIG_addvarlink(SWIG_globals(),(char *)"RoutingModel_kNoPenalty",Swig_var_RoutingModel_kNoPenalty_get, Swig_var_RoutingModel_kNoPenalty_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"RoutingModel_kNoDisjunction",Swig_var_RoutingModel_kNoDisjunction_get, Swig_var_RoutingModel_kNoDisjunction_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"RoutingModel_kNoDimension",Swig_var_RoutingModel_kNoDimension_get, Swig_var_RoutingModel_kNoDimension_set);
  SWIG_Python_SetConstant(d, "RoutingModel_kTransitEvaluatorSignUnknown",SWIG_From_int(static_cast< int >(operations_research::RoutingModel::kTransitEvaluatorSignUnknown)));
  SWIG_Python_SetConstant(d, "RoutingModel_kTransitEvaluatorSignPositiveOrZero",SWIG_From_int(static_cast< int >(operations_research::RoutingModel::kTransitEvaluatorSignPositiveOrZero)));
  SWIG_Python_SetConstant(d, "RoutingModel_kTransitEvaluatorSignNegativeOrZero",SWIG_From_int(static_cast< int >(operations_research::RoutingModel::kTransitEvaluatorSignNegativeOrZero)));
  SWIG_Python_SetConstant(d, "RoutingModel_TYPE_ADDED_TO_VEHICLE",SWIG_From_int(static_cast< int >(operations_research::RoutingModel::TYPE_ADDED_TO_VEHICLE)));
  SWIG_Python_SetConstant(d, "RoutingModel_ADDED_TYPE_REMOVED_FROM_VEHICLE",SWIG_From_int(static_cast< int >(operations_research::RoutingModel::ADDED_TYPE_REMOVED_FROM_VEHICLE)));
  SWIG_Python_SetConstant(d, "RoutingModel_TYPE_ON_VEHICLE_UP_TO_VISIT",SWIG_From_int(static_cast< int >(operations_research::RoutingModel::TYPE_ON_VEHICLE_UP_TO_VISIT)));
  SWIG_Python_SetConstant(d, "RoutingModel_TYPE_SIMULTANEOUSLY_ADDED_AND_REMOVED",SWIG_From_int(static_cast< int >(operations_research::RoutingModel::TYPE_SIMULTANEOUSLY_ADDED_AND_REMOVED)));
  SWIG_addvarlink(SWIG_globals(),(char *)"RoutingModelVisitor_kLightElement",Swig_var_RoutingModelVisitor_kLightElement_get, Swig_var_RoutingModelVisitor_kLightElement_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"RoutingModelVisitor_kLightElement2",Swig_var_RoutingModelVisitor_kLightElement2_get, Swig_var_RoutingModelVisitor_kLightElement2_set);
  SWIG_addvarlink(SWIG_globals(),(char *)"RoutingModelVisitor_kRemoveValues",Swig_var_RoutingModelVisitor_kRemoveValues_get, Swig_var_RoutingModelVisitor_kRemoveValues_set);
#if PY_VERSION_HEX >= 0x03000000
  return m;
#else
  return;
#endif
}

